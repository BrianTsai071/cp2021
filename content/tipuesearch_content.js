var tipuesearch = {"pages": [{'title': 'About', 'text': "Python 程式語言可以編寫網際內容管理系統 ( cmstemplate ), 可以執行虛實整合系統的強化學習 ( 4072pj1 ), 也能 控制 數位場景中的機電模擬系統, 並進行機構合成 ( 4072pj3 ), 但 有些情況下 , Python 程式免不了需要透過 Lua 程式才能與 C++ 底層溝通, 並且後續的零組件強度分, 大多依賴 C++ 程式套件完成 ( 4072pj2 ), 而開發者若希望實現機電模擬系統的 控制 , 則通常由 C 程式執行. \n 隨著雲端部署與隨身裝置的緊密結合下, 假如在十年前, 要編寫 Javascript 的伺服器端 runtime, C++ 會是個不錯的選擇 ( node.js ), 但此刻採用 Rust 才最 符合潮流 , 至於網際前後端若能同時執行最新版的 Javascript 與  Typescript , 可以省去開發者不少麻煩 ( Deno ). 當然隨身裝置中的各式 App, 若能採用  Dart  程式語言的  Flutter  跨平台架構編寫, 並且依賴  Elixir  分散式容錯伺服器進行配置, 程式開發者往後的日子才會更好過......, Oh, No! 現況真的是這樣嗎? \n 各位技職體系大學新鮮人, 歡迎進入二十一世紀第三個十年的計算機程式世代. \n 關鍵字: Python, Lua, C++, C, Javascript, Rust, Typescript, Dart, Flutter, Elixir. \n 開場: \n 這裡是國立虎尾科技大學-機械設計工程系-計算機程式課程網站. \n 學計算機程式做什麼? 其他人是 如何學習計算機程式  ( 原始文章 ,  作者 )? \n 計算機程式可以解決 ____\xa0 問題? \n \n 啟示: \n Don't confuse essense with tools. (不要混淆本質與工具) \n http://sam-koblenski.blogspot.com/2014/04/the-essence-of-programming.html \n 學習計算機程式與學習下圍棋類似, 了解下圍棋的規則並不會太難, 但想要成為下圍棋大師, 並不容易. \n 學會特定計算機程式語言的規定及語法也不會太難, 但是一談到要如何運用計算機程式, 解決機械設計流程碰到的各種問題, 絕大多數的機械設計背景工程師, 卻只能望電腦興嘆. Why? \n \n 深省: \n 發人深省的教學影片, computer science is not a science. It's also not really very much about computers. \n And that is, when some field is just getting started and you don't really understand it very well, it's very easy to confuse the essence of what you're doing with the tools that you use. \n I think in the future people will look back and say, yes, those primitives in the 20th century were fiddling around with these gadgets called computers, but really what they were doing is starting to  learn how to  formalize   intuitions  about  process ,   how to do things, starting to develop a way to talk precisely about how-to knowledge. \n 計算機程式在學習 如何將做事的過程 (process) 及直覺 (intuitions)  予以 形式化 (formalize) , 並且著手開發一種方式來 準確地 (precisely) 討論如何運用知識 (knowledge) . \n keywords: process, intuitions, formalize, precisely and knowledge. \n 關鍵字為: 過程, 直覺, 形式化, 精確以及知識. \n \n Overview and Introduction to Lisp ( source ,  Closed Caption ) \n \n 榜樣: \n 學習利用計算機程式解決問題的年齡愈早越好, 因為解決問題必須要將能精確運用或搜尋到對的知識, 將直覺過程轉化為電腦能夠處理的格式. 越早針對有興趣解題的領域啟蒙, 便越能及早在求學階段獲取相應的知識, 加入適當的團隊, 逐步透過專案解題, 累積更多經驗. 以下是 Bill Gates 述說其早年與計算機程式有關的歷程. \n \n 參考資料: \n Repository:  https://github.com/mdecourse/cp2021 \n Github Pages:  https://mde.tw/cp2021 \n Github 簡介:  https://docs.microsoft.com/zh-tw/learn/modules/introduction-to-github/ \n Github Actions:  https://docs.microsoft.com/zh-tw/learn/modules/github-actions-automate-tasks/ \n LaTeX 教學:  https://wdv4758h.github.io/notes/documentation/latex.html \n https://github.com/marketplace/actions/latex-action \n Zulipchat:  https://kmolab.zulipchat.com \n RoboDK:  https://robodk.com \n RoboDK API:  https://robodk.com/doc/en/PythonAPI/  ( RoboDK-API on Github ) \n 電腦輔助設計室與協同設計室行事曆: \n 全頁檢視 \n", 'tags': '', 'url': 'About.html'}, {'title': '學習程式', 'text': '學習計算機程式語言的態度建議:  https://learnpythonthehardway.org/book/intro.html \n \n 必得 花工夫 才學得來 (The hard way is easier) \n 自己 讀資料 自己 刻每一行程式碼  (Reading and Writing (Typing)) \n 要 注重 每一個 細節  (Attention to Detail) \n 要能 發現差異  (Spotting Differences) \n 千萬 不要複製貼上  (Do not Copy-Paste) \n 多 觀看 相關 操作示範 影片 (Using the Included Videos) \n 多 練習 而且要 堅持學習  (Practice and Persistence) \n \n 計算機程式學習 Python 目標: 編寫可以用於 機電資自動化整合系統設計與模擬 用的 網際程式 . \n Web Browser <-> Client\xa0 <-> Brython <-> Flask <->  Server <-> RoboDK, CoppeliaSim and Webots \n Online courses: \n https://www.youtube.com/watch?v=Ps8jOj7diA0&list=PL8ED50412A17D4C8B  (Stanford) - 27 lectures \n https://www.youtube.com/watch?v=8DvywoWv6fI  (Michigan) - 13:40:09 \n https://www.youtube.com/watch?v=rfscVS0vtbw  (Freecodecamp) - 4:26:51 \n Examples: \n https://medium.com/@patrickbfuller/a-simple-flask-app-edeed75dbee2 \n https://github.com/Patrickbfuller/simple_flask \n https://github.com/mileserickson/flask-brython-example \n https://pypi.org/project/brython-server/ \n https://github.com/andy31lewis/brySVG \n https://github.com/dunossauro/todo_list_flask_brython \n https://github.com/DarthBayo/Encrypt \n https://github.com/chfw/brython-pack \n https://github.com/rayluo/brip \n https://github.com/rayluo/brython-project-template \n https://github.com/rayluo/draggable-svg \n https://github.com/Shohrab-Hossain/Tic-Tac-Toe-web \n https://github.com/denisecase/chapstack \n https://gitlab.com/sammdu/bot-tac-toe/ \n https://github.com/mdecourse/lookupdict \n https://github.com/mdecourse/scissor-rock-paper2 \n https://github.com/mdecourse/wcms-scrum1 \n Python 語法 \n 由於 Github Pages 不允許伺服 __init__.py 檔案, 因此必須將  ggame  採用  https://brython.info/static_doc/en/import.html  中 Optimization 的方式轉為 brython_modules.js 後直接以 script 標註導入頁面. \n 將 ggame 中的 Brython 程式碼轉為 brython_modules.js 的方法: \n 在可攜系統中的 Python 安裝 brython 模組: pip install brython \n 將所安裝 brython 模組中的 brython_stdlib.js 複製一份到 ggame 倉儲中, 確定目前 ggame 目錄架構為: \n brython_stdlib.js \n ggame \n 意即 ggame 目錄中有 brython_stdlib.js 與 ggame brython 模組原始碼. \n 接下來執行 y:\\tmp\\github\\ggame>python -m brython --modules \n 完成後, 就可以在 y:\\tmp\\github\\ggame> 目錄中建立 brython_modules.js \n 以本頁面的作法是將 ggame 所需的 graphics 檔案放至 images 目錄中, 而 brython_modules.js 則放至 downloads 目錄後, 以 /downloads/brython_modules.js 放入 script 標註中引用. \n Python 3 官方教材:  https://docs.python.org/3/index.html \n Python tutorial:  https://docs.python.org/3/tutorial/index.html  (英文) \n Python tutorial:  https://docs.python.org/zh-tw/3/tutorial/  (中文) \n 網頁上的 Python - Brython:  https://www.brython.info/static_doc/en/intro.html  (解譯式) \n Brython Gallery \n 網頁上的 Python GUI- Flexx:  https://flexx.readthedocs.io/en/stable/  (轉譯式)', 'tags': '', 'url': '學習程式.html'}, {'title': '機械設計知識', 'text': 'Fundamental University Physics  (在校園網路下載電子書) \n Optimal Synthesis Methods for MEMS  (在校園網路下載電子書) \n Wind Power Plants  (在校園網路下載電子書) \n Principles of Physics  (在校園網路下載電子書) \n Statics  靜力學 (在校園網路下載電子書) \n Mechanics of Materials  材料力學 (在校園網路下載電子書) \n Fundamentals of Robotic Mechanical Systems  (在校園網路下載電子書) \n Springer Handbook of Mechanical Engineering  (在校園網路下載電子書) \n Precision Manufacturing  (在校園網路下載電子書) \n Theory and Design of CNC Systems  (在校園網路下載電子書) \n Multibody Mechanics and Visualization  (在校園網路下載電子書) \n Screw Compressors  (在校園網路下載電子書) \n Topology Optimization  (在校園網路下載電子書) \n Fundamentals of Mechanicsof Robotic Manipulation  (在校園網路下載電子書) \n Managing Engineering Design  (在校園網路下載電子書) \n General Spatial Involute Gearing  (在校園網路下載電子書) \n Inventive Thinking through TRIZ  (在校園網路下載電子書) \n A Mathematical Theory of Design  (在校園網路下載電子書)', 'tags': '', 'url': '機械設計知識.html'}, {'title': 'Python', 'text': ' 導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n 請利用下列網際編輯器, 開始學習如何使用 Python 解決問題, 一般機械設計流程會面臨什麼問題? \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n Filename:  .py   \n Run   Output   清除輸出區 清除繪圖區 Reload \n \n \n \n  ****************************** keyword start  \n \n \n  ****************************** keyword end  \n  ***************************** slide ex1 start  \n \n \n \n  ***************************** slide ex1 end  \n  ***************************** slide ex2 start  \n \n \n \n  ***************************** slide ex2 end  \n  ***************************** slide ex3 start  \n \n \n \n  ***************************** slide ex3 end  \n  ***************************** slide ex4 start  \n \n \n \n  ***************************** slide ex4 end  \n  line drawing start  \n \n \n \n  line drawing ends  \n \n  flag ex start  \n \n \n \n  flag ex ends  \n \n  bunny starts  \n \n \n \n  bunny ends  \n \n  clear canvas start  \n \n \n \n  clear canvas ends  \n \n  cango spur gears start  \n \n \n \n  cango spur gears ends  \n \n  temp convert start  \n \n \n \n  temp convert ends  \n \n  forloop start  \n \n \n \n  forloop ends  \n \n  guess start  \n \n \n \n  guess ends  \n \n  autoguess start  \n \n \n \n  autoguess ends  \n \n  lottery start  \n \n \n \n  lottery ends  \n \n  台灣威力彩 start  \n \n \n \n  台灣威力彩 ends  \n \n  bezier starts  \n \n \n \n  bezier ends  \n \n  turtle1 starts  \n \n \n \n  turtle1 ends  \n \n  turtle2 starts  \n \n \n \n  turtle2 ends  \n \n  turtle3 starts  \n \n \n \n  turtle3 ends  \n \n  turtle4 starts  \n \n \n \n  turtle4 ends  \n \n  turtle5 starts  \n \n \n \n  turtle5 ends  \n \n  turtle6 starts  \n \n \n \n  turtle6 ends  \n \n  turtle7 starts  \n \n \n \n  turtle7 ends  \n \n  turtle8 starts  \n \n \n \n  turtle8 ends  \n \n  konva1 starts  \n \n \n \n  konva1 ends  \n \n  ycqsort starts  \n \n \n \n  ycqsort ends  \n \n  ball starts  \n \n \n \n  ball ends  \n \n  nfulist starts  \n \n \n \n  nfulist ends  \n \n  clock1 starts  \n \n \n \n  clock1 ends  \n \n  fourbar linkage starts  \n \n \n \n  fourbar linkage ends  \n Keyword Ex1 Ex2 Ex3 Ex4 Ex5 Guess Autoguess 大樂透 威力彩 Temp Draw Flag Bezier clock1 Fourbar Turtle1 Turtle2 Turtle3 Turtle4 Turtle5 Turtle6 Turtle7 Turtle8 Konva1 Bunny Ball Spur Ycqsort nfulist Clear \n 參考資料: \n turtle_intro.pdf \n turtle_intro2.pdf \n 其他擷取程式的方式:  http://mde.tw/2017springvcp/blog/web-based-python.html \n Qt for Python \n https://www.qt.io/qt-for-python \n https://build-system.fman.io/python-qt-tutorial \n https://build-system.fman.io/pyqt-exe-creation/ \n https://github.com/mherrmann/fbs-tutorial \n https://www.ics.com/blog/we-ported-qt-app-c-python-heres-what-happened \n \n \n \n \n \n \n', 'tags': '', 'url': 'Python.html'}, {'title': 'Brython', 'text': '上一頁的網際 Python 是透過  https://brython.info/  完成, 當使用者在網頁中執行 Python 程式時, 透過 Brython 即時轉為 Javascript 後執行. \n Brython Google Group:  https://groups.google.com/g/brython \n Introduction guide to Brython: \n https://stackabuse.com/an-introductory-guide-to-brython \n https://www.geeksforgeeks.org/introduction-to-brython/ \n https://realpython.com/brython-python-in-browser/ \n Game in Brython: \n https://medium.com/swlh/sick-of-javascript-just-use-browser-python-4b9679efe08b \n Calculator in Brython: \n https://codehs.com/tutorial/zach/Intro_to_Brython_-_Calculator \n calculator.html \n \n calculator.html 原始碼: \n <html>\n    <head>\n        <meta charset="utf-8">\n        <!-- 直接從 cdn 導入 brython 程式庫 -->\n        <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3.8.8/brython.min.js"></script>\n<!-- 設定適合用於 calculator 的 table td 格式 -->\n<style>\n*{\n    font-family: sans-serif;\n    font-weight: normal;\n    font-size: 1.1em;\n}\ntd{\n    width: 80px;\n    background-color: #ccc;\n    padding: 10px 30px 10px 30px;\n    border-radius: 0.2em;\n    text-align: center;\n    cursor: default;\n}\n#result{\n    border-color: #000;\n    border-width: 1px;\n    border-style: solid;\n    padding: 10px 30px 10px 30px;\n    text-align: right;\n}\n</style>\n    </head>\n\n    <body onload="brython()">\n        <script type="text/python">\n            from browser import document, html\n            # calc 為 html table\n            calc = html.TABLE()\n            calc <= html.TR(html.TH(html.DIV("0", id="result"), colspan=3) +\n                            html.TD("C"))\n            lines = ["789/", "456*", "123-", "0.=+"]\n            \n            calc <= (html.TR(html.TD(x) for x in line) for line in lines)\n            \n            document <= calc\n            \n            result = document["result"] # direct acces to an element by its id\n            \n            def action(event):\n                """Handles the "click" event on a button of the calculator."""\n                # The element the user clicked on is the attribute "target" of the\n                # event object\n                element = event.target\n                # The text printed on the button is the element\'s "text" attribute\n                value = element.text\n                if value not in "=C":\n                    # update the result zone\n                    if result.text in ["0", "error"]:\n                        result.text = value\n                    else:\n                        result.text = result.text + value\n                elif value == "C":\n                    # reset\n                    result.text = "0"\n                elif value == "=":\n                    # execute the formula in result zone\n                    try:\n                        result.text = eval(result.text)\n                    except:\n                        result.text = "error"\n            \n            # Associate function action() to the event "click" on all buttons\n            for button in document.select("td"):\n                button.bind("click", action)\n        </script>\n    </body>\n</html> \n 延伸練習: \n 請將上述網際加減乘除計算機, 以 Brython(Browser Python) 改為 網際工程用計算機 . \n', 'tags': '', 'url': 'Brython.html'}, {'title': '網際模擬程式', 'text': '網際模擬程式原始網頁 \n https://github.com/mdecourse/webgame \xa0是一套源自 \xa0https://github.com/tiggerntatie/brython-server \xa0的網際模擬程式庫, 適合用來開發線上遊戲或與工程設計相關的網際程式. \n 之前的 js 程式庫都採用遠端資料, 目前將各程式庫升級為最新版本, 且改為自帶程式庫. \n 參考的網際程式庫:\xa0 https://github.com/tiggerntatie/ggame \xa0 \n 由於此 ggame 程式庫使用 \n jquery-3.3.1.min.js -\xa0 https://jquery.com/ \xa0 jquery-ui.1.12.1.min.js -\xa0 https://jqueryui.com/ \xa0 pixi-4.8.2.min.js -\xa0 http://www.pixijs.com/ \xa0 buzz-1.2.1.js -\xa0 http://buzz.jaysalvat.com/ \xa0 brython3.9.4.js -\xa0 https://brython.info/ \xa0 brython_stdlib3.9.4.js \n 因此使用者必須對上述程式庫有些了解後, 再深入研究如何使用\xa0 ggame 程式庫開發專案套件. \n 使用者可以登入 github.com 後, 連結至  https://github.com/mdecourse/webgame  選擇將 webgame 倉儲作為 template 後新增網際程式倉儲, 之後可以利用 Leo Editor 進行後續程式開發.', 'tags': '', 'url': '網際模擬程式.html'}, {'title': 'Spacewar', 'text': '2018 網際模擬程式 \n ggame documentation.pdf \n another game engine in brython:  https://github.com/mdecourse/brython-game-engine-demo \n \n  check if we need brython_stdlib.js or not  \n \n  <script src="./../cmsimde/static/brython_stdlib.js"></script>  \n \n  for ggame  \n \n \n \n \n \n  brython_modules.js is ggame brython library converted into javascript  \n \n  start brython  \n \n  ggame will show on graphics-column markup  \n \n', 'tags': '', 'url': 'Spacewar.html'}, {'title': 'Flask', 'text': 'Server 端 (Flask): \n from flask import Flask, render_template, request, jsonify\n \n# Initialize the Flask application\napp = Flask(__name__)\n \n@app.route(\'/\')\ndef index():\n    return render_template(\'index.html\')\n \n@app.route(\'/add_numbers\', methods=[\'POST\'])\ndef add_numbers():\n    a = request.form.get(\'a\', 0, type=int)\n    b = request.form.get(\'b\', 0, type=int)\n    #return jsonify(result = a+b)\n    # 必須傳回字串?\n    return str(a+b)\n \nif __name__ == \'__main__\':\n    app.run(debug=True) \n Client 端 (Brython): \n <!DOCTYPE html>\n<html lang="en">\n  <head>\n    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>\n    <link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css" rel="stylesheet">\n    <script src="http://brython.info/src/brython_dist.js"></script>\n  </head>\n  <body onload="brython()">\n  <script type="text/python">\n    from browser import document\n    from browser import ajax\n    # https://www.brython.info/static_doc/en/ajax.html\n     \n    def on_complete(req):\n        document["txt_area"] .clear()\n        if req.status==200 or req.status==0:\n            document["txt_area"] <= req.text\n        else:\n            document["txt_area"] <= "error "+req.text\n             \n    def get(url):  \n        # req 從 ajax 模組中的 ajax 類別建立案例, 為一個 ajax 物件        \n        req = ajax.ajax()\n        # a 為 id="A" 輸入欄位中所輸入的值\n        a = document[\'A\'].value\n        # b 為 id="B" 輸入欄位中所輸入的值        \n        b = document[\'B\'].value\n        # ajax 物件中的 bind 方法, 第一個輸入變數為 evt, \'complete\' 表示 ajax 從伺服器取值完成後, 執行 on_complete 函式\n        req.bind(\'complete\', on_complete)\n        req.open(\'POST\', url, True)\n        req.set_header(\'content-type\',\'application/x-www-form-urlencoded\')\n        req.send({"a": a, "b":b}) \n     \n    # 使用者按下 id="calculate" 按鈕, 將會執行上述 get("/add_numbers") 函式\n    document[\'calculate\'].bind(\'click\',lambda ev:get(\'/add_numbers\'))\n \n</script>\n   \n    <div class="container">\n      <div class="header">\n        <h3 class="text-muted">Brython ajax example</h3>\n      </div>\n      <div>\n    <input type="text" id="A" size="5" name="a"> +\n    <input type="text" id ="B" size="5" name="b"> =\n    <div id="txt_area"></div>\n    <p><button id="calculate">calculate server side</button>\n      </form>\n      </div>\n    </div>\n  </body>\n</html> \n', 'tags': '', 'url': 'Flask.html'}, {'title': 'Rust', 'text': '在 Windows 操作系統中學習 Rust, 首先需要一個能夠編譯 Rust 程式的 可攜系統 . \n 有了可攜系統之後再逐步從  http://stevedonovan.github.io/rust-gentle-intro/  了解 Rust 並非簡單易學, 而是當機械設計工程師在熟悉利用 Python 建立網際服務與最佳化設計運算後, 必須利用數值分析方法提升運算效益時, Rust 會是不錯的選擇之一. 具備學習動機之後, 就可以導入諸如  https://github.com/KmolYuan/metaheuristics-nature-rs  的程式庫, 配合伺服器中的網際 Python 程式進行設計運算. \n User Forum:  https://users.rust-lang.org/ \n Reddit:  https://www.reddit.com/r/rust/ \n Rust and Webassembly: \n https://rustwasm.github.io/docs/book/ \n https://ithelp.ithome.com.tw/articles/10206128 \n https://github.com/yewstack/yew \n http://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/ \n https://erwabook.com/ \n GUI for Webassembly: \n https://github.com/emilk/egui \n https://reposhub.com/rust/gui/emilk-emigui.html   \n https://github.com/tauri-apps/tauri \n Why Python users may need Rust: \n Speed up your python using Rust \n https://github.com/rust-lang/book \n http://stevedonovan.github.io/rust-gentle-intro/ \n The Rust Programming Language: \n https://doc.rust-lang.org/stable/book/ \n https://lise-henry.github.io/books/trpl2.pdf \n https://github.com/PyO3/pyo3  for Rust Version 1.41.1 (2020-02-27) and up. \n', 'tags': '', 'url': 'Rust.html'}, {'title': 'RoboDK', 'text': '\n \n \n', 'tags': '', 'url': 'RoboDK.html'}, {'title': '開發範例', 'text': '平面機構分析與合成: \n https://github.com/mdecourse/ps2020 \n \n \n Python GUI with Serial port communication: \n https://github.com/mdecourse/Pyquino \n \n \n', 'tags': '', 'url': '開發範例.html'}, {'title': '網際程式', 'text': "An re-introduction to HTTP cookies: \n https://www.valentinog.com/blog/cookies/ \n 以下程式主要在結合 Flask 與 Fossil SCM 的登入 cookie 設定, 兩台 server 必須屬於同一個 domain name. \n from flask import Flask\nfrom flask import make_response, request, redirect\nimport requests\n# for app.secret_key\nimport os\n\napp = Flask(__name__)\n# 使用 session 必須要設定 secret_key\nsecret_key = os.urandom(24).hex()\napp.secret_key = secret_key\n\n@app.route('/')\ndef hello_world():\n    with requests.Session() as s:\n        url = 'https://fossil.kmol.info/u/yen/login'\n        post_var = {'u': 'username', 'p': 'password'}\n        headers = {'X-Requested-With': 'XMLHttpRequest'}\n        result = s.post(url, data = post_var, headers = headers)\n        cookie = s.cookies.get_dict()\n        key = list(cookie.keys())[0]\n        value = cookie[key]\n        response = make_response(redirect(url))\n        response.set_cookie(key, value)\n        return response\n        \nif __name__ == '__main__':\n    app.run() \n Python and SQLite: \n https://github.com/thombashi/SimpleSQLite \n https://github.com/codewithlennylen/Python-SQLite-Tutorials \n", 'tags': '', 'url': '網際程式.html'}, {'title': 'FossilPy', 'text': 'https://github.com/gumblex/fossilpy \n import sqlite3\ncon = sqlite3.connect(\'kmol.fossil\')\ncur = con.cursor()\n\n# this is the login user through flask Oauth2 login\nusername = "yen"\n\n# check if login name existed\n# pw field is the password\ncur.execute("select pw from user where login=\'" + username + "\';")\npassword = cur.fetchall()\n\nif len(password) == 0:\n    print("account is not created!")\n    # we may need to create account for this login user\nelse:\n    # the fetched data is a list with tuple inside\n    print(password[0][0])\n    # we will need the user account and password to get login cookie\n    # we will use the account/password to login through flask connection\n\ncon.close() \n 當 Flask Oauth2 server 與 Fossil SCM 同在一台主機上共用 domain name 時, 可以利用下列程式, 讓使用者透過 Oauth2 登入 Fossil SCM 倉儲: \n from flask import Flask\nfrom flask import make_response, redirect\n# for creating session\nimport requests\n# for generating random secret_key\nimport os\n\napp = Flask(__name__)\nsecret_key = os.urandom(24).hex()\napp.secret_key = secret_key\n\n@app.route(\'/\')\ndef hello_world():\n    with requests.Session() as s:\n        url = \'https://fossil.kmol.info/u/yen/login\'\n        post_var = {\'u\': \'yen\', \'p\': \'fossil\'}\n        headers = {\'X-Requested-With\': \'XMLHttpRequest\'}\n        result = s.post(url, data = post_var, headers = headers)\n        cookie = s.cookies.get_dict()\n        key = list(cookie.keys())[0]\n        value = cookie[key]\n\n        response = make_response(redirect(url))\n        response.set_cookie(key, value)\n        return response\n        \n\nif __name__ == \'__main__\':\n    app.run()\n     \n \n', 'tags': '', 'url': 'FossilPy.html'}, {'title': 'Delta', 'text': "Delta format 的應用說明: \n Suppose we have some text value a, and user has changed it to value b. Using delta function we can get a compressed delta value d that we can store and keep it along with the new text value b. If later user wants to see the previous version of text, we can use deltainv(b, d) to get the previous value a. If we keep all consequtive deltas we can use deltainv multiple times to get any of the earlier text versions. \n 原始的  Fossil SCM Delta  以 C 編寫. \n 以下則以 setuptools 編譯為 Python 動態連結程式庫. \n Python Fossil Delta: \n https://github.com/ggicci/python-fossil-delta \n import fossil_delta\n\ndef main():\n    # 使用者在改版過程將 abcdef 改為 abc\n    # 當下透過 delta algorithm 對兩者取 delta\n    delta = fossil_delta.create_delta(b'abc', b'abcdef')\n    # 之後透過 delta 運算給定 delta 與目前的版本, 可以取得先前的版本內容\n    out = fossil_delta.apply_delta(b'abc', delta)\n    print(out)  # --> abcdef \n 以及用 Rust 改寫. \n Rust Fossil Delta: \n https://crates.io/crates/fossil-delta \n 其中包含  Leo Editor  的應用. \n 將  delta.c  透過 \n setup.py \n from setuptools import setup\n\nsetup(\n    name='python-fossil-delta',\n    version='18.11.27',\n    description='Delta compression algorithm from fossil SCM',\n    long_description=open('README.md', 'rt').read(),\n    url='https://github.com/ggicci/python-fossil-delta',\n    author='Ggicci',\n    author_email='ggicci@163.com',\n    license='MIT',\n    keywords='fossil-delta compression algorithm',\n    setup_requires=['cffi>=1.11.5'],\n    package_dir={'': 'src'},\n    packages=['fossil_delta'],\n    package_data={\n        'fossil_delta': ['*.h', '*.c', 'build/*.py'],\n    },\n    cffi_modules=[\n        'src/fossil_delta/build/fossil_delta_build.py:ffibuilder',\n    ],\n    install_requires=['cffi>=1.11.5'],\n    platforms='any',\n)\n \n 編譯為 dll, 可以為 Python 程式呼叫運用. \n", 'tags': '', 'url': 'Delta.html'}, {'title': 'DSL', 'text': 'Domain Specific Language: \n https://github.com/lark-parser/lark \n http://blog.erezsh.com/how-to-write-a-dsl-in-python-with-lark/ \n \n', 'tags': '', 'url': 'DSL.html'}, {'title': '課程主題', 'text': '建立可攜系統在解決 ____ 問題? \n 建立可攜程式系統: \n 從 可攜系統 中選擇所需組合, 搭建可用於維護個人倉儲與網站內容用之隨身程式系統. \n 維護學習倉儲與網站: \n Portablekmol_base - 每一個 portablekmol 可攜程式系統都必須包括, 其中內含啟動隨身與關閉隨身系統的批次檔案與對應的 home 目錄. \n SciTE  - 程式與文件編輯器, 經過設定, 可用來解譯 Python, Lua 與 ANSI C 程式. \n ShareX  - Windows 電腦畫面取影像或拍攝操作影片用之開放源工具, 應該要設法用  Qt for Python  改寫, 其主要核心程式為開放源的  ffmpeg ,  ShareX  利用 C# 建立其操作流程之 GUI 功能視窗介面. \n Zoomit  - 用於拍攝操作影片縮放畫面螢幕之工具. \n Process Explorer  - 用於 Windows Process 檢視與控管之工具. \n Python  - 用於維護個人靜態網頁與動態網頁之程式解譯系統, 也用於進行 GUI 套件與網際程式開發, 或最佳化及數值分析運算. \n 為了啟動最新版的 CMSiMDE 動態網站, Python 需要安裝 pyopenssl 模組: pip install pyopenssl. \n Portablegit  - Git 分散式版次管理系統工具. \n Putty  - 提供 sftp, ssh 與 key 控管及網路傳檔或遠端登入工具. \n Filezilla  - 提供 GUI 模式之 sftp 網路傳檔工具. \n Xming  - Windows X server. \n Portable OBS  - 可攜網路串流平台, 可與 Youtube 直播結合, 將直播內容存於 Youtube 直播影片系統中. \n RoboDK  - 工業級機械手臂在線與離線模擬與控制系統, 提供 Python API 程式介面, 可讓使用者直觀學習 Python 程式語法, 進而學習如何操控工業級機械手臂執行自動化操作流程. \n CoppeliaSim  - 開放源機電系統模擬與控制整合平台, 提供 Lua 與 Python API 程式控制介面, 可近端或遠端控制模擬中的機電系統. \n Msys2  - 可在 Windows 採用與 Mac 及 Linux 操作系統相同的 C/C++ 程式編譯流程, 主要目的在開發可跨各種操作系統的機械設計相關套件與應用程式. \n TCC  - 可與  SciTE  結合, 用於簡單 ANSI C 程式的類解譯執行. \n Lua  - 主要用於  CoppeliaSim  機電系統與模擬, 也可用於 網際程式開發 . \n Range3  - 小型開放源有限元素分析套件. \n Webots  - 開放源機電系統模擬與控制平台, 其特色是採用 VRML 2.0 延伸格式建立零組件模型, 除具備網際介面外, 也可讓使用者透過程式方法與各種參數式電腦輔助設計系統結合, 直接進行機電系統的零組件轉檔, 無需中間經由人工再次進行機電模擬系統組立. \n MikTeX  -  LaTeX  文件編譯套件, 可與  Github Actions  結合在近端或雲端編譯使用者所建立的協同 LaTeX 文件. \n Rust  - 二十一世紀工程師的 C++ 程式語言. \n 建立倉儲與網站, 在解決 ____ 問題? \n 建立課程學習倉儲與網頁: \n 本課程所有學員都必須建立  github  (若  gitlab  已開放一般用戶使用  gitlab pages , 則需同時建立  gitlab  帳號) 與  Heroku  帳號, 目的在將課程學習歷程, 記錄在分散式版次管理系統中. \n 除了雲端主機外, 各學員必須學會如何利用  Virtualbox  上的  Ubuntu  虛擬主機, 將雲端分散式版次管理系統上的內容, 同步至自行架設的  GOGS  (或  Gitea ) 與  Fossil SCM  分散式版次管理系統. \n Fossil SCM 的出現, 在解決 ____ 問題? \n Fossil SCM 手冊巡禮: \n https://www.fossil-scm.org/home/doc/trunk/www/index.wiki \n Git 與 Fossil SCM 倉儲之間的內容同步, Fossil SCM 系統應用. \n 在網際介面學習簡單的 Python 語法, 在解決 ____ 問題? \n 利用網際介面與可攜系統學習 Python 程式語法: \n \n 了解如合透過  Brython , 在網頁中編寫並執行 Python 程式. \n 了解如何建立簡單的 網際計算機 . \n 延伸簡單的 網際計算機 , 建立工程用計算機. \n 了解如何在網際環境, 利用 Python 進行 2D 繪圖. \n 延伸 網際 2D 繪圖 , 完成正齒輪齒形繪製. \n 延伸網際正齒輪齒形繪製, 完成齒輪減速機 齒面寬設計 運算與囓合圖. \n Python 與  RoboDK \n \n', 'tags': '', 'url': '課程主題.html'}, {'title': '倉儲與網頁', 'text': '本課程網頁的倉儲位於: \n https://github.com/mdecourse/cp2021.git  - Github \n https://gitlab.com/mdecourse/cp2021.git  - Gitlab \n https://bitbucket.org/mdecourse/cp2021.git  -Bitbucket \n https://git.heroku.com/cp2021.git  (cp2021 ~ cp2025 -- heroku2 At Mde dot TW) \n 將同一份資料的改版提交同步至 Github, Gitlab, Bitbucket 與 Heroku: \n Github 上的代號為 origin, 對應至 https://github.com/mdecourse/cp2021.git \n git remote add gitlab https://gitlab.com/mdecourse/cp2021.git \n git remote add bitbucket https://mdecourse@bitbucket.org/mdecourse/cp2021.git \n heroku login 之後 heroku git:remote -a cp2021 (即 git remote add heroku  https://git.heroku.com/cp2021.git ) \n 以上設定與改版資料同步至四種雲端系統後, 若僅一人執行開發, 則相關內容連同近端倉儲, 共計有 5 個備份版本. \n 若專案牽涉 n 人協同, 則每一個時段都將會有至少 n + 4 個備份版本. \n 課程練習: \n CMSiMDE 倉儲的靜態網站該如何設定, 才能分別在 Github, Gitlab, Bitbucket 與 Heroku 平台上進行伺服? \n 註: Gitlab 與 Bitbucket pages 並非可免費使用. Github pages 也可能只有針對教育帳號能免費使用. \n CMSiMDE 倉儲的靜態網站該如何在 Fossil SCM 主機中進行伺服? \n 基礎知識: \n 何謂倉儲 (repository)? \n 何謂靜態網頁 (static web site)? 那麼有動態網頁 (dynamic web site)嗎? \n 何謂(電腦)伺服 (serving)? \n 何謂 Fossil SCM？ \n', 'tags': '', 'url': '倉儲與網頁.html'}, {'title': 'Why Git', 'text': 'Git Book  (中文) \n Beginning Git and Github  (英文) \n What can Git do? \n Remember all those problems we tried to solve at the beginning of this chapter? Well, Git can solve them all. It can even solve problems you didn’t know you had! \n First, it works great with tracking changes. You can \n \n •Go back and forth between versions \n •Review the differences between those versions \n •Check the change history of a file ( git blame ) \n •Tag a specific version for quick referencing \n \n Git is also a great tool for teamwork. You can \n \n •Exchange "changesets" between repositories \n •Review the changes made by others \n \n One of the main features of Git is its Branching system. A branch is a copy of a project which you can work on without messing with the repository. This concept has been around for some time, but with Git, it is way faster and more efficient. Branching also comes along with Merging, which is the act of copying the changesets done in a branch back to the source. \n Generally, you create a branch to create or test a new feature and merge that branch back when you are satisfied with the work. \n There is also a simple concept that you might use a lot: Stashing. \n Stashing is the act of safely putting away your current edits so that you have clean environment to work on something completely different. You might want to use stashing when you are playing around or testing a feature but need to work on a new feature in priority. So, you stash your changes away and begin to write that feature. After you are done, you can get your changes back and apply them to your current working environment. \n', 'tags': '', 'url': 'Why Git.html'}, {'title': 'Git Push', 'text': '將近端改版資料新增提交等步驟都在近端完成, 但是 git push 則是要將改版資料推向遠端倉儲. \n 共有三種方式可以取得 git push 的使用授權: \n \n 以該倉儲對應的帳號密碼進行 push \n 以該倉儲對應的 Personal Access Token 進行 push \n 以該倉儲對應帳號的 SSH 私鑰進行 push \n \n 以帳號密碼進行 push: \n 語法為 url = https://github.com/mdecourse/report.git \n 利用  Github Personal Access Token  進行 push 請參考 這裡 的說明. \n 語法為 url =  https://<token>@github.com/mdecourse/report.git \n 以  Github SSH  私鑰進行 push: \n 語法為 utl = git@<putty_session>:mdecourse/report.git \n', 'tags': '', 'url': 'Git Push.html'}, {'title': 'ggame', 'text': '參考的網際程式庫:\xa0 https://github.com/mdecourse/ggame , 使用說明:  https://ggame.readthedocs.io/en/latest/index.html \n 由於此 ggame 程式庫使用 \n jquery-3.3.1.min.js -\xa0 https://jquery.com/ \xa0 jquery-ui.1.12.1.min.js -\xa0 https://jqueryui.com/ \xa0 pixi-4.8.2.min.js -\xa0 http://www.pixijs.com/ \xa0 buzz-1.2.1.js -\xa0 http://buzz.jaysalvat.com/ \xa0 brython-3.7.0.js -\xa0 https://brython.info/ \xa0 brython_stdlib-3.7.0.js \n 因此使用者必須對上述程式庫有些了解後, 再深入研究如何使用\xa0 ggame 程式庫開發專案套件. \n 參考資料: \n https://github.com/Runpython-IntroProgramming/Course-Syllabus/wiki \n https://github.com/Runpython-IntroProgramming   \n module_exists \n # ggame source code\n# prepared for cp2021\ndef module_exists(module_name):\n    try:\n        __import__(module_name)\n    except ImportError:\n        return False\n    else:\n        return True\n\nif module_exists(\'browser\') and module_exists(\'javascript\'):\n\n    from browser import window, document\n    #from javascript import JSObject, JSConstructor\n\n    # 利用 Brython browser 模組中的 window 物件導入  PIXI Javascript 程式庫\n    # 其中 JSObject 可以直接透過 window 導入 Javascript function\n    # JSConstructor 則用來轉換 class 物件\n    GFX = window.PIXI\n    GFX_Rectangle = GFX.Rectangle.new\n    GFX_Texture = GFX.Texture.new\n    GFX_Texture_fromImage = GFX.Texture.fromImage.new\n    GFX_Sprite = GFX.Sprite.new\n    GFX_Graphics = GFX.Graphics.new()\n    GFX_Text = GFX.Text.new\n    # need to check with PIXI source code for autoDetectRender\n    GFX_DetectRenderer = GFX.autoDetectRenderer\n    # 利用 JSObject 以及 window 導入 buzz.js\n    SND = window.buzz\n    SND_Sound = SND.sound.new\n    \n    class GFX_Window(object):\n    \n        def __init__(self, width, height, onclose):\n            # 假如要執行時額外跳出一個視窗\n            #self._w = window.open("", "")\n            # 在原先的視窗中執行\n            self._w = window\n            self._stage = GFX.Container.new()\n            self.width = width if width != 0 else int(window.innerWidth * 0.9)\n            self.height = height if height != 0 else int(window.innerHeight * 0.9)\n            self._renderer = GFX.autoDetectRenderer(self.width, self.height, {\'transparent\':True})\n            self._w.document.body.appendChild(self._renderer.view)\n            self._w.onunload = onclose\n  \n        def bind(self, evtspec, callback):\n            self._w.document.body.bind(evtspec, callback)\n      \n        def add(self, obj):\n            self._stage.addChild(obj)\n        \n        def remove(self, obj):\n            self._stage.removeChild(obj)\n        \n        def animate(self, stepcallback):\n            self._renderer.render(self._stage)\n            self._w.requestAnimationFrame(stepcallback)\n        \n        def destroy(self):\n            SND.all().stop()\n            self._stage.destroy()\n\n \n class App \n class App(object):\n    """\n    The `ggame.App` class is a (typically subclassed) class that encapsulates\n    handling of the display system, and processing user events. The `ggame.App` \n    class also manages lists of all `ggame.Sprite` instances in the application.\n\n    When subclassing `ggame.App` you may elect to instantiate most of your\n    sprite objects in the initialization section.\n\n    Processing that must occur on a per-frame basis may be included by overriding\n    the `ggame.App.step` method. This is also an appropriate location to call\n    similar \'step\' methods for your various customized sprite classes.\n\n    Once your application class has been instantiated, begin the frame drawing\n    process by calling its `ggame.App.run` method.\n\n    NOTE: Only **one** instance of an `ggame.App` class or subclass may be \n    instantiated at a time.\n    """\n    spritelist = []\n    """List of all sprites currently active in the application."""\n    _eventdict = {}\n    _spritesdict = {}\n    _spritesadded = False\n    _win = None\n\n    def __init__(self, *args):\n        """\n        The `ggame.App` class is called either by specifying the desired app window size\n        in pixels, as two parameters (e.g. `myapp = App(640,480)`), or by providing\n        no size parameters at all (e.g. `myapp = App()`), in which case, the full browser\n        window size is used.\n        """\n        if App._win == None and (len(args) == 0 or len(args) == 2):\n            x = y = 0\n            if len(args) == 2:\n                x = args[0]\n                y = args[1]\n            App._win = GFX_Window(x, y, App._destroy)\n            self.width = App._win.width\n            self.height = App._win.height\n            # Add existing sprites to the window\n            if not App._spritesadded and len(App.spritelist) > 0:\n                App._spritesadded = True\n                for sprite in App.spritelist:\n                    App._win.add(sprite.GFX)\n            App._win.bind(KeyEvent.keydown, self._keyEvent)\n            App._win.bind(KeyEvent.keyup, self._keyEvent)\n            App._win.bind(KeyEvent.keypress, self._keyEvent)\n            App._win.bind(MouseEvent.mousewheel, self._mouseEvent)\n            App._win.bind(MouseEvent.mousemove, self._mouseEvent)\n            App._win.bind(MouseEvent.mousedown, self._mouseEvent)\n            App._win.bind(MouseEvent.mouseup, self._mouseEvent)\n            App._win.bind(MouseEvent.click, self._mouseEvent)\n            App._win.bind(MouseEvent.dblclick, self._mouseEvent)\n\n        \n    def _routeEvent(self, event, evtlist):\n        for callback in reversed(evtlist):\n            if not event.consumed:\n                callback(event)\n        \n    def _keyEvent(self, hwevent):\n        evtlist = App._eventdict.get(\n            (hwevent.type, KeyEvent.keys.get(hwevent.keyCode,0)), [])\n        evtlist.extend(App._eventdict.get((hwevent.type, \'*\'), []))\n        if len(evtlist) > 0:\n            evt = KeyEvent(hwevent)\n            self._routeEvent(evt, evtlist)\n\n    def _mouseEvent(self, hwevent):\n        evtlist = App._eventdict.get(hwevent.type, [])\n        if len(evtlist) > 0:\n            evt = MouseEvent(hwevent)\n            self._routeEvent(evt, evtlist)\n\n    @classmethod\n    def _add(cls, obj):\n        if App._win != None:\n            App._win.add(obj.GFX)\n        App.spritelist.append(obj)\n        if type(obj) not in App._spritesdict:\n            App._spritesdict[type(obj)] = []\n        App._spritesdict[type(obj)].append(obj)\n\n    @classmethod\n    def _remove(cls, obj):\n        if App._win != None:\n            App._win.remove(obj.GFX)\n        App.spritelist.remove(obj)\n        App._spritesdict[type(obj)].remove(obj)\n        \n    def _animate(self, dummy):\n        if self.userfunc:\n            self.userfunc()\n        else:\n            self.step()\n        App._win.animate(self._animate)\n\n    @classmethod\n    def _destroy(cls, *args):\n        """\n        This will close the display window/tab, remove all references to \n        sprites and place the `App` class in a state in which a new \n        application could be instantiated.\n        """ \n        App._win.destroy()\n        App._win = None\n        for s in list(App.spritelist):\n            s.destroy()\n        App.spritelist = []\n        App._spritesdict = {}\n        App._eventdict = {}\n        App._spritesadded = False\n\n    @classmethod\n    def listenKeyEvent(cls, eventtype, key, callback):\n        """\n        Register to receive keyboard events. The `eventtype` parameter is a \n        string that indicates what type of key event to receive (value is one\n        of: `\'keydown\'`, `\'keyup\'` or `\'keypress\'`). The `key` parameter is a \n        string indicating which key (e.g. `\'space\'`, `\'left arrow\'`, etc.) to \n        receive events for. The `callback` parameter is a reference to a \n        function or method that will be called with the `ggame.KeyEvent` object\n        when the event occurs.\n\n        See the source for `ggame.KeyEvent.keys` for a list of key names\n        to use with the `key` paramter.\n        """\n        evtlist = App._eventdict.get((eventtype, key), [])\n        evtlist.append(callback)\n        App._eventdict[(eventtype, key)] = evtlist\n\n    @classmethod\n    def listenMouseEvent(cls, eventtype, callback):\n        """\n        Register to receive mouse events. The `eventtype` parameter is\n        a string that indicates what type of mouse event to receive (\n        value is one of: `\'mousemove\'`, `\'mousedown\'`, `\'mouseup\'`, `\'click\'`, \n        `\'dblclick\'` or `\'mousewheel\'`). The `callback` parameter is a \n        reference to a function or method that will be called with the \n        `ggame.MouseEvent` object when the event occurs.\n        """\n        evtlist = App._eventdict.get(eventtype, [])\n        evtlist.append(callback)\n        App._eventdict[eventtype] = evtlist\n\n    @classmethod\n    def unlistenKeyEvent(cls, eventtype, key, callback):\n        """\n        Use this method to remove a registration to receive a particular\n        keyboard event. Arguments must exactly match those used when\n        registering for the event.\n        """\n        App._eventdict[(eventtype,key)].remove(callback)\n\n    @classmethod\n    def unlistenMouseEvent(cls, eventtype, callback):\n        """\n        Use this method to remove a registration to receive a particular\n        mouse event. Arguments must exactly match those used when\n        registering for the event.\n        """\n        App._eventdict[eventtype].remove(callback)\n\n    @classmethod\n    def getSpritesbyClass(cls, sclass):\n        """\n        Returns a list of all active sprites of a given class.\n        """\n        return App._spritesdict.get(sclass, [])\n        \n    def step(self):\n        """\n        The `ggame.App.step` method is called once per animation frame. Override\n        this method in your own subclass of `ggame.App` to perform periodic \n        calculations, such as checking for sprite collisions, or calling\n        \'step\' functions in your own customized sprite classes.\n\n        The base class `ggame.App.step` method is empty and is intended to be overriden.\n        """\n        pass\n\n    def run(self, userfunc = None):\n        """\n        Calling the `ggame.App.run` method begins the animation process whereby the \n        `ggame.App.step` method is called once per animation frame.\n        """\n        self.userfunc = userfunc\n        App._win.animate(self._animate)\n \n class Sprite \n class Sprite(object):\n    """\n    The `ggame.Sprite` class combines the idea of a visual/graphical asset, a\n    position on the screen, and *behavior*. Although the `ggame.Sprite` can be\n    used as-is, it is generally subclassed to give it the desired behavior.\n\n    When subclassing the `ggame.Sprite` class, you may customize the initialization\n    code to use a specific asset. A \'step\' or \'poll\' method may be added\n    for handling per-frame actions (e.g. checking for collisions). Step or poll\n    functions are not automatically called by the `ggame.App` class, but you\n    may subclass the `ggame.App` class in order to do this.\n\n    Furthermore, you may wish to define event callback methods in your customized\n    sprite class. With customized creation, event handling, and periodic processing\n    you can achieve fully autonomous behavior for your class. \n    """\n \n    _rectCollision = "rect"\n    _circCollision = "circ"\n    \n    def __init__(self, asset, pos=(0,0)):\n        """\n        The `ggame.Sprite` must be created with an existing graphical `asset`.\n        An optional `pos` or position may be provided, which specifies the \n        starting (x,y) coordinates of the sprite on the screen. By default,\n        the position of a sprite defines the location of its upper-left hand\n        corner. This behavior can be modified by customizing the `center` of\n        the sprite.\n\n        Example: player = Sprite(ImageAsset("player.png", (100,100))\n        """\n        self._index = 0\n        if type(asset) == ImageAsset:\n            self.asset = asset\n            try:\n                #self.GFX = GFX_Sprite()\n                self.GFX = GFX_Sprite(asset.GFX) # GFX is PIXI Sprite\n            except:\n                self.GFX = None\n        elif type(asset) in [RectangleAsset, \n            CircleAsset, \n            EllipseAsset, \n            PolygonAsset,\n            LineAsset,\n            ]:\n            self.asset = asset\n            self.GFX = asset.GFX.clone() # GFX is PIXI Graphics (from Sprite)\n            self.GFX.visible = True\n        elif type(asset) in [TextAsset]:\n            self.asset = asset._clone()\n            self.GFX = self.asset.GFX # GFX is PIXI Text (from Sprite)\n            self.GFX.visible = True\n        self.position = pos\n        """Tuple indicates the position of the sprite on the screen."""\n        self._setExtents()\n        self.rectangularCollisionModel()\n        App._add(self)\n        \n    def _setExtents(self):\n        """\n        update min/max x and y based on position, center, width, height\n        """\n        self.xmin = int(self.x - self.fxcenter * self.width)\n        self.xmax = int(self.x + (1 - self.fxcenter) * self.width)\n        self.ymin = int(self.y - self.fycenter * self.height)\n        self.ymax = int(self.y + (1 - self.fycenter) * self.height)\n        self.radius = int((self.width + self.height)/4)\n        #self.xcenter = int(self.x + (1 - self.fxcenter) * self.width / 2)\n        #self.ycenter = int(self.y + (1 - self.fycenter) * self.height / 2)\n\n    def firstImage(self):\n        """\n        Select and display the *first* image used by this sprite.\n        """\n        self.GFX.texture = self.asset[0]\n\n    def lastImage(self):\n        """\n        Select and display the *last* image used by this sprite.\n        """\n        self.GFX.texture = self.asset[-1]\n\n    def nextImage(self, wrap = False):\n        """\n        Select and display the *next* image used by this sprite.\n        If the current image is already the *last* image, then\n        the image is not advanced.\n\n        If the optional `wrap` parameter is set to `True`, then calling\n        `ggame.Sprite.nextImage` on the last image will cause the *first*\n        image to be loaded.\n        """\n        self._index += 1\n        if self._index >= len(self.asset):\n            if wrap:\n                self._index = 0\n            else:\n                self._index = len(self.asset)-1\n        self.GFX.texture = self.asset[self._index]\n\n    def prevImage(self, wrap = False):\n        """\n        Select and display the *previous* image used by this sprite.\n        If the current image is already the *first* image, then\n        the image is not changed.\n\n        If the optional `wrap` parameter is set to `True`, then calling\n        `ggame.Sprite.prevImage` on the first image will cause the *last*\n        image to be loaded.\n        """\n        self._index -= 1\n        if self._index < 0:\n            if wrap:\n                self._index = len(self.asset)-1\n            else:\n                self._index = 0\n        self.GFX.texture = self.asset[self._index]\n\n    def setImage(self, index=0):\n        """\n        Select the image to display by giving its `index`, where an index\n        of zero represents the *first* image in the asset.\n\n        This is equivalent to setting the `ggame.Sprite.index` property\n        directly.\n        """\n        self.index = index\n\n    def rectangularCollisionModel(self):\n        """\n        Calling this method will configure the sprite to use a simple \n        rectangular collision model when checking for overlap with \n        other sprites. In this model, the "collideable" area of the sprite\n        is equal to the rectangle of the asset image. If the sprite asset\n        image includes a large transparent margin, this may cause the \n        collision box to be larger than desired.\n        """\n        self._collisionStyle = type(self)._rectCollision\n\n    def circularCollisionModel(self):\n        """\n        Calling the sprite\'s `ggame.Sprite.circularCollisionModel` method \n        will configure the sprite to use a simple circular collision model \n        when checking for overlap with other sprites. In this model, the\n        "collideable" area of the sprite is regarded as a circle whose\n        diameter is equal to the mean of the width and height of the \n        asset image.\n        """\n        self._collisionStyle = type(self)._circCollision\n\n    @property\n    def index(self):\n        """This is an integer index in to the list of images available for this sprite."""\n        return self._index\n        \n    @index.setter\n    def index(self, value):\n        self._index = value\n        try:\n            self.GFX.texture = self.asset[self._index]\n        except:\n            self._index = 0\n            self.GFX.texture = self.asset[self._index]\n\n    @property\n    def width(self):\n        """\n        This is an integer representing the display width of the sprite.\n        Assigning a value to the width will scale the image horizontally.\n        """\n        return self.GFX.width\n        \n    @width.setter\n    def width(self, value):\n        self.GFX.width = value\n        self._setExtents()\n\n    @property\n    def height(self):\n        """\n        This is an integer representing the display height of the sprite.\n        Assigning a value to the height will scale the image vertically.\n        """\n        return self.GFX.height\n\n    @height.setter\n    def height(self, value):\n        self.GFX.height = value\n        self._setExtents()\n        \n    @property\n    def x(self):\n        """\n        This represents the x-coordinate of the sprite on the screen. Assigning\n        a value to this attribute will move the sprite horizontally.\n        """\n        return self.GFX.position.x\n        \n    @x.setter\n    def x(self, value):\n        self.GFX.position.x = value\n        self._setExtents()\n        \n    @property\n    def y(self):\n        """\n        This represents the y-coordinate of the sprite on the screen. Assigning\n        a value to this attribute will move the sprite vertically.\n        """\n        return self.GFX.position.y\n        \n    @y.setter\n    def y(self, value):\n        self.GFX.position.y = value\n        self._setExtents()\n\n    @property\n    def position(self):\n        """\n        This represents the (x,y) coordinates of the sprite on the screen. Assigning\n        a value to this attribute will move the sprite to the new coordinates.\n        """\n        return (self.GFX.position.x, self.GFX.position.y)\n        \n    @position.setter\n    def position(self, value):\n        self.GFX.position.x = value[0]\n        self.GFX.position.y = value[1]\n        self._setExtents()\n        \n    @property\n    def fxcenter(self):\n        """\n        This represents the horizontal position of the sprite "center", as a floating\n        point number between 0.0 and 1.0. A value of 0.0 means that the x-coordinate\n        of the sprite refers to its left hand edge. A value of 1.0 refers to its \n        right hand edge. Any value in between may be specified. Values may be assigned\n        to this attribute. \n        """\n        try:\n            return self.GFX.anchor.x\n            self._setExtents()\n        except:\n            return 0.0\n        \n    @fxcenter.setter\n    def fxcenter(self, value):\n        """\n        Float: 0-1\n        """\n        try:\n            self.GFX.anchor.x = value\n            self._setExtents()\n        except:\n            pass\n        \n    @property\n    def fycenter(self):\n        """\n        This represents the vertical position of the sprite "center", as a floating\n        point number between 0.0 and 1.0. A value of 0.0 means that the x-coordinate\n        of the sprite refers to its top edge. A value of 1.0 refers to its \n        bottom edge. Any value in between may be specified. Values may be assigned\n        to this attribute. \n        """\n        try:\n            return self.GFX.anchor.y\n        except:\n            return 0.0\n        \n    @fycenter.setter\n    def fycenter(self, value):\n        """\n        Float: 0-1\n        """\n        try:\n            self.GFX.anchor.y = value\n            self._setExtents()\n        except:\n            pass\n\n    @property\n    def center(self):\n        """\n        This attribute represents the horizontal and vertical position of the \n        sprite "center" as a tuple of floating point numbers. See the \n        descriptions for `ggame.Sprite.fxcenter` and `ggame.Sprite.fycenter` for \n        more details.\n        """\n        try:\n            return (self.GFX.anchor.x, self.GFX.anchor.y)\n        except:\n            return (0.0, 0.0)\n        \n    @center.setter\n    def center(self, value):\n        try:\n            self.GFX.anchor.x = value[0]\n            self.GFX.anchor.y = value[1]\n            self._setExtents()\n        except:\n            pass\n\n    @property\n    def visible(self):\n        """\n        This boolean attribute may be used to change the visibility of the sprite. Setting\n        `ggame.Sprite.visible` to `False` will prevent the sprite from rendering on the \n        screen.\n        """\n        return self.GFX.visible\n\n    @visible.setter\n    def visible(self, value):\n        self.GFX.visible = value\n\n    @property\n    def scale(self):\n        """\n        This attribute may be used to change the size of the sprite (\'scale\' it) on the \n        screen. Value may be a floating point number. A value of 1.0 means that the sprite\n        image will keep its original size. A value of 2.0 would double it, etc.\n        """\n        return self.GFX.scale.x\n        \n    @scale.setter\n    def scale(self, value):\n        self.GFX.scale.x = value\n        self.GFX.scale.y = value\n        self._setExtents()\n\n    @property\n    def rotation(self):\n        """\n        This attribute may be used to change the rotation of the sprite on the screen.\n        Value may be a floating point number. A value of 0.0 means no rotation. A value \n        of 1.0 means  a rotation of 1 radian in a counter-clockwise direction. One radian\n        is 180/pi or approximately 57.3 degrees.\n        """\n        return -self.GFX.rotation\n        \n    @rotation.setter\n    def rotation(self, value):\n        self.GFX.rotation = -value\n\n    def collidingWith(self, obj):\n        """\n        Return a boolean True if this sprite is currently overlapping the sprite \n        referenced by `obj`. Uses the collision model specified (rectangular, by \n        default). Collision/overlap decision is based purely on the overall, gross\n        dimensions of the image rectangle. There is no attempt to verify that \n        non-transparent pixels in one sprite are actually overlapping visible\n        pixels in another.\n        """\n        if self is obj:\n            return False\n        elif self._collisionStyle == obj._collisionStyle == type(self)._circCollision:\n            dist2 = (self.x - obj.x)**2 + (self.y - obj.y)**2\n            return dist2 < (self.radius + obj.radius)**2\n        else:\n            return (not (self.xmin > obj.xmax\n                or self.xmax < obj.xmin\n                or self.ymin > obj.ymax\n                or self.ymax < obj.ymin))\n\n    def collidingWithSprites(self, sclass = None):\n        """\n        Return a list of sprite objects identified by the `sclass` parameter\n        that are currently colliding with (that is, with which the `ggame.Sprite.collidingWith`\n        method returns True) this sprite. If `sclass` is set to `None` (default), then\n        all other sprites are checked for collision, otherwise, only sprites whose\n        class matches `sclass` are checked.\n        """\n        if sclass is None:\n            slist = App.spritelist\n        else:\n            slist = App.getSpritesbyClass(sclass)\n        return list(filter(self.collidingWith, slist))\n\n    def destroy(self):\n        """\n        Call the `ggame.Sprite.destroy` method to prevent the sprite from being displayed,\n        or checked in collision detection. If you only want to prevent a sprite from being\n        displayed, set the `ggame.Sprite.visible` attribute to `False`.\n        """\n        App._remove(self)\n        self.GFX.destroy()\n\n \n class Frame \n class Frame(object):\n    """\n    Frame is a utility class for expressing the idea of a rectangular region.\n    """\n    \n    def __init__(self, x, y, w, h):\n        """\n        Initialization for the `ggame.Frame` objects.\n\n        `x` and `y` are coordinates of the upper left hand corner of the frame.\n     \n        `w` and `h` are the width and height of the frame rectangle.\n        """\n\n        self.GFX = GFX_Rectangle(x,y,w,h)\n        """\n        `GFX` is a reference to the underlying object provided by the system.\n        """\n        self.x = x\n        """\n        X-coordinate of the upper left hand corner of this `ggame.Frame`.\n        """\n        self.y = y\n        """\n        Y-coordinate of the upper left hand corner of this `ggame.Frame`.\n        """\n        self.w = w\n        """\n        Width of the `ggame.Frame`.\n        """\n        self.h = h\n        """\n        Height of the `ggame.Frame`.\n        """\n\n    @property\n    def x(self):\n        return self.GFX.x\n\n    @x.setter\n    def x(self, value):\n        self.GFX.x = value\n        \n    @property\n    def y(self):\n        return self.GFX.y\n\n    @y.setter\n    def y(self, value):\n        self.GFX.y = value\n\n    @property\n    def w(self):\n        return self.GFX.width\n\n    @w.setter\n    def w(self, value):\n        self.GFX.width = value\n        \n    @property\n    def h(self):\n        return self.GFX.height\n        \n    @h.setter\n    def h(self, value):\n        self.GFX.height = value\n\n    @property\n    def center(self):\n        """\n        `center` property computes a coordinate pair (tuple) for the \n        center of the frame.\n\n        The `center` property, when set, redefines the `x` and `y` properties\n        of the frame in order to make the center agree with the coordinates\n        (tuple) assigned to it.\n        """\n\n        return (self.x + self.w//2, self.y + self.h//2)\n\n    @center.setter\n    def center(self, value):\n        c = self.center\n        self.x += value[0] - c[0]\n        self.y += value[1] - c[1] \n class _Asset \n class _Asset(object):\n    """\n    Base class for all game asset objects.\n    \n    The `ggame.Asset` class is set up to understand the concept\n    of multiple instances of an asset. This is currently only used for image-based\n    assets.\n    """\n\n    def __init__(self):\n        self.GFXlist = [None,]\n        """A list of the underlying system objects used to represent this asset."""\n\n    @property\n    def GFX(self):\n        """\n        `GFX` property represents the underlying system object used to represent\n        this asset. If this asset is composed of multiple assets, then the **first**\n        asset is referenced by `GFX`.\n        """\n        return self.GFXlist[0]\n        \n    @GFX.setter\n    def GFX(self, value):\n        self.GFXlist[0] = value\n        \n    def __len__(self):\n        return len(self.GFXlist)\n        \n    def __getitem__(self, key):\n        return self.GFXlist[key]\n        \n    def __setitem__(self, key, value):\n        self.GFXlist[key] = value\n        \n    def __iter__(self):\n        class Iter():\n            def __init__(self, image):\n                self.obj = image\n                self.n = len(image.GFXlist)\n                self.i = 0\n                \n            def __iter__(self):\n                return self\n                \n            def __next__(self):\n                if self.i ==self.n:\n                    raise StopIteration\n                self.i += 1\n                return self.obj.GFXlist[self.i]\n        return Iter(self)\n\n    def destroy(self):\n        if hasattr(self, \'GFX\'):\n            try:\n                for gfx in self.GFXlist:\n                    try:\n                        gfx.destroy(True)\n                    except:\n                        pass\n            except:\n                pass\n        \n         \n class ImageAsset \n class ImageAsset(_Asset):\n    """\n    The `ImageAsset` class connects ggame to a specific image **file**.\n    """\n\n    def __init__(self, url, frame=None, qty=1, direction=\'horizontal\', margin=0):\n        """\n        All `ggame.ImageAsset` instances must specify a file name or url with\n        the `url` parameter.\n\n        If the desired sprite image exists in only a smaller sub-section of the \n        original image, then the are can be specified by providing the\n        `frame` parameter, which must be a valid `ggame.Frame` object.\n\n        If image file actually is a *collection* of images, such as a so-called\n        *sprite sheet*, then the `ImageAsset` class supports defining a list\n        of images, provided they exist in the original image as a **row**\n        of evenly spaced images or a **column** of images. To specify this,\n        provide the `qty` (quantity) of images in the row or column, the\n        `direction` of the list (\'horizontal\' or \'vertical\' are supported),\n        and an optional `margin`, if there is a gap between successive \n        images. When used in this way, the `frame` parameter must define the\n        area of the **first** image in the collection; all subsequent images\n        in the list are assumed to be the same size.\n        """\n        super().__init__()\n        self.url = url\n        """\n        A string that represents the path or url of the original file.\n        """\n        del self.GFXlist[0]\n        self.append(url, frame, qty, direction, margin)\n\n    def _subframe(self, texture, frame):\n        return GFX_Texture(texture, frame.GFX)\n        \n    def append(self, url, frame=None, qty=1, direction=\'horizontal\', margin=0):\n        """\n        Append a texture asset from a new image file (or url). This method\n        allows you to build a collection of images into an asset (such as you\n        might need for an animated sprite), but without using a single \n        sprite sheet image.\n\n        The parameters for the `append` method are identical to those \n        supplied to the `ggame.ImageAsset` initialization method. \n\n        This method allows you to build up an asset that consists of \n        multiple rows or columns of images in a sprite sheet or sheets.\n        """\n        GFX = GFX_Texture_fromImage(url, False)\n        dx = 0\n        dy = 0\n        for i in range(qty):\n            if not frame is None:\n                if direction == \'horizontal\':\n                    dx = frame.w + margin\n                elif direction == \'vertical\':\n                    dy = frame.h + margin\n                f = Frame(frame.x + dx * i, frame.y + dy * i, frame.w, frame.h)\n                GFX = self._subframe(GFX, f)\n            self.GFXlist.append(GFX)\n\n \n various classes \n class Color(object):\n    """\n    The `ggame.Color` class is used to represent colors and/or colors with\n    transparency.\n    """\n\n    def __init__(self, color, alpha):\n        """\n        A `ggame.Color` instance must specify both a `color` as an integer\n        in the conventional format (usually as a hexadecimal literal, e.g.\n        0xffbb33 that represents the three color components, red, green \n        and blue), and a transparency value, or `alpha` as a floating\n        point number in the range of 0.0 to 1.0 where 0.0 represents \n        completely transparent and 1.0 represents completely solid.\n\n        Example: `red = Color(0xff0000, 1.0)`\n\n        """\n        self.color = color\n        self.alpha = alpha\n        \n\nclass LineStyle(object):\n    """\n    The `ggame.LineStyle` class is used to represent line style when\n    drawing geometrical objects such as rectangles, ellipses, etc.\n    """\n    \n    def __init__(self, width, color):\n        """\n        When creating a `ggame.LineStyle` instances you must specify \n        the `width` of the line in pixels and the `color` as a valid\n        `ggame.Color` instance.\n\n        Example: `line = LineStyle(3, Color(0x00ff00, 1.0))` will define\n        a 3 pixel wide green line.\n        """\n        self.width = width\n        self.color = color\n\nclass _GraphicsAsset(_Asset):\n    \n    def __init__(self):\n        super().__init__()\n        GFX_Graphics.clear()\n        \n\nclass _CurveAsset(_GraphicsAsset):\n\n    def __init__(self, line):\n        super().__init__()\n        GFX_Graphics.lineStyle(line.width, line.color.color, line.color.alpha)\n\nclass _ShapeAsset(_CurveAsset):\n\n    def __init__(self, line, fill):\n        super().__init__(line)\n        GFX_Graphics.beginFill(fill.color, fill.alpha)\n\n\nclass RectangleAsset(_ShapeAsset):\n    """\n    The `ggame.RectangleAsset` is a "virtual" asset that is created on the\n    fly without requiring creation of an image file.\n    """\n\n    def __init__(self, width, height, line, fill):\n        """\n        Creation of a `ggame.RectangleAsset` requires specification of the \n        rectangle `width` and `height` in pixels, the `line` (as a proper\n        `ggame.LineStyle` instance) and fill properties (as a `ggame.Color`\n        instance).\n        """\n        super().__init__(line, fill)\n        self.width = width\n        self.height = height\n        self.GFX = GFX_Graphics.drawRect(0, 0, self.width, self.height).clone()\n        """The `GFX` property represents the underlying system object."""\n        self.GFX.visible = False\n        \n\nclass CircleAsset(_ShapeAsset):\n    """\n    The `ggame.CircleAsset` is a "virtual" asset that is created on the\n    fly without requiring creation of an image file.\n    """    \n\n    def __init__(self, radius, line, fill):\n        """\n        Creation of a `ggame.CircleAsset` requires specification of the circle\n        `radius` in pixels, the `line` (as a proper `ggame.LineStyle` instance)\n        and fill properties (as a `ggame.Color` instance).\n        """\n        super().__init__(line, fill)\n        self.radius = radius\n        self.GFX = GFX_Graphics.drawCircle(0, 0, self.radius).clone()\n        """The `GFX` property represents the underlying system object."""\n        self.GFX.visible = False\n        \nclass EllipseAsset(_ShapeAsset):\n    """\n    The `ggame.EllipseAsset` is a "virtual" asset that is created on the \n    fly without requiring creation of an image file.\n    """\n\n    def __init__(self, halfw, halfh, line, fill):\n        """\n        Creation of a `ggame.EllipseAsset` requires specification of the ellipse\n        `halfw`, or semi-axis length in the horizontal direction (half of the\n        ellipse width) and the `halfh`, or semi-axis length in the vertical direction.\n        `line` (as `ggame.LineStyle` instance) and `fill` (as `ggame.Color` instance)\n        must also be provided.\n        """\n        super().__init__(line, fill)\n        self.halfw = halfw\n        self.halfh = halfh\n        self.GFX = GFX_Graphics.drawEllipse(0, 0, self.halfw, self.halfh).clone()\n        """The `GFX` property represents the underlying system object."""\n        self.GFX.visible = False\n        \nclass PolygonAsset(_ShapeAsset):\n    """\n    The `ggame.PolygonAsset` is a "virtual" asset that is created on the\n    fly without requiring creation of an image file.\n    """\n\n    def __init__(self, path, line, fill):\n        """\n        Creation of a `ggame.PolygonAsset` requires specification of a \n        `path` consisting of a list of coordinate tuples. `line` and \n        `fill` arguments (instances of `ggame.LineStyle` and `ggame.Color`,\n        respectively) must also be supplied. The final coordinate in the \n        list must be the same as the first.\n\n        Example: `poly = PolygonAsset([(0,0), (50,50), (50,100), (0,0)], linesty, fcolor)`\n        """\n        super().__init__(line, fill)\n        self.path = path\n        jpath = []\n        for point in self.path:\n            jpath.extend(point)\n        self.GFX = GFX_Graphics.drawPolygon(jpath).clone()\n        """The `GFX` property represents the underlying system object."""\n        self.GFX.visible = False\n\n\nclass LineAsset(_CurveAsset):\n    """\n    The `ggame.LineAsset` is a "virtual" asset that is created on the\n    fly without requiring creation of an image file. A `LineAsset` instance\n    represents a single line segment.\n    """\n\n    def __init__(self, x, y, line):\n        """\n        Creation of a `ggame.LineAsset` requires specification of an `x` and\n        `y` coordinate for the endpoint of the line. The starting point of the\n        line is implied as coordinates (0,0). Note that when this asset is \n        used in a `ggame.Sprite` class, the sprite\'s `x` and `y` coordinates\n        will control the location of the line segment on the screen.\n\n        As the `ggame.LineAsset` does not cover a region, only a `ggame.LineStyle` \n        argument must be supplied (`line`).\n        """\n        super().__init__(line)\n        self.deltaX = x\n        """This attribute represents the `x` parameter supplied during instantiation."""\n        self.deltaY = y\n        """This attribute represents the `y` parameter supplied during instantiation."""\n        GFX_Graphics.moveTo(0, 0)\n        self.GFX = GFX_Graphics.lineTo(self.deltaX, self.deltaY).clone()\n        """The `GFX` property represents the underlying system object."""\n        self.GFX.visible = False\n\nclass TextAsset(_GraphicsAsset):\n    """\n    The `ggame.TextAsset` is a "virtual" asset that is created on the fly\n    without requiring creation of an image file. A `TextAsset` instance\n    represents a block of text, together with its styling (font, color, etc.).\n    """\n \n    def __init__(self, text, **kwargs):\n        """\n        The `ggame.TextAsset` must be created with a string as the `text` parameter.\n        \n        The remaining optional arguments must be supplied as keyword parameters. These\n        parameters are described under the class attributes, below:\n        """\n        super().__init__()\n        self.text = text\n        self.style = kwargs.get(\'style\', \'20px Arial\')\n        """A string that specifies style, size and typeface (e.g. `\'italic 20pt Helvetica\'` or `\'20px Arial\'`)"""\n        self.width = kwargs.get(\'width\', 100)\n        """Width of the text block on the screen, in pixels."""\n        self.fill = kwargs.get(\'fill\', Color(0, 1))\n        """A valid `ggame.Color` instance that specifies the color and transparency of the text."""\n        self.align = kwargs.get(\'align\', \'left\')\n        """The alignment style of the text. One of: `\'left\'`, `\'center\'`, or `\'right\'`."""\n        self.GFX = GFX_Text(self.text, \n            {\'font\': self.style,\n                \'fill\' : self.fill.color,\n                \'align\' : self.align,\n                \'wordWrap\' : True,\n                \'wordWrapWidth\' : self.width,\n                })\n        """The `GFX` property represents the underlying system object."""\n        self.GFX.alpha = self.fill.alpha\n        self.GFX.visible = False\n        \n    def _clone(self):\n        return type(self)(self.text,\n            style = self.style,\n            width = self.width,\n            fill = self.fill,\n            align = self.align)\n\n \n class sound and mouse event \n class SoundAsset(object):\n    """\n    Class representing a single sound asset (sound file, such as .mp3 or .wav).\n    """    \n    def __init__(self, url):\n        """\n        Create a `ggame.SoundAsset` instance by passing in the URL or file name\n        of the desired sound. Sound file formats may include `.wav` or `.mp3`, subject\n        to browser compatibility. \n        """\n        self.url = url\n        """\n        A string containing the url or name of the asset file.\n        """\n\n        \nclass Sound(object):\n    """\n    The `ggame.Sound` class represents a sound, with methods for controlling\n    when and how the sound is played in the application.\n    """\n\n    def __init__(self, asset):\n        """\n        Pass a valid `ggame.SoundAsset` instance when creating a `ggame.Sound` object.\n        """\n        self.asset = asset\n        """\n        A reference to the `ggame.SoundAsset` instance.\n        """\n        self.SND = SND_Sound(self.asset.url)\n        """\n        A reference to the underlying sound object provided by the system.\n        """\n        self.SND.load()\n        \n    def play(self):\n        """\n        Play the sound once.\n        """\n        self.stop()\n        self.SND.play()\n\n    def loop(self):\n        """\n        Play the sound continuously, looping forever.\n        """\n        self.stop()\n        self.SND.loop()\n        self.SND.play()\n        \n    def stop(self):\n        """\n        Stop playing the sound.\n        """\n        self.SND.stop()\n        \n    @property\n    def volume(self):\n        """\n        The `ggame.Sound.volume` property is a number ranging from 0-100, that \n        represents the volume or intensity of the sound when it is playing.\n        """\n        return self.SND.getVolume()\n        \n    @volume.setter\n    def volume(self, value):\n        self.SND.setVolume(value)\n\n\nclass _Event(object):\n\n    def __init__(self, hwevent):\n        self.hwevent = hwevent\n        """The underlying system event object."""\n        self.type = hwevent.type\n        """String representing the type of received event."""\n        self.consumed = False\n        """\n        Set the `consumed` member of the event to prevent the event\n        from being received by any more handler methods.\n        """\n        \nclass MouseEvent(_Event):\n    """\n    The `ggame.MouseEvent` class encapsulates information regarding a user mouse\n    action that is being reported by the system.\n    """    \n\n    mousemove = "mousemove"\n    """Constant identifying a `mousemove` event."""\n    mousedown = "mousedown"\n    """Constant identifying a `mousedown` event."""\n    mouseup = "mouseup"\n    """Constant identifying a `mouseup` event."""\n    click = "click"\n    """Constant identifying a button `click` event."""\n    dblclick = "dblclick"\n    """Constant identifying a button `dblclick` event."""\n    mousewheel = "wheel"\n    """Constant identifying a mouse `wheel` scroll event."""\n    \n    def __init__(self, hwevent):\n        """\n        The event is initialized by the system, with a `hwevent` input parameter.\n        """\n        super().__init__(hwevent)\n        self.wheelDelta = 0\n        """Integer representing up/down motion of the scroll wheel."""\n        if self.type == self.mousewheel:\n            self.wheelDelta = hwevent.deltaY\n        else:\n            self.wheelDelta = 0\n        self.x = hwevent.clientX\n        """The window x-coordinate of the mouse pointer when the event occurred."""\n        self.y = hwevent.clientY\n        """The window y-coordinate of the mouse pointer when the event occurred."""\n\n\nclass KeyEvent(_Event):\n    """\n    The `ggame.KeyEvent` class encapsulates information regarding a user keyboard\n    action that is being reported by the system.\n    """    \n\n    no_location = 0\n    """Constant indicating no specific location for the key event."""\n    right_location = 2\n    """Constant indicating the key event was on the right hand side of the keyboard."""\n    left_location = 1\n    """Constant indicating the key event was on the left hand side of the keyboard."""\n    keydown = "keydown"\n    """Constant indicating the key was pressed down."""\n    keyup = "keyup"\n    """Constant indicating the key was released."""\n    keypress = "keypress"\n    """Constant indicating the combination of keydown, followed by keyup."""\n    keys = {8: \'backspace\',\n        9: \'tab\',\n        13: \'enter\',\n        16: \'shift\',\n        17: \'ctrl\',\n        18: \'alt\',\n        19: \'pause/break\',\n        20: \'caps lock\',\n        27: \'escape\',\n        32: \'space\',\n        33: \'page up\',\n        34: \'page down\',\n        35: \'end\',\n        36: \'home\',\n        37: \'left arrow\',\n        38: \'up arrow\',\n        39: \'right arrow\',\n        40: \'down arrow\',\n        45: \'insert\',\n        46: \'delete\',\n        48: \'0\',\n        49: \'1\',\n        50: \'2\',\n        51: \'3\',\n        52: \'4\',\n        53: \'5\',\n        54: \'6\',\n        55: \'7\',\n        56: \'8\',\n        57: \'9\',\n        65: \'a\',\n        66: \'b\',\n        67: \'c\',\n        68: \'d\',\n        69: \'e\',\n        70: \'f\',\n        71: \'g\',\n        72: \'h\',\n        73: \'i\',\n        74: \'j\',\n        75: \'k\',\n        76: \'l\',\n        77: \'m\',\n        78: \'n\',\n        79: \'o\',\n        80: \'p\',\n        81: \'q\',\n        82: \'r\',\n        83: \'s\',\n        84: \'t\',\n        85: \'u\',\n        86: \'v\',\n        87: \'w\',\n        88: \'x\',\n        89: \'y\',\n        90: \'z\',\n        91: \'left window key\',\n        92: \'right window key\',\n        93: \'select key\',\n        96: \'numpad 0\',\n        97: \'numpad 1\',\n        98: \'numpad 2\',\n        99: \'numpad 3\',\n        100: \'numpad 4\',\n        101: \'numpad 5\',\n        102: \'numpad 6\',\n        103: \'numpad 7\',\n        104: \'numpad 8\',\n        105: \'numpad 9\',\n        106: \'multiply\',\n        107: \'add\',\n        109: \'subtract\',\n        110: \'decimal point\',\n        111: \'divide\',\n        112: \'f1\',\n        113: \'f2\',\n        114: \'f3\',\n        115: \'f4\',\n        116: \'f5\',\n        117: \'f6\',\n        118: \'f7\',\n        119: \'f8\',\n        120: \'f9\',\n        121: \'f10\',\n        122: \'f11\',\n        123: \'f12\',\n        144: \'num lock\',\n        145: \'scroll lock\',\n        186: \'semicolon\',\n        187: \'equal sign\',\n        188: \'comma\',\n        189: \'dash\',\n        190: \'period\',\n        191: \'forward slash\',\n        192: \'grave accent\',\n        219: \'open bracket\',\n        220: \'back slash\',\n        221: \'close bracket\',\n        222: \'single quote\'}    \n    """Dictionary mapping key code integers to textual key description."""\n    \n    def __init__(self, hwevent):\n        """\n        The event is initialized by the system, with a `hwevent` input parameter.\n        """\n        super().__init__(hwevent)\n        self.keynum = hwevent.keyCode\n        """The `keynum` attribute identifies a keycode (number)."""\n        self.key = self.keys[hwevent.keyCode]\n        """The `key` attribute identifes the key in text form (e.g. \'back slash\')."""\n\n\n \n', 'tags': '', 'url': 'ggame.html'}, {'title': 'Deno', 'text': 'https://deno.land/ \n 單一執行檔案, 可以讓使用者直接採用 deno run your_typescript.ts 執行 Typescript 程式. \n Javascript Ecosystem: \n https://www.imaginarycloud.com/blog/a-javascript-ecosystem-overview/ \n User Interface: \n https://reactjs.org/ \n https://github.com/typescript-cheatsheets/react#reacttypescript-cheatsheets \n Web based 3D rendering: \n https://github.com/BabylonJS/Babylon.js \n https://www.babylonjs.com/community/ \n Deno JS and TS runtime: \n https://deno.com/blog/the-deno-company   \n Deno 1.11.5:  https://github.com/denoland/deno/releases/  直接下載 Windows 版本解開壓縮後 55MB, 放入可攜系統 data 目錄中即可執行. \n https://deno.land/x/ \n https://deno.com/deploy \n https://github.com/lucacasonato/deploy_chat \n Deno  supports   WebGPU \n https://www.freecodecamp.org/news/the-deno-handbook/ \n https://deno.land/manual@v1.11.5/typescript \n https://deno.land/manual@v1.11.5/typescript/overview \n https://deno.land/  (Javascript and Typescript runtime written in Rust) \n Essential Typescript  (從校園網路下載電子書) \n Pro Typescript \xa0(從校園網路下載電子書) \n Introducing Deno  (從校園網路下載電子書) \n https://itnext.io/typescript-machine-learning-simplicity-kalimdor-js-bb1ccadf0ad3 \n References: \n 在 Deno 執行 Python 程式. \n Javascript Next  (從校園網路下載電子書) \n E6S for Humans  (從校園網路下載電子書) \n JavaScript Data Structures and Algorithms  (從校園網路下載電子書) \n Beginning Functional Javascript \xa0(從校園網路下載電子書) \n jQuery \n https://jquery.com/ \n jQuery-UI \n https://jqueryui.com/ \n buzz \n https://buzz.jaysalvat.com/', 'tags': '', 'url': 'Deno.html'}, {'title': 'pixijs', 'text': 'PixiJS — The HTML5 Creation Engine \n Create Great Interactive Graphics or Games and the Web \n Learn Pixi.js  (從校園網路中下載電子書) \n Pixi.js  4.X.X  與  5.X.X  之間的差異. \n https://github.com/pixijs/pixijs \n 如何使用 pixi.js \n 以下利用 Bython 與  https://github.com/mdecourse/nfulist  on Heroku 結合, 列出 1092 學期各課程修課人員學號,\xa0 程式執行流程先從一個 全球資訊網伺服器  (位於 Github, 伺服器 1) 將此網頁送到使用者的 瀏覽器  (客戶端電腦) 中, 並且執行 Brython javascript 程式, 將頁面中的 Python 程式轉為 Javascript 後, 因為其中導入 Open() 函式採用 ajax 模式至使用者指定的 URL 中擷取資料, 而此一位於  Heroku 雲端  (位於 Heroku, 伺服器 2) 的 Python Flask 程式也是採用 ajax 方式對 學校教務處  (位於虎尾, 伺服器 3) 伺服主機發出 post 表單資料, 並從教務主機中取出特定學期, 特定課號的修課人員名單, 然後所截取出來的資料, 再由 Brython 程式發布到特定網頁中的位置. 因此以下學員資料的擷取包括客戶端電腦, 程式執行總共牽涉到其他位於不同地理位置的 3 台主機. \n 這個網際程式的執行, 代表的是利用計算機程式, 電腦軟硬體與網路技術, 各位於不同地理位置的電腦只要各自扮演好自己的角色, 能夠獨立完成一項任務中的協同任務, 使用者只要了解各種協定的特性, 就可以完成原先需要四處實地奔走才能完成的任務.  少負擔, 多建樹應該就是應用計算機程式與電腦輔助設計的本質  (Less burden, more achievements should be the essence of application of the computer programs and computer-aided design.). \n <script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/5.1.3/pixi.min.js"></script>\n<script src="./../cmsimde/static/brython.js"></script>\n<script src="./../cmsimde/static/brython_stdlib.js"></script>\n<script>// <![CDATA[\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\']});\n}\n// ]]></script>\n<div id="brython_text1"></div>\n<script type="text/python">// <![CDATA[\nfrom browser import document as doc\nfrom browser import html\n\n\'\'\'\n2021 spring (1092):\n0741 1a\n0764 2a\n0776 2b\n2384 5j\n\'\'\'\n# setup up basic data\nsemester_code = "1092"\nclass_code = ["0741", "0764", "0776", "2384"]\n# add a vacant string\nstud_list = ""\n\n# go through class_code one by one\nfor i in class_code:\n    url = "https://nfulist.herokuapp.com/?semester="+semester_code+"&courseno="+i+"&column=False"\n    title = html.H4("Semester:"+semester_code+" - "+i+" course student list:")\n    stud_list += title + open(url).read()\n\ndoc["brython_text1"] <= stud_list\n// ]]></script> \n \n \n \n \n \n', 'tags': '', 'url': 'pixijs.html'}, {'title': 'pixijs1', 'text': '2018 參考資料 \n ggame is for  pixi 4.8.2 \n Brython and pixi.js integrated html5 result: \n <script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/4.8.2/pixi.min.js"></script>\n<script src="./../cmsimde/static/brython.js"></script>\n<script src="./../cmsimde/static/brython_stdlib.js"></script>\n<script>// <![CDATA[\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\']});\n}\n// ]]></script>\n<div id="brython_div"></div>\n<div id="line_drawing"></div>\n<script type="text/python">// <![CDATA[\n# from browser import window, document and html\nfrom browser import window, document, html\n# this is for animation, which is different from what javascipt implemented\nimport browser.timer\n# use socket.gethostname() to differentiate where script is executed\nimport socket\n\n# if executed under localhost\nif socket.gethostname() == "localhost":\n    site = ""\nelse:\n    # when executed in remote site\n    site="./.."\n\n# let brython_div to be the div with id=brython_div\nbrython_div = document["brython_div"]\n# use window to get PIXI object and let it be GFX\nGFX = window.PIXI\n# create new PIXI application\nApp = GFX.Application.new\n# set application size and background\napp = App(400, 300, { \'transparent\': True })\n# add application view into div markup\nbrython_div.appendChild(app.view)\n# create Sprite from image file\nbunny = GFX.Sprite.fromImage(site+\'/images/bunny.png\')\n# center the sprite\'s anchor point, this is the center for the rotation of the graphics\nbunny.anchor.set(0.5)\n# move the sprite to the center of the screen\nbunny.x = app.screen.width / 2\nbunny.y = app.screen.height / 2\n# add Sprite into the application stage\napp.stage.addChild(bunny)\n\ndef bunnyRotate():\n    bunny.rotation += 0.1\n\nbrowser.timer.set_interval(bunnyRotate, 30)\n// ]]></script> \n \n \n \n \n \n \n', 'tags': '', 'url': 'pixijs1.html'}, {'title': 'Brython-server', 'text': 'https://github.com/mdecourse/brython-server   \n Heroku: \n https://heroku.com \n', 'tags': '', 'url': 'Brython-server.html'}, {'title': '虛擬主機', 'text': '這裡的虛擬主機系統指利用  https://www.virtualbox.org/  所建立的 Windows 或 Ubuntu 操作系統檔案, 可以在不同實體操作系統中, 進行轉移運作. \n 透過虛擬主機與實體主機間的網路設定, 可以讓使用者進行網際程式開發. \n Virtualbox 網路設定: \n Nat - 虛擬主機可以藉由實體主機的網路架構上網, 但必須透過 Port Mapping 才能以實體主機的網路位址設為聯外 server. \n Host-only Adaptor - 虛擬主機的網路設定自外於任何聯外網路, 因此無法直接上網, 但各 Host 間同群電腦可以互通. \n Bridged Adaptor - 虛擬主機的網路設定與實體主機的網路位階相同, 若實體主機位於外部網段, 則虛擬主機可設為聯外 server. \n Github Actions: \n https://github.com/features/actions \n 應用範例: \n https://github.com/mdecourse/report/blob/main/.github/workflows/demo.yaml \n https://github.com/mdecourse/4072pj1', 'tags': '', 'url': '虛擬主機.html'}, {'title': '可攜系統', 'text': '建立可攜系統在解決 ____ 問題? \n portablekmol_base.7z  (下載 118MB, 解開壓縮後 148MB) \n 包括 data 目錄與 start_ipv6.bat, start_ipv4.bat, stop.bat \n 功能: 啟動後可以啟動 SciTE 編輯器, 可用於類解譯 ANSI C 程式, 以及  Solvespace . \n Python395.7z  (下載 123MB, 解開壓縮後 495MB) \n 功能: 與  portablekmol_base.7z  結合後, 可以利用 SciTE 編輯器執行 Python 程式. \n 請注意: 由於 CMSiMDE 改用  adhoc ssl_context  啟動近端伺服器, 因此 Python 解譯系統必須加裝 pyopenssl 模組: pip install pyopenssl,\xa0 且安裝前要先將系統 proxy 暫時關閉. \n portablegit_2.31.1.7z  (下載 60MB, 解開壓縮後 286MB) \n 功能: 與  portablekmol_base.7z  結合後, 可以利用可攜程式系統的命令列視窗執行 git 指令. \n lua-5.4.3.7z  (下載 662KB, 解開壓縮後 4MB) \n 功能: 與  portablekmol_base.7z  結合後, 可以利用 SciTE 編輯器執行 Lua 程式. \n PUTTY.7z  (下載 940KB, 解開壓縮後 4MB) \n 功能: plink.exe 可以與 git 結合, 利用 Putty.exe 中所設定的 session 名稱進行 SSH 連線. \n msys64_20210419.7z  (下載 3.5GB, 解開壓縮後 12GB) \n 功能:  Msys2  安裝 \n pacman -S mingw-w64-x86_64-toolchain\npacman -Sy mingw-w64-x86_64-qt5\npacman -Sy mingw-w64-x86_64-qt5-static\npacman -Sy mingw-w64-x86_64-ffmpeg\npacman -Sy mingw-w64-x86-64-cmake \n msys64_20210419_clean.7z  (下載 87MB , 解開壓縮後 374MB) \n 功能: 尚未安裝任何 Package 的  Msys2  系統. \n node-v14.17.2-x64.7z  (下載 17MB, 解開壓縮後 78MB) \n rust_1.53.0_portable_for_msys2.7z  (下載 147MB , 解開壓縮後 1.13GB) \n Erlang 10.7 and Elixir portable.7z  for Windows (下載 62MB , 解開壓縮後 340MB) \n Deno 1.11.5:  https://github.com/denoland/deno/releases/  直接下載 Windows 版本解開壓縮後 55MB, 放入可攜系統 data 目錄中即可執行. \n CoppeliaSimEdu_4.1.0_rev1.7z  (下載 183MB, 解開壓縮後 438MB) \n 功能: 可免費提供大學機電資整合課程使用, 且開放原始碼, 可用於機電資控制系統設計與模擬 (InfoMechaTronic control system design and simulation). \n robodk_522.7z  (下載 364MB, 解開壓縮後 1GB) \n 功能: 提供限縮功能版本 Free Trial, 只可模擬但無法存檔, 可用於工業級機械手臂在線與離線控制系統設計與模擬. \n Range3.7z  (下載 27MB, 解開壓縮後 109MB) \n 功能: 開放源 FEM (Finite Element Method) 分析套件. \n webots-R2021a.7z  (下載 1.5GB, 解開壓所後 2.9GB) \n 功能: 採 Apache 2.0 使用授權的開放源套件, 可用於機電資控制系統設計與模擬.', 'tags': '', 'url': '可攜系統.html'}, {'title': 'Lua 解譯', 'text': '學習 Lua 要做什麼? 能夠解決 ____\xa0 問題? \n 網際 Lua 解譯:  http://mde.tw/lab/downloads/lua/index.html \n SciTE 編輯器中的 Lua.properties 設定: \n 選擇利用 y:\\lua-5.4.3\\luac 與 lua 編譯或解譯 .lua 程式檔案. \n command.compile.*.lua=y:\\lua-5.4.3\\luac -o "$(FileName).luc" "$(FileNameExt)"\n# Lua 5.1\ncommand.go.*.lua=y:\\lua-5.4.3\\lua "$(FileNameExt)" \n', 'tags': '', 'url': 'Lua 解譯.html'}, {'title': 'CMSiMDE', 'text': 'CMSiMDE ( https://github.com/mdecourse/cmsimde ) 是一套以 Python 與 Flask 框架編寫的網際內容管理系統, \n 使用 CMSiMDE 建議使用者安裝 flask flask_cors bs4 lxml pelican markdown leo 等模組. 其中的 flask flask_cors bs4 lxml pelican markdown為啟動 CMSiMDE 的必要模組, 而 leo 則是 CMSMDE 開發者所使用的大綱管理工具, 可以用於與 CMSiMDE 整合的 Pelican blog 及 Reveal.js 網際簡報編輯之用. \n', 'tags': '', 'url': 'CMSiMDE.html'}, {'title': '建立網頁', 'text': '由於 CMSiMDE 帶有動態網頁與靜態網頁等兩個部分, 動態網頁執行時需要該伺服器能夠執行 Python 3, 以及 flask flask_cors bs4 lxml pelican markdown 等模組. 而靜態網頁的伺服則只需要 WWW Server 即可. \n 若使用者在 Github 使用 CMSiMDE 建立網頁, 可以透過  https://github.com/mdecourse/cmstemplate  template 建立, 步驟與兩種設定方式如下: \n \n 使用者登入 Github \n 將瀏覽器連線至  https://github.com/mdecourse/cmstemplate  頁面後, 點擊 Use this template 按鈕後, 選擇所要採用的 repository 名稱後, 就可以建立以 CMSiMDE 作為子模組的 Github 倉儲. \n 假如使用者所選擇的倉儲名稱為: 帳號.github.io, 則 Github 會自動設定該倉儲的 main 分支為 Github Pages 根目錄, 意即一旦 Github Pages 完成轉檔 (提交訊息之後會出現綠勾), 則該倉儲的對應網頁將為: https://帳號.github.io \n 若使用利用  https://github.com/mdecourse/cmstemplate  作為 template 所建立的倉儲名稱並非 帳號.github.io, 則使用者必須自行至該倉儲的 settings/Github Pages 選項中將 main branch 設為 Github Pages 對應的 root 目錄. 之後, Github 將會採用: 帳號.github.io/倉儲名稱 作為與該倉儲對應的 Github Pages 網址. \n \n', 'tags': '', 'url': '建立網頁.html'}, {'title': '基本操作', 'text': '當使用者利用 cms.bat 啟用動態網站後, 即可利用瀏覽器  https://localhost:9443  在近端維護網站內容, 由於此時動態網站僅在 localhost 啟動, 因此可以使用內建的管理者密碼 "admin" 登入管理網站內容. \n 在 Windows 操作系統, cms.bat 內容為: \n python cmsimde/wsgi.py \n 若是在 Mac 或 Linux 操作系統, 則 cms 為可執行檔, 且內容為: \n #! /bin/bash\npython3 cmsimde/wsgi.py \n 至於 acp.bat 在 Windows 操作系統的內容為: \n echo off\nset message=%1\ngit add .\ngit commit -m %message%\ngit push \n 但是在 Mac 與 Linux 操作系統, 則 acp 為可執行檔, 而內容則為: \n #! /bin/bash\ngit add .\ngit commit -m "$1"\ngit push \n 在 Windows 執行 batch 檔案, 可以直接在命令列視窗執行 cms 或 acp "提交訊息", 但是在 Mac 與 Linux 執行 Bash 檔案, 必須使用 ./cms 或 ./acp "提交訊息". \n 假如使用者修改 init.py 中的 ip 或 uwsgi 設定, 讓動態網站在外部 IP 啟動, 則必須自行透過動態網站中的  config  指令修改管理者密碼. \n 動態網站編輯表單中的  config  除了可更改網站管理者密碼外, 也可以更改網站的頁面內容標題 (外部標題可以透過 init.py 中的 site_title 更改). \n', 'tags': '', 'url': '基本操作.html'}, {'title': '客製化', 'text': '假如利用  https://github.com/mdecourse/cmstemplate  作為 template 所建立的 Github Pages 網站, 倉儲根目錄中的 cms.bat 可以在執行動態網站系統之後, 利用 pipe 讓 cms.bat 同時開啟 Firefox  https://localhost:9443 \n 修改後的 cms.bat 如下: \n python cmsimde/wsgi.py 1> nul | "C:\\Program Files (x86)\\Mozilla Firefox\\firefox" https://localhost:9443 \n 前面 python cmsimde/wsgi.py 加上 1> nul 的目的是因為 pipe 執行時會將前面指令執行結果轉為隨後執行指令的輸入, 而 1> nul 則會將標準輸出的任何資料移除, 任何輸出不會影響 Firefox 執行. \n', 'tags': '', 'url': '客製化.html'}, {'title': '編輯網頁內容', 'text': '編輯 CMSiMDE 動態網站中的內容, 可以透過表單中的  Edit All  或  Edit  按鈕進行.  Edit  可用於單頁編輯, 操作時先選擇左側的頁面標題, 等系統顯示該頁面內容後, 再點擊上方的  Edit  按鈕即可進入該頁面的編輯模式. \n Edit All  通常用於單次刪除所有頁面內容或者只保留特定頁面用, 點擊後會將所有頁面內容置於編輯器中. \n', 'tags': '', 'url': '編輯網頁內容.html'}, {'title': '上傳與引用檔案', 'text': 'File Upload  可以讓使用者選擇近端多個檔案上傳至動態系統中的 downloads 目錄. \n 引用使用者上傳的檔案 \n python_book_01.pdf \n', 'tags': '', 'url': '上傳與引用檔案.html'}, {'title': '上傳與引用圖片', 'text': 'Image Upload  可以讓使用者選擇近端多個檔案上傳至動態系統中的 downloads 目錄. \n 引用使用者上傳的檔案 \n \n \n', 'tags': '', 'url': '上傳與引用圖片.html'}, {'title': '嵌入程式碼', 'text': '利用 Insert/Edit code 功能, 可以嵌入各種程式碼: \n // 下列 Dart 程式, 利用 Runge Kutta 迭代運算法, 解常微分方程式\n// 設 t 為時間, x 則設為物體的位移\n// dx / dt = (t - x)/2, 起始值 t0=0, x0=1, 求 t=2 時的 x 值\n//\n// 已知起始值 t0 與 x0 後, 可以利用下列 rungeKutta 函式, 以\n// h 為每步階增量值, 求 dxdt 常微分方程式任一 t 的對應值 x\n// 定義函式 rungeKutta, 共有四個輸入變數\nrungeKutta(t0, x0, t, h) {\n  // 利用步階增量值 h 與 t 的起始及終點值\n  // 計算需要迭代的次數 n\n  int n = ((t - t0) / h).toInt();\n  // 宣告 x 為雙浮點數, 且設為起始值 x0\n  double x = x0;\n  // 利用已知的 t0, x0, t 終點值與步階增量值 h, 迭代求 x 對應值\n  // 索引值 i 將每次增量 1, 從 i=1 執行 for 環圈至 i=n\n  for (int i = 1; i <= n; i++) {\n    // 將此階段的 t 與 x 值代入 dxdt 函式求下列四個浮點變數值\n    double k1 = h * dxdt(t0, x);\n    double k2 = h * dxdt(t0 + 0.5 * h, x + 0.5 * k1);\n    double k3 = h * dxdt(t0 + 0.5 * h, x + 0.5 * k2);\n    double k4 = h * dxdt(t0 + h, x + k3);\n    // 利用上述四個變數值求此步階增量後的對應 x 值\n    x = x + (1.0 / 6.0) * (k1 + 2 * k2 + 2 * k3 + k4);\n    // 每次 for 迴圈執行最後, 準備計算下一個步階增量後的 x 對應值\n    // t 起始值配合步階增量值 h, 進行增量\n    t0 = t0 + h;\n  }\n  // 完成 for 迴圈迭代後, 傳回與 t 終點值對應的 x 值\n  return x;\n}\n\n// 將微分方程式 "dx / dt = (t - x)/2" 定義為 dxdt 函式\ndxdt(t, x) {\n  return ((t - x) / 2);\n}\n\n// 定義 main() 主函式內容, 目的在利用 rungeKutta 函式\n// 解常微分方程式\nmain() {\n// Driver method\n// num 資料型別可以是整數或雙浮點數\n  num t0 = 0;\n  num x = 1;\n  num t = 2;\n  double h = 0.2;\n  print(\'The value of x at t=$t is: ${rungeKutta(t0, x, t, h)}\');\n}\n \n \n', 'tags': '', 'url': '嵌入程式碼.html'}, {'title': '嵌入影片檔', 'text': '直接利用 Source code 功能, 將影片檔案的 iframe 標註放入後存檔: \n \n', 'tags': '', 'url': '嵌入影片檔.html'}, {'title': '檢視 STL', 'text': '使用 Github 所提供的 STL viewer 嵌入 github.com/mdecourse/cmstemplate main branch 中 downloads 目錄中的 spikeball.stl \n <script src="https://embed.github.com/view/3d/mdecourse/cmstemplate/main/downloads/spikeball.stl"></script> \n 將上列 script 標註放入頁面 HTML 內容後, 可以檢視 STL 零件檔案. \n \n \n \n \n 以 CMSiMDE 內建的 static/viewstl.html 檢視 STL 檔案: \n 使用 iframe 其 src 指向 STL 檔案的絕對 URL 路徑: \n /static/viewstl.html?src=https://mde.tw/cmstemplate/downloads/spikeball.stl \n 就可以如下檢視 downloads/spikeball.stl \n \n', 'tags': '', 'url': '檢視 STL.html'}, {'title': 'Gitlab 同步', 'text': '利用 git remote add gitlab  https://gitlab.com/user/repository.git  可以在近端倉儲中的 .git/config 中新增一個名稱為 gitlab, 且與  https://gitlab.com/user/repository.git  倉儲對應的設定. 使用者可以將此倉儲改版內容以 git push gitlab 推向 Gitlab. \n 至於 Gitlab Pages 額外需要下列 .yml 檔案進行轉換設定: \n .gitlab-ci.yml \n pages:\n  stage: deploy\n  script:\n  - mkdir .public\n  - cp -r * .public\n  - mv .public public\n  artifacts:\n    paths:\n    - public\n  only:\n  - master\nvariables:\n  GIT_SUBMODULE_STRATEGY: recursive \n \n', 'tags': '', 'url': 'Gitlab 同步.html'}, {'title': 'Heroku 部署', 'text': '與 Heroku 部署有關資訊請參考:  https://mde.tw/cp2020/content/Heroku.html \n', 'tags': '', 'url': 'Heroku 部署.html'}, {'title': 'Fossil SCM', 'text': '在 Github 之外, 可以同步將各倉儲資料存放至 Gitlab, Heroku (有 500 MB 容量限制) 與 Fossil SCM. \n 希望整合 Github 與 Fossil SCM 倉儲步驟說明如下: \n 針對 Github 中已經有  https://github.com/mdecourse/cmstemplate  倉儲, 希望同步建  https://fossil.kmol.info/cmstemplate  與之內容同步. \n 登入 fossil.kmol.info 主機, 在 /home/user/repository 目錄中, 以 fossil init cmstemplate.fossil 建立空倉儲. 此時 Fossil SCM 將會列出以登入帳號作為帳號的管理者密碼. \n 管理者利用  https://fossil.kmol.info/cmstemplate  連結, 以 user 登入, 並利用上列管理者密碼進入管理區, 先行透過 Setup/users 變更 user 對應密碼. \n 回到 Windows 以  fossil clone https://user@fossil.kmol.info/cmstemplate cmstemplate.fossil  取下倉儲資料, 過程中將需要輸入與 user 對應的密碼, 並被詢問是否儲存密碼, 若選擇儲存密碼則隨後的 fossil commit 將回自動提交推送. \n 接著在近端必須開啟空 cmstemplate.fossil 倉儲, 主要目的是取得 __FOSSIL__, 並且以 git pull 完整拉下位於  https://github.com/mdecourse/cmstemplate  中的資料並與空 __FOSSIL__ 進行整合. 其中在 Fossil SCM 端必須將 Setup/Settings 中的 default-csp 設為:  https://fonts.googleapis.com  (讓 CMSiMDE 靜態網頁可以在 Fossil SCM doc 頁面中正常顯示), 且勾選 dotfiles (讓 Fossil SCM 可以儲存 .git 中的版本資料). \n \n 參考資料: \n 編譯 Fossil SCM: \n \xa0 http://project.mde.tw/blog/zai-msys2-huan-jing-bian-yi-fossil-scm.html \n', 'tags': '', 'url': 'Fossil SCM.html'}, {'title': '注意事項', 'text': '因為  https://github.com/mdecourse/cmstemplate  將 CMSiMDE 倉儲作為 submodule, 因此使用者利用 cmstemplate 作為 template 後, 必須使用 git clone --recurse-submodules 取下遠端倉儲. \n 例如: \n 若使用者的倉儲 URL 為  https://github.com/mdecourse/cmstemplate \n 則可以在近端利用: \n git clone --recurse-submodules  https://github.com/mdecourse/cmstemplate.git \n 將遠端倉儲資料存入 cmstemplate 目錄中. \n 目前的 cmstemplate 內建 cms.bat 與 acp.bat 等兩個 batch 檔案, 可以協助使用者直接在倉儲根目錄啟動 CMSiMDE 動態網頁, 以及單一指令式即可完成 git add, git commit 以及 git push, 但是前提是使用者必須設定以 ssh 方式與 Github 倉儲進行驗證. \n 例如: \n 若使用者已經將倉儲內容 clone 至近端, 且已經帶有 cmsimde 子模組的內容. \n 則可以在近端命令列進入 cmstemplate 倉儲目錄執行: \n cms.bat \n 開啟動態網頁系統. 並以  https://localhost:9443  開啟. \n 一旦完成動態網頁的編輯, 利用 Generate Pages 可以轉為靜態網站, 且各 html 檔案將位於 content 目錄中. \n 若使用者希望檢查近端靜態網頁的內容, 可以利用 SciTE 開啟倉儲中的 http-server.py, 並利用瀏覽器以  https://localhost:8444  檢查靜態網頁內容. \n 一旦使用者要將近端倉儲的動態與靜態網頁內容推向 Github, 則必須將倉儲中 .git/config 的 url, 從 https 改為 ssh 的連線格式: \n 例如: \n 原先 .git/config origin 的 url 為 url =  https://github.com/mdecourse/cmstemplate.git,  則必須改為: \n url =  git@github.com:mdecourse/cmstemplate.git \n 之後假如使用者要以 "add some files" 字串當作提交說明訊息, 則可以在命令列中的倉儲目錄執行: \n acp.bat "add some files" \n', 'tags': '', 'url': '注意事項.html'}, {'title': '標題選擇', 'text': '由於 CMSiMDE 中的動態網站透過 config/content.htm 的 H1~H3 超文件標註進行分頁, 因此使用者利用 cms.bat 開啟動態網站後, 必須注意各頁面標題文字的選擇: \n \n 頁面標題文字儘量簡短  - 頁面標題就有如文章的章節標題, 只要該標題具有該頁面內容的代表性即可, 越簡短越好. \n 頁面標題文字不要使用標點符號  - 因為標點符號中的 "/" 會造成頁面擷取時 URL 指令分段上的誤判, 至於標題文字中若有 ":" 則會在動態內容轉靜態內容時, 因 Windows 不允許檔案名稱帶有 ":" 而無法轉檔. \n 頁面標題中不可以有超文件標註  - 由於 CMSiMDE 動態網站編輯器採用 GUI 進行, 採用滑鼠標修頁面標題時, 可能無意中將 HTML 標註放入 H1~H3 標題文字中, 如此可能會造成 CMSiMDE 分頁錯誤而無法開啟動態網站. 當使用者要檢查所使用的頁面標題是否帶有 html 標註, 可以透過編輯功能中的 Source Code 檢查. \n H1 標題數量不可過多  - 由於 CMSiMDE 的靜態網站支援手機模式, 當頁面 H1 標題數量超過 10 個之後, 頁面標題可能無法在螢幕上最上方以一列顯示, 而是必須出現在第二行, 結果將會導致頁面展開時的 Javascript 程式產生錯亂, 結果為無法直接以滑鼠點擊進入特定頁面. \n \n \n \n', 'tags': '', 'url': '標題選擇.html'}, {'title': '靜態網頁 404', 'text': '當使用者將近端網頁倉儲資料推向 Github 後, commit 提交訊息之後若沒有出現綠勾, 表示靜態網頁無法轉檔成功, 這時連接靜態網頁時, 將會出現 404, 通常情況下是因為倉儲中 cmsimde 子模組的版次無法與遠端  https://github.com/mdecourse/cmsimde  中的版本對應. \n 上述靜態網頁出現 404 錯誤訊息的處理方式如下: \n \n 從  https://github.com/mdecourse/cmsimde  倉儲中複製最新版本的版次號, 以  2021/03/03 的版次 為例, 版次號為 1c3aeec1f5d26b421743d2f5ef8bb7d5b99292af, 使用者只需要最前面的 7 個字元, 也就是 1c3aeec. \n 然後在近端倉儲中, 以命令列進入 cmsimde 目錄後執行:  git checkout 1c3aeec \n 接著退回倉儲目錄, 以 git add, git commit 及 git push 將倉儲改版內容推向 Github 後應該就可以將倉儲正確轉為靜態網站內容. \n \n', 'tags': '', 'url': '靜態網頁 404.html'}, {'title': '動態網站錯誤', 'text': 'CMSiMDE 動態網站經常出現的錯誤是無法對 config/content.htm 分頁, 這時可以利用 SCiTE 編輯 content.htm, 找尋是否 H1~H3 標註中是否帶有特殊符號, 如 "/" 或 ":" 等. \n', 'tags': '', 'url': '動態網站錯誤.html'}, {'title': '延伸開發', 'text': '為了建立 responsive site: \n 靜態網頁: \n Javascript 程式庫: \n https://getbootstrap.com/ \n 動態系統: \n Javascript editor \n TinyMCE:  https://www.tiny.cloud/ \n Syntax highlighter:  https://prismjs.com/ \n Ajax bit by bit file uploader: \n Flask \n Flask_cors \n bs4 \n lxml \n markdown \n', 'tags': '', 'url': '延伸開發.html'}, {'title': '已知問題', 'text': 'cmsimde 是一套始終修改中的機械設計工程導向網際內容管理系統, 由於自 2013 年底開發至今, Python 已經從 3.6 進展到 3.9, 網際發展方向也從 html editor 趨向 markdown editor, WebGL 相關技術與 three.js 的整合也越發成熟. \n 因此面對 \n https://github.com/mdecourse/virtualkossel \n http://mde.tw/virtualkossel/ \n cmsimde 應該要導入更多動態零組件展示與互動相關的機械設計功能. \n 可以著力的方向: \n Fusion 360  \n https://github.com/AutodeskFusion360 \n https://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html \n https://vpython.org/ \n https://www.glowscript.org/ \n https://github.com/slembcke/Chipmunk2D \n http://www.pymunk.org/en/latest/ \n https://github.com/mrjleo/python-physics-demos \n cango3d library:  https://www.arc.id.au/Canvas3DGraphics.html \n', 'tags': '', 'url': '已知問題.html'}, {'title': 'IPv6', 'text': '參考:  https://github.com/tinymce/tinymce/issues/4409  中的  url parsing 修改 後, 目前已經可以在 local 與 IPv6 網路連線中啟用 tinymce4 editor. \n', 'tags': '', 'url': 'IPv6.html'}, {'title': 'MathJax', 'text': 'MathJax 引用問題: \n https://www.mathjax.org/ \n', 'tags': '', 'url': 'MathJax.html'}, {'title': 'html 分頁', 'text': '分頁失敗時會意外抹除 config\\content.htm 中的所有內容 \n 分頁失敗並不會提供 debug 建議 \n', 'tags': '', 'url': 'html 分頁.html'}, {'title': 'template', 'text': 'cmsimde 針對利用 Flask 產生頁面並未使用 Template, 為了讓程式更加模組化可以考慮納入  Mako  template engine. \n', 'tags': '', 'url': 'template.html'}]};