<h1>About</h1>
<p>網站倉儲:<a href="https://github.com/BrianTsai071/cp2021">https://github.com/BrianTsai071/cp2021</a></p>
<p>個人網站:<a href="https://briantsai071.github.io/cp2021/">https://briantsai071.github.io/cp2021/</a></p>
<p></p><h1>HW1</h1>
<p><strong class="css-truncate-target mr-1" itemprop="name">將左右碰撞移動的紅色方塊, 改為先移動到水平畫面中心點位置後, 接著上下碰撞移動</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import browser.timer

canvas = html.CANVAS(width = 300, height = 300)
canvas.id = "game-board"
brython_div = doc["brython_div"]
brython_div &lt;= canvas
ctx = canvas.getContext("2d")

px = 0
py = 150
width = 20
height = 20
speed = 2
def game():
    global px, py, width, height, speed
    ctx.clearRect(px, py, width, height)
    ctx.fillStyle = "red"
    if px &lt; (canvas.width/2):
        px += speed
    else:
        py += speed
    
        if py &lt; 0 or (py + height) &gt; canvas.height:
            speed = -speed
            
    ctx.fillRect(px, py, width, height)
    
browser.timer.set_interval(game, 10)</pre>
<p><strong class="css-truncate-target mr-1" itemprop="name">讓使用者可以利用按鈕啟動或中斷紅色方塊上下碰撞移動</strong></p>
<pre>from browser import html
from browser import document as doc
from browser import timer

canvas = html.CANVAS(width = 400, height = 100)
canvas.id = "game-board3"
brython_div = doc["brython_div3"]
brython_div &lt;= canvas
brython_div &lt;= html.BUTTON("啟動", id="power")
ctx = canvas.getContext("2d")


px = 0
py = 50
width = 20
height = 20
speedx = 2
speedy = 2


def game():
    global px, py, width, height, speedx, speedy
    ctx.clearRect(px, py, width, height)
    ctx.fillStyle = "red"
    px += speedx
    if px &gt; 200 :
        speedx = 0
        py += speedy
    if py &lt; 0 or (py + height) &gt; canvas.height :
        speedy = -speedy
    ctx.fillRect(px, py, width, height)

game()
QQbe = None

def pig(ev):
    global QQbe
    if QQbe is None:
       QQbe = timer.set_interval(game, 10)
       doc['power'].text = '暫停'
    elif QQbe == 'hold':
        QQbe = timer.set_interval(game, 10)
        doc['power'].text = '暫停'
    else: 
        timer.clear_interval(QQbe)
        QQbe = 'hold'
        doc['power'].text = '繼續'

doc["power"].bind("click", pig)</pre>
<pre>from browser import html
from browser import document as doc
from browser import timer

canvas = html.CANVAS(width = 400, height = 100)
canvas.id = "game-board3"
brython_div = doc["brython_div3"]
brython_div &lt;= canvas
brython_div &lt;= html.BUTTON("啟動", id="power")
ctx = canvas.getContext("2d")


px = 0
py = 50
width = 20
height = 20
speedx = 2
speedy = 2


def game():
    global px, py, width, height, speedx, speedy
    ctx.clearRect(px, py, width, height)
    ctx.fillStyle = "red"
    px += speedx
    if px &gt; 200 :
        speedx = 0
        py += speedy
    if py &lt; 0 or (py + height) &gt; canvas.height :
        speedy = -speedy
    ctx.fillRect(px, py, width, height)

game()
QQbe = None

def pig(ev):
    global QQbe
    if QQbe is None:
       QQbe = timer.set_interval(game, 10)
       doc['power'].text = '暫停'
    elif QQbe == 'hold':
        QQbe = timer.set_interval(game, 10)
        doc['power'].text = '暫停'
    else: 
        timer.clear_interval(QQbe)
        QQbe = 'hold'
        doc['power'].text = '繼續'

doc["power"].bind("click", pig)</pre>
<pre>from browser import html
from browser import document as doc
from browser import timer

canvas = html.CANVAS(width = 400, height = 100)
canvas.id = "game-board3"
brython_div = doc["brython_div3"]
brython_div &lt;= canvas
brython_div &lt;= html.BUTTON("啟動", id="power")
ctx = canvas.getContext("2d")


px = 0
py = 50
width = 20
height = 20
speedx = 2
speedy = 2


def game():
    global px, py, width, height, speedx, speedy
    ctx.clearRect(px, py, width, height)
    ctx.fillStyle = "red"
    px += speedx
    if px &gt; 200 :
        speedx = 0
        py += speedy
    if py &lt; 0 or (py + height) &gt; canvas.height :
        speedy = -speedy
    ctx.fillRect(px, py, width, height)

game()
QQbe = None

def pig(ev):
    global QQbe
    if QQbe is None:
       QQbe = timer.set_interval(game, 10)
       doc['power'].text = '暫停'
    elif QQbe == 'hold':
        QQbe = timer.set_interval(game, 10)
        doc['power'].text = '暫停'
    else: 
        timer.clear_interval(QQbe)
        QQbe = 'hold'
        doc['power'].text = '繼續'

doc["power"].bind("click", pig)<br/><br/></pre>
<p><strong class="css-truncate-target mr-1" itemprop="name">英打</strong></p>
<pre>Every gist is a Git repository, which means that it can be forked and cloned. If you are signed in to GitHub when you create a gist, the gist will be associated with your account and you will see it in your list of gists when you navigate to your gist home page.

Gists can be public or secret. Public gists show up in Discover, where people can browse new gists as they're created. They're also searchable, so you can use them if you'd like other people to find and see your work.

Secret gists don't show up in Discover and are not searchable. Secret gists aren't private. If you send the URL of a secret gist to a friend, they'll be able to see it. However, if someone you don't know discovers the URL, they'll also be able to see your gist. If you need to keep your code away from prying eyes, you may want to create a private repository instead.

After creating a gist, you cannot convert it from public to secret.

You'll receive a notification when:

You are the author of a gist.
Someone mentions you in a gist.
You subscribe to a gist, by clicking Subscribe at the top of any gist.
You can pin gists to your profile so other people can see them easily. For more information, see "Pinning items to your profile."

You can discover public gists others have created by going to the gist home page and clicking All Gists. This will take you to a page of all gists sorted and displayed by time of creation or update. You can also search gists by language with Gist Search. Gist search uses the same search syntax as code search.

Since gists are Git repositories, you can view their full commit history, complete with diffs. You can also fork or clone gists. For more information, see "Forking and cloning gists".

You can download a ZIP file of a gist by clicking the Download ZIP button at the top of the gist. You can embed a gist in any text field that supports Javascript, such as a blog post. To get the embed code, click the clipboard icon next to the Embed URL of a gist. To embed a specific gist file, append the Embed URL with ?file=FILENAME.

Gist supports mapping GeoJSON files. These maps are displayed in embedded gists, so you can easily share and embed maps. For more information, see "Working with non-code files."
1 hr<br/><br/></pre>
<p><strong class="css-truncate-target mr-1" itemprop="name">中打</strong></p>
<pre></pre>
<pre>Gist 是Github 的一個子公司，且任何人都可以使用這個服務，不論你是否擁
有Github帳號。以開發者的角度來說，最基本的功能就是可以分享片段的原
始碼。有別於Github的Repository，Gist可以只分享專案中的某一個小檔案
中的程式碼，且嫆有私人的選項，讓別人不會搜尋到你的Gist。在Github的
Repository設定Private是要付費的，但在Gist是不需要的。除此之外Gist
還有許多用處，包括可以直接執行我們就來一一介紹吧!

7 min 50 sec</pre>
<pre><br/><br/></pre><h1>HW2</h1>
<h1>W10</h1>
<h1>EXAM</h1>
<h1>HW3</h1>
<h1>FINAL PROJECT</h1>