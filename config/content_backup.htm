<h1>About</h1>
<p>Python 程式語言可以編寫網際內容管理系統 (<a href="https://github.com/mdecourse/cmstemplate">cmstemplate</a>), 可以執行虛實整合系統的強化學習 (<a href="https://github.com/mdecourse/4072pj1">4072pj1</a>), 也能<a href="https://www.youtube.com/watch?v=3EqzMzszMV0">控制</a>數位場景中的機電模擬系統, 並進行機構合成 (<a href="https://github.com/mdecourse/4072pj3">4072pj3</a>), 但<a href="https://drive.google.com/file/d/18BfY3PVEpcMZhu6HcjB1eTW19K_M5Qt2/view">有些情況下</a>, Python 程式免不了需要透過 Lua 程式才能與 C++ 底層溝通, 並且後續的零組件強度分析, 大多依賴 C++ 程式套件完成 (<a href="https://github.com/mdecourse/4072pj2">4072pj2</a>), 而開發者若希望實現機電模擬系統的<a href="http://mde.tw/cd2020/content/Microcontroller.html">控制</a>, 則通常由 C 程式執行.</p>
<p>隨著雲端部署與隨身裝置的緊密結合下, 假如在十年前, 要編寫 Javascript 的伺服器端 runtime, C++ 會是個不錯的選擇 (<a href="https://nodejs.org">node.js</a>), 但此刻採用 Rust 才最<a href="https://thenewstack.io/rust-by-the-numbers-the-rust-programming-language-in-2021/">符合潮流</a>, 至於網際前後端若能同時執行最新版的 Javascript 與 <a href="https://www.typescriptlang.org/">Typescript</a>, 可以省去開發者不少麻煩 (<a href="https://deno.land/">Deno</a>). 當然隨身裝置中的各式 App, 若能採用 <a href="https://dart.dev/">Dart</a> 程式語言的 <a href="https://flutter.dev/">Flutter</a> 跨平台架構編寫, 並且依賴 <a href="https://elixir-lang.org/">Elixir</a> 分散式容錯伺服器進行配置, 程式開發者往後的日子才會更好過......, Oh, No! 現況真的是這樣嗎?</p>
<p>各位技職體系大學新鮮人, 歡迎進入二十一世紀第三個十年的計算機程式世代.</p>
<p>關鍵字: Python, Lua, C++, C, Javascript, Rust, Typescript, Dart, Flutter, Elixir.</p>
<h4>開場:</h4>
<p style="padding-left: 30px;">這裡是國立虎尾科技大學-機械設計工程系-計算機程式課程網站.</p>
<p style="padding-left: 30px;">學計算機程式做什麼? 其他人是<a href="https://itw01.com/YHAE5HS.html">如何學習計算機程式</a> (<a href="https://feross.org/how-i-learned-to-program-computers/">原始文章</a>, <a href="https://feross.org/">作者</a>)?</p>
<p style="padding-left: 30px;">計算機程式可以解決 ____  問題?</p>
<hr/>
<h4>啟示:</h4>
<p style="padding-left: 30px;">Don't confuse essense with tools. (不要混淆本質與工具)</p>
<p style="padding-left: 30px;"><a href="http://sam-koblenski.blogspot.com/2014/04/the-essence-of-programming.html">http://sam-koblenski.blogspot.com/2014/04/the-essence-of-programming.html</a></p>
<p style="padding-left: 30px;">學習計算機程式與學習下圍棋類似, 了解下圍棋的規則並不會太難, 但想要成為下圍棋大師, 並不容易.</p>
<p style="padding-left: 30px;">學會特定計算機程式語言的規定及語法也不會太難, 但是一談到要如何運用計算機程式, 解決機械設計流程碰到的各種問題, 絕大多數的機械設計背景工程師, 卻只能望電腦興嘆. Why?</p>
<hr/>
<h4>深省:</h4>
<p style="padding-left: 30px;">發人深省的教學影片, computer science is not a science. It's also not really very much about computers.</p>
<p style="padding-left: 30px;">And that is, when some field is just getting started and you don't really understand it very well, it's very easy to confuse the essence of what you're doing with the tools that you use.</p>
<p style="padding-left: 30px;">I think in the future people will look back and say, yes, those primitives in the 20th century were fiddling around with these gadgets called computers, but really what they were doing is starting to <span style="background-color: #ccffcc;">learn how to <a href="https://www.merriam-webster.com/dictionary/formalize">formalize</a> <a href="https://www.merriam-webster.com/dictionary/intuition">intuitions</a> about <a href="https://www.merriam-webster.com/dictionary/process">process</a>,</span> <span style="background-color: #ccffcc;">how to do things, starting to develop a way to talk precisely about how-to knowledge.</span></p>
<p style="padding-left: 30px;">計算機程式在學習<span style="background-color: #ffff99;">如何將做事的過程 (process) 及直覺 (intuitions) </span>予以<span style="background-color: #ffff99;">形式化 (formalize)</span>, 並且著手開發一種方式來<span style="background-color: #ffff99;">準確地 (precisely) 討論如何運用知識 (knowledge)</span>.</p>
<p style="padding-left: 30px;">keywords: process, intuitions, formalize, precisely and knowledge.</p>
<p style="padding-left: 30px;">關鍵字為: 過程, 直覺, 形式化, 精確以及知識.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/-J_xL4IGhJA" title="YouTube video player" width="560"></iframe></p>
<p>Overview and Introduction to Lisp (<a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/">source</a>, <a href="http://mde.tw/cad2021/downloads/Overview_Into_to_Lisp.txt">Closed Caption</a>)</p>
<hr/>
<h4>榜樣:</h4>
<p style="padding-left: 30px;">學習利用計算機程式解決問題的年齡愈早越好, 因為解決問題必須要將能精確運用或搜尋到對的知識, 將直覺過程轉化為電腦能夠處理的格式. 越早針對有興趣解題的領域啟蒙, 便越能及早在求學階段獲取相應的知識, 加入適當的團隊, 逐步透過專案解題, 累積更多經驗. 以下是 Bill Gates 述說其早年與計算機程式有關的歷程.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/vYXQTrYPenQ" title="YouTube video player" width="560"></iframe></p>
<h4>參考資料:</h4>
<p style="padding-left: 30px;">Repository: <a href="https://github.com/mdecourse/cp2021">https://github.com/mdecourse/cp2021</a></p>
<p style="padding-left: 30px;">Github Pages: <a href="https://mde.tw/cp2021">https://mde.tw/cp2021</a></p>
<p style="padding-left: 30px;">Github 簡介: <a href="https://docs.microsoft.com/zh-tw/learn/modules/introduction-to-github/">https://docs.microsoft.com/zh-tw/learn/modules/introduction-to-github/</a></p>
<p style="padding-left: 30px;">Github Actions: <a href="https://docs.microsoft.com/zh-tw/learn/modules/github-actions-automate-tasks/">https://docs.microsoft.com/zh-tw/learn/modules/github-actions-automate-tasks/</a></p>
<p style="padding-left: 30px;">LaTeX 教學: <a href="https://wdv4758h.github.io/notes/documentation/latex.html">https://wdv4758h.github.io/notes/documentation/latex.html</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/marketplace/actions/latex-action">https://github.com/marketplace/actions/latex-action</a></p>
<p style="padding-left: 30px;">Zulipchat: <a href="https://kmolab.zulipchat.com">https://kmolab.zulipchat.com</a></p>
<p style="padding-left: 30px;">RoboDK: <a href="https://robodk.com">https://robodk.com</a></p>
<p style="padding-left: 30px;">RoboDK API: <a href="https://robodk.com/doc/en/PythonAPI/">https://robodk.com/doc/en/PythonAPI/</a> (<a href="https://github.com/RoboDK/RoboDK-API">RoboDK-API on Github</a>)</p>
<h4>電腦輔助設計室與協同設計室行事曆:</h4>
<p style="padding-left: 30px;"><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p>
<h2>學習程式</h2>
<p>學習計算機程式語言的態度建議: <a href="https://learnpythonthehardway.org/book/intro.html">https://learnpythonthehardway.org/book/intro.html</a></p>
<ol>
<li>必得<span style="text-decoration: underline;"><span style="background-color: #ffff99;">花工夫</span></span>才學得來 (The hard way is easier, <a href="https://betterprogramming.pub/why-you-should-learn-to-program-the-hard-way-7961df96c5c5">ref1</a>, <a href="https://www.freecodecamp.org/news/learn-to-code-the-hard-way-65dece5b0005/">ref2</a>)</li>
<li>自己<span style="text-decoration: underline;"><span style="background-color: #ffff99;">讀資料</span></span>自己<span style="text-decoration: underline;"><span style="background-color: #ffff99;">刻每一行程式碼</span></span> (Reading and Writing (Typing), <a href="https://www.pitman-training.com/advice-hub/pitman-blog/why-is-it-important-to-touch-type/">ref1</a>, <a href="https://www.readandspell.com/why-is-keyboarding-important">ref2</a>, <a href="https://davidzych.com/how-important-is-typing-ability/">ref3</a>)</li>
<li>要<span style="text-decoration: underline;"><span style="background-color: #ffff99;">注重</span></span>每一個<span style="text-decoration: underline;"><span style="background-color: #ffff99;">細節</span></span> (Attention to Detail, <a href="http://programmingstage.blogspot.com/2012/05/paying-attention-to-detail.html">ref1</a>, <a href="https://www.eskimo.com/~scs/cclass/progintro/sx1.html">ref2)</a></li>
<li>要能<span style="text-decoration: underline;"><span style="background-color: #ffff99;">發現差異</span></span> (Spotting Differences, <a href="https://www.codementor.io/blog/good-vs-great-developers-4ln36zvwhg">ref1</a>, <a href="https://devskiller.com/coder-vs-programmer/">ref2</a>)</li>
<li>千萬<span style="text-decoration: underline;"><span style="background-color: #ffff99;">不要複製貼上</span></span> (Do not Copy-Paste)</li>
<li>多<span style="text-decoration: underline;"><span style="background-color: #ffff99;">觀看</span></span>相關<span style="text-decoration: underline;"><span style="background-color: #ffff99;">操作示範</span></span>影片 (Using the Included Videos)</li>
<li>多<span style="text-decoration: underline;"><span style="background-color: #ffff99;">練習</span></span>而且要<span style="text-decoration: underline;"><span style="background-color: #ffff99;">堅持學習</span></span> (Practice and Persistence)</li>
<li>學習如何<span style="background-color: #ffff99;"><a href="https://stackoverflow.com/help/how-to-ask" style="background-color: #ffff99;">問一個好問題</a></span> (Learn how to ask a good question)</li>
</ol>
<p>計算機程式學習 Python 目標: 編寫可以用於<span style="text-decoration: underline;"><span style="background-color: #ffff99;">機電資自動化整合系統設計與模擬</span></span>用的<span style="text-decoration: underline;"><span style="background-color: #ffff99;">網際程式</span></span>.</p>
<p><span style="background-color: #ccffcc;">Web Browser &lt;-&gt; Client </span>&lt;-&gt; Brython &lt;-&gt; Flask &lt;-&gt; <span style="background-color: #ccffcc;">Server &lt;-&gt; RoboDK, CoppeliaSim and Webots</span></p>
<h4>Online courses:</h4>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/watch?v=Ps8jOj7diA0&amp;list=PL8ED50412A17D4C8B">https://www.youtube.com/watch?v=Ps8jOj7diA0&amp;list=PL8ED50412A17D4C8B</a> (Stanford) - 27 lectures<span style="background-color: #ccffcc;"><br/></span></p>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/watch?v=8DvywoWv6fI">https://www.youtube.com/watch?v=8DvywoWv6fI</a> (Michigan) - 13:40:09</p>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/watch?v=rfscVS0vtbw">https://www.youtube.com/watch?v=rfscVS0vtbw</a> (Freecodecamp) - 4:26:51</p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://medium.com/@patrickbfuller/a-simple-flask-app-edeed75dbee2">https://medium.com/@patrickbfuller/a-simple-flask-app-edeed75dbee2</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/Patrickbfuller/simple_flask">https://github.com/Patrickbfuller/simple_flask</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mileserickson/flask-brython-example">https://github.com/mileserickson/flask-brython-example</a></p>
<p style="padding-left: 30px;"><a href="https://pypi.org/project/brython-server/">https://pypi.org/project/brython-server/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/andy31lewis/brySVG">https://github.com/andy31lewis/brySVG</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/dunossauro/todo_list_flask_brython">https://github.com/dunossauro/todo_list_flask_brython</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/DarthBayo/Encrypt">https://github.com/DarthBayo/Encrypt</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/chfw/brython-pack">https://github.com/chfw/brython-pack</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/rayluo/brip">https://github.com/rayluo/brip</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/rayluo/brython-project-template">https://github.com/rayluo/brython-project-template</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/rayluo/draggable-svg">https://github.com/rayluo/draggable-svg</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/Shohrab-Hossain/Tic-Tac-Toe-web">https://github.com/Shohrab-Hossain/Tic-Tac-Toe-web</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/denisecase/chapstack">https://github.com/denisecase/chapstack</a></p>
<p style="padding-left: 30px;"><a href="https://gitlab.com/sammdu/bot-tac-toe/">https://gitlab.com/sammdu/bot-tac-toe/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/lookupdict">https://github.com/mdecourse/lookupdict</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/scissor-rock-paper2">https://github.com/mdecourse/scissor-rock-paper2</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/wcms-scrum1">https://github.com/mdecourse/wcms-scrum1</a></p>
<h4>Python 語法</h4>
<p>由於 Github Pages 不允許伺服 __init__.py 檔案, 因此必須將 <a href="https://github.com/BrythonServer/ggame">ggame</a> 採用 <a href="https://brython.info/static_doc/en/import.html">https://brython.info/static_doc/en/import.html</a> 中 Optimization 的方式轉為 brython_modules.js 後直接以 script 標註導入頁面.</p>
<h4 style="padding-left: 30px;">將 ggame 中的 Brython 程式碼轉為 brython_modules.js 的方法:</h4>
<p style="padding-left: 60px;">在可攜系統中的 Python 安裝 brython 模組: pip install brython</p>
<p style="padding-left: 60px;">將所安裝 brython 模組中的 brython_stdlib.js 複製一份到 ggame 倉儲中, 確定目前 ggame 目錄架構為:</p>
<p style="padding-left: 60px;">brython_stdlib.js</p>
<p style="padding-left: 60px;">ggame</p>
<p style="padding-left: 60px;">意即 ggame 目錄中有 brython_stdlib.js 與 ggame brython 模組原始碼.</p>
<p style="padding-left: 60px;">接下來執行 y:\tmp\github\ggame&gt;python -m brython --modules</p>
<p style="padding-left: 60px;">完成後, 就可以在 y:\tmp\github\ggame&gt; 目錄中建立 brython_modules.js</p>
<p style="padding-left: 60px;">以本頁面的作法是將 ggame 所需的 graphics 檔案放至 images 目錄中, 而 brython_modules.js 則放至 downloads 目錄後, 以 /downloads/brython_modules.js 放入 script 標註中引用.</p>
<p>Python 3 官方教材: <a href="https://docs.python.org/3/index.html">https://docs.python.org/3/index.html</a></p>
<p>Python tutorial: <a href="https://docs.python.org/3/tutorial/index.html">https://docs.python.org/3/tutorial/index.html</a> (英文)</p>
<p>Python tutorial: <a href="https://docs.python.org/zh-tw/3/tutorial/">https://docs.python.org/zh-tw/3/tutorial/</a> (中文)</p>
<p>網頁上的 Python - Brython: <a href="https://www.brython.info/static_doc/en/intro.html">https://www.brython.info/static_doc/en/intro.html</a> (解譯式)</p>
<p style="padding-left: 30px;"><a href="http://brython.info/gallery/?C=M;O=D">Brython Gallery</a></p>
<p>網頁上的 Python GUI- Flexx: <a href="https://flexx.readthedocs.io/en/stable/">https://flexx.readthedocs.io/en/stable/</a> (轉譯式)</p><h2>機械設計知識</h2>
<p>Brython (Browser Python) 在網頁的執行速度並不很快, 因此比較適合初學者用來學習 Python 語法. 或者透過 WebGL 編寫架構較為簡單的機械設計模擬程式. 也可以與 Server 端的 Python + Flask 結合, 將功能較為完整的 Javascript 導入為程式庫.</p>
<p>對於機械設計相關, 運算較複雜的流程, 可以採用 Python + Cython 寫為動態連結程式庫. 或者利用 Rust 編寫可以讓 Python 呼叫的動態連結程式庫. 至於前端運算較複雜的程式, 則可以採用 Typescript 或 Rust + wasm 的方式編寫.</p>
<p><a href="https://pythonnumericalmethods.berkeley.edu/notebooks/Index.html">Python Programming And Numerical Methods: A Guide For Engineers And Scientists</a></p>
<p><a href="https://www.algorist.com/algorist.html">Algorithm Design Manual</a></p>
<p><a href="http://mde.tw/cad2020/content/%E8%A8%AD%E8%A8%88%E6%9C%80%E4%BD%B3%E5%8C%96.html">設計最佳化</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-15195-9">Fundamental University Physics</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4615-0487-0">Optimal Synthesis Methods for MEMS</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-642-22938-1">Wind Power Plants</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-642-23026-4">Principles of Physics</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-642-30319-7">Statics</a> 靜力學 (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-662-56272-7">Mechanics of Materials</a> 材料力學 (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-319-01851-5">Fundamentals of Robotic Mechanical Systems</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/referencework/10.1007/978-3-540-30738-9">Springer Handbook of Mechanical Engineering</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-0-387-68208-2">Precision Manufacturing</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-84800-336-1">Theory and Design of CNC Systems</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/b138168">Multibody Mechanics and Visualization</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/b137216">Screw Compressors</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-662-05086-6">Topology Optimization</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4020-2110-7">Fundamentals of Mechanicsof Robotic Manipulation</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-0-85729-394-7">Managing Engineering Design</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-662-05302-7">General Spatial Involute Gearing</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-662-08013-9">Inventive Thinking through TRIZ</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4757-2872-9">A Mathematical Theory of Design</a> (在校園網路下載電子書)</p><h2>Python</h2>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- for ggame -->
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<script src="/downloads/brython_modules.js"></script>
<!-- Cango 程式庫 -->
<script src="/static/Cango-13v08-min.js"></script>
<script src="/static/CangoAxes-4v01-min.js"></script>
<script src="/static/gearUtils-05.js"></script>
<!-- for Konva 程式庫 -->
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<h4>請利用下列網際編輯器, 開始學習如何使用 Python 解決問題, 一般機械設計流程會面臨什麼問題?</h4>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
from browser import html
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
Ace.editor.setValue("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
def helloWorld():
    print("Hello World!")
helloWorld()
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""")
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<div id="brython_div"></div>
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ****************************** keyword start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 kw1
kw1 = beditor.editor("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "keyword" 的按鈕點按時, 執行 kw1 物件中的 prog 方法
doc["keyword"].bind('click', kw1.prog)
</script>
</p>
<p><!-- ****************************** keyword end --></p>
<p><!-- ***************************** slide ex1 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex1 = beditor.editor("""# 導入 Ex1 原始碼
a = 0
def my_print(n, input_str):
    print("以下將重覆列印 '", input_str + "' " + str(n) + "次")
    for i in range(n):
        print(i, input_str)
my_print(5, "Hello World!")
the_str = "開始學習 Python"
num = input("請輸入要列印的次數!")
my_print(int(num), the_str)
a = a + 1
print("(" + str(a) + ")", "_" * 25)
def myfun():
    yield 1
    yield 2
    yield 3
for i in myfun():
    print(i)
x = iter(myfun())
y = list(myfun())
a = a + 1
print("(" + str(a) + ")", "_" * 25)
print(x.__next__())
print(x.__next__())
print(x.__next__())
print(y)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex1" 的按鈕點按時, 執行 Ex1 物件中的 prog 方法
doc["ex1"].bind('click', Ex1.prog)
</script>
</p>
<p><!-- ***************************** slide ex1 end --></p>
<p><!-- ***************************** slide ex2 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex2 = beditor.editor("""# Python 的內建資料型別
import math
def f():
    print("This is a user-defined function")
    return 42
print("Some basic types in Python:")
print(type(2))           # int
print(type(2.2))         # float
print(type("2.2"))       # str  (string)
print(type(2 < 2.2))     # bool (boolean)
print(type(math))        # module
print(type(math.tan))    # builtin_function_or_method ("function" in Brython)
print(type(f))           # function (user-defined function)
print(type(type(42)))    # type
print("#####################################################")
print("And some other types we will see later in the course...")
print(type(Exception())) # Exception
print(type(range(5)))    # range
print(type([1,2,3]))     # list
print(type((1,2,3)))     # tuple
print(type({1,2}))       # set
print(type({1:42}))      # dict (dictionary or map)
print(type(2+3j))        # complex  (complex number) (we may not see this type)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex2" 的按鈕點按時, 執行 Ex2 物件中的 prog 方法
doc["ex2"].bind('click', Ex2.prog)
</script>
</p>
<p><!-- ***************************** slide ex2 end --></p>
<p><!-- ***************************** slide ex3 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex3 = beditor.editor("""# Python 的內建常數與函式
# 內建常數
print("Some builtin constants:")
print(True)
print(False)
print(None)
print("And some more constants in the math module:")
import math
print(math.pi)
print(math.e)
# 內建函式
print("Type conversion functions:")
print(bool(0))   # convert to boolean (True or False)
print(float(42)) # convert to a floating point number
print(int(2.8))  # convert to an integer (int)
print("And some basic math functions:")
print(abs(-5))   # absolute value
print(max(2,3))  # return the max value
print(min(2,3))  # return the min value
print(pow(2,3))  # raise to the given power (pow(x,y) == x**y)
print(round(2.354, 1)) # round with the given number of digits
# other examples
print(3 * 2)
print(3 * "abc")
print(3 + 2)
print("abc" + "def")
print(3 + "def")
# Type Affect Semantics
print(3 * 2)
print(3 * "abc")
print(3 + 2)
print("abc" + "def")
print(3 + "def")
# Integer Division
print("The / operator does 'normal' float division:")
print(" 5/3  =", ( 5/3))
print()
print("The // operator does integer division:")
print(" 5//3 =", ( 5//3))
print(" 2//3 =", ( 2//3))
print("-1//3 =", (-1//3))
print("-4//3 =", (-4//3))
# Modulus or Remainder Operator (%)
print(" 6%3 =", ( 6%3))
print(" 5%3 =", ( 5%3))
print(" 2%3 =", ( 2%3))
print(" 0%3 =", ( 0%3))
print("-4%3 =", (-4%3))
print(" 3%0 =", ( 3%0))
# Verify that (a%b) is equivalent to (a-(a//b)*b)
def mod(a, b):
  return a - (a//b)*b
print(41%14, mod(41,14))
print(14%41, mod(14,41))
print(-32%9, mod(-32,9))
print(32%-9, mod(32,-9))
# Operator Order (Precedence and Associativity)
print("Precedence:")
print(2+3*4)  # prints 14, not 20
print(5+4%3)  # prints  6, not 0 (% has same precedence as *, /, and //)
print(2**3*4) # prints 32, not 4096 (** has higher precedence than *, /, //, and %)
print()
print("Associativity:")
print(5-4-3)   # prints -2, not 4 (- associates left-to-right)
print(4**3**2) # prints 262144, not 4096 (** associates right-to-left)
# Approximate Values of Floating-Point Numbers
print(0.1 + 0.1 == 0.2)        # True, but...
print(0.1 + 0.1 + 0.1 == 0.3)  # False!
print(0.1 + 0.1 + 0.1)         # prints 0.30000000000000004 (uh oh)
print((0.1 + 0.1 + 0.1) - 0.3) # prints 5.55111512313e-17 (tiny, but non-zero!)
# Equality Testing with math.isclose
print("The problem....")
d1 = 0.1 + 0.1 + 0.1
d2 = 0.3
print(d1 == d2)                # False (never use == with floats!)
print()
print("The solution...")
import math
print(math.isclose(d1, d2))  # True!
# math.isclose checks if the two numbers are ALMOST equal, within a small error
# Short-Circuit Evaluation
def yes():
    return True
def no():
    return False
def crash():
    return 1/0 # crashes!
print(no() and crash()) # Works!
print(crash() and no()) # Crashes!
print (yes() and crash()) # Never runs (due to crash), but would also crash (without short-circuiting)
# Or operator
def yes():
    return True
def no():
    return False
def crash():
    return 1/0 # crashes!
print(yes() or crash()) # Works!
print(crash() or yes()) # Crashes!
print(no() or crash())  # Never runs (due to crash), but would also crash (without short-circuiting)
# more examples
def isPositive(n):
    result = (n > 0)
    print("isPositive(",n,") =", result)
    return result
def isEven(n):
    result = (n % 2 == 0)
    print("isEven(",n,") =", result)
    return result
print("Test 1: isEven(-4) and isPositive(-4))")
print(isEven(-4) and isPositive(-4)) # Calls both functions
print("----------")
print("Test 2: isEven(-3) and isPositive(-3)")
print(isEven(-3) and isPositive(-3)) # Calls only one function!
# type vs isinstance
# Both type and isinstance can be used to type-check
# In general, (isinstance(x, T)) will be more robust than (type(x) == T)
print(type("abc") == str)
print(isinstance("abc", str))
# We'll see better reasons for this when we cover OOP + inheritance later
# in the course.  For now, here is one reason:  say you wanted to check
# if a value is any kind of number (int, float, complex, etc). 
# You could do:
def isNumber(x):
    return ((type(x) == int) or
            (type(x) == float)) # are we sure this is ALL kinds of numbers?
print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))
# But this is cleaner, and works for all kinds of numbers, including
# complex numbers for example:
import numbers
def isNumber(x):
    return isinstance(x, numbers.Number) # works for any kind of number
print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex3" 的按鈕點按時, 執行 Ex3 物件中的 prog 方法
doc["ex3"].bind('click', Ex3.prog)
</script>
</p>
<p><!-- ***************************** slide ex3 end --></p>
<p><!-- ***************************** slide ex4 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex4 = beditor.editor("""# Python 函式
# Vocabulary
x = 5
def f(y, z):
    result = x + y + z
    return result
print(f(1, 2)) # 8
print(f(3, 4)) # 12
# Vocabulary:
#   variables: global vs. local
#   statements vs. expressions
#   function definitions vs. function calls
#   parameters vs. arguments
# Return Statements
# Basic example
def isPositive(x):
    return (x > 0)
print(isPositive(5))  # True
print(isPositive(-5)) # False
print(isPositive(0))  # False
# Return ends the function immediately
def isPositive(x):
    print("Hello!")   # runs
    return (x > 0)
    print("Goodbye!") # does not run ("dead code")
print(isPositive(5))  # prints Hello, then True
# No return statement --> return None
def f(x):
    x + 42
print(f(5)) # None
def f2(x):
    result = x + 42
print(f2(5)) # None
# Print versus Return
# This is a common early mistake (confusing print and return):
def cubed(x):
    print(x**3) # Here is the error!
cubed(2)          # seems to work!
print(cubed(3))   # sort of works (but prints None, which is weird)
print(2*cubed(4)) # Error!
# Once again (correctly)
def cubed2(x):
    return (x**3) # That's better!
cubed2(2)          # seems to be ignored (why?)
print(cubed2(3))   # works!
print(2*cubed2(4)) # works!
# Different Parameter and Return Types
def hypotenuse(a, b):
    return ((a**2) + (b**2))**0.5
print(hypotenuse(3, 4)) # 5.0 (not 5)
print("---------------------")
def xor(b1, b2):
    return ((b1 and (not b2)) or (b2 and (not b1)))  # same as (b1 != b2)
print(xor(True,  True))  # False
print(xor(True,  False)) # True
print(xor(False, True))  # True
print(xor(False, False)) # False
print("---------------------")
def isPositive(n):
    return (n > 0)
print(isPositive(10))     # True
print(isPositive(-1.234)) # False
# Function Composition
def f(w):
    return 10*w
def g(x, y):
    return f(3*x) + y
def h(z):
    return f(g(z, f(z+1)))
print(h(1)) # hint: try the "visualize" feature
# Helper Functions 
def onesDigit(n):
    return n%10
def largerOnesDigit(x, y):
    return max(onesDigit(x), onesDigit(y))
print(largerOnesDigit(134, 672)) # 4
print(largerOnesDigit(132, 674)) # Still 4
# Test Functions
# A broken test function
def onesDigit(n):
    return n%10
def testOnesDigit():
    print("Testing onesDigit()...", end="")
    assert(onesDigit(5) == 5)
    assert(onesDigit(123) == 3)
    assert(onesDigit(100) == 0)
    assert(onesDigit(999) == 9)
    print("Passed!")
testOnesDigit() # Passed!  Why is this bad?
# A better version
def onesDigit2(n):
    return n%10
def testOnesDigit2():
    print("Testing onesDigit()...", end="")
    assert(onesDigit2(5) == 5)
    assert(onesDigit2(123) == 3)
    assert(onesDigit2(100) == 0)
    assert(onesDigit2(999) == 9)
    assert(onesDigit2(-123) == 3) # Added this test
    print("Passed!")
testOnesDigit2() # Crashed!  So the test function worked!
# Local Variable Scope
def f(x):
    print("In f, x =", x)
    x += 5
    return x
def g(x):
    return f(x*2) + f(x*3)
print(g(2))
# Another example
def f(x):
    print("In f, x =", x)
    x += 7
    return round(x / 3)
def g(x):
    x *= 10
    return 2 * f(x)
def h(x):
    x += 3
    return f(x+4) + g(x)
print(h(f(1)))
# Global Variable Scope
# In general, you should avoid using global variables.
# You will even lose style points if you use them!
# Still, you need to understand how they work, since others
# will use them, and there may also be some very few occasions
# where you should use them, too!
g = 100
def f(x):
    return x + g
print(f(5)) # 105
print(f(6)) # 106
print(g)    # 100
# Another exampl
g = 100
def f(x):
    # If we modify a global variable, we must declare it as global.
    # Otherwise, Python will assume it is a local variable.
    global g
    g += 1
    return x + g
print(f(5)) # 106
print(f(6)) # 108
print(g)    # 102
# Default arguments
# Sometimes, a function has a parameter that has a natural default
# We can specify that default value in the function definition,
# then choose whether or not to include it in the function call.
def f(x, y=10):
    return x + y
print(f(5))   # 15
print(f(5,1)) # 6
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex4" 的按鈕點按時, 執行 Ex4 物件中的 prog 方法
doc["ex4"].bind('click', Ex4.prog)
</script>
</p>
<p><!-- ***************************** slide ex4 end --></p>
<!-- line drawing start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Draw = beditor.editor("""# Line drawing
# 導入 doc
from browser import document as doc
from browser import html
import math
canvas = html.CANVAS(width = 300, height = 200)
canvas.id = "line_drawing"
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["line_drawing"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
# 設定填圖顏色
ctx.fillStyle = "rgb(200,0,0)"
# 設定畫筆顏色
ctx.strokeStyle = "rgb(0,0,200)"
# 乘上 deg 可轉為徑度單位
deg = math.pi / 180
# 建立多邊形定點位置畫線函式
def star(radius, xc, yc, n):
    #radius = 100
    #xc = 200
    #yc = 200
    xi = xc + radius*math.cos((360/n)*deg+90*deg)
    yi = yc - radius*math.sin((360/n)*deg+90*deg)
    ctx.beginPath()
    ctx.moveTo(xi,yi)
    for i in range(2, n+1):
        x = xc + radius*math.cos((360/n)*deg*i+90*deg)
        y = yc - radius*math.sin((360/n)*deg*i+90*deg)
        ctx.lineTo(x,y)
# 以下利用多邊形畫線函式呼叫執行畫框線或填入顏色
# 畫五邊形框線
star(50, 50, 50, 5)
ctx.closePath()
ctx.stroke()
    
# 填三角形色塊
star(50, 150, 50, 3)
ctx.closePath()
ctx.fill()
    
# 改變畫線顏色後, 畫七邊形框線
ctx.strokeStyle = "rgb(0,200,20)"
star(50, 250, 50, 7)
ctx.closePath()
ctx.stroke()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "draw" 的按鈕點按時, 執行 Draw 物件中的 prog 方法
doc["draw"].bind('click', Draw.prog)
</script>
</p>
<!-- line drawing ends -->
<p></p>
<!-- flag ex start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Flag = beditor.editor("""# 畫中華民國國旗
# 導入 doc
from browser import document as doc
from browser import html
import math
canvas = html.CANVAS(width = 300, height = 200)
canvas.style = {"width": "100%"}
canvas.id = "taiwan_flag"
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "flag" 的按鈕點按時, 執行 Flag 物件中的 prog 方法
doc["flag"].bind('click', Flag.prog)
</script>
</p>
<!-- flag ex ends -->
<p></p>
<!-- bunny starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Bunny = beditor.editor("""# Ggame
from ggame import App, ImageAsset, Sprite, MouseEvent
from random import random, randint
from browser import document as doc
from browser import html
import math
# for site variable to use socket.gethostname() to differentiate execution on localhost or not
import socket
# 引入既有的id="graphics-column" 標註
graphics_column = doc["graphics-column"]
# 建立內定名稱為 "ggame-canvas" 的 canvas 標註
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "ggame-canvas"
# 將 canvas 插入 gc 標註中
graphics_column <= canvas

# when work with dynamic site
if socket.gethostname() == "localhost":
    site = ""
else:
    # when work with remote site
    site="./.."

class Bunny(Sprite):
    
    asset = ImageAsset(site+"/images/bunny.png")
    
    def __init__(self, position):
        super().__init__(Bunny.asset, position)
        # register mouse events
        App.listenMouseEvent(MouseEvent.mousedown, self.mousedown)
        App.listenMouseEvent(MouseEvent.mouseup, self.mouseup)
        App.listenMouseEvent(MouseEvent.mousemove, self.mousemove)
        self.dragging = True
        self.deltax = 0
        self.deltay = 0
    
    def step(self):
        # Every now and then a bunny hops...
        if random() < 0.01:
            self.x += randint(-20,20)
            self.y += randint(-20,20)
        
        
    def mousedown(self, event):
        # capture any mouse down within 50 pixels
        self.deltax = event.x - (self.x + self.width//2) 
        self.deltay = event.y - (self.y + self.height//2)
        if abs(self.deltax) < 50 and abs(self.deltay) < 50:
            self.dragging = True
            # only drag one bunny at a time - consume the event
            event.consumed = True
            
    def mousemove(self, event):
        if self.dragging:
            self.x = event.x - self.deltax - self.width//2
            self.y = event.y - self.deltay - self.height//2
            event.consumed = True
            
    def mouseup(self, event):
        if self.dragging:
            self.dragging = False
            event.consumed = True
            
        
class DemoApp(App):
    
    def __init__(self):
        super().__init__()
        for i in range(5):
            Bunny((randint(50, 600), randint(50, 400)))
        
    def step(self):
        # Override step to perform action on each frame update
        for bunny in self.spritelist:
            bunny.step()
# Create the app
app = DemoApp()  
# Run the app
app.run()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "bunny" 的按鈕點按時, 執行 Bunny 物件中的 prog 方法
doc["bunny"].bind('click', Bunny.prog)
</script>
</p>
<!-- bunny ends -->
<p></p>
<!-- clear canvas start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Clear = beditor.editor("""# 清除畫布
from browser import document, html
brython_div = document["brython_div"] 
brython_div.clear()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "clear" 的按鈕點按時, 執行 Clear 物件中的 prog 方法
doc["clear"].bind('click', Clear.prog)
</script>
</p>
<!-- clear canvas ends -->
<p></p>
<!-- cango spur gears start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Spur = beditor.editor("""# Cango Spur Gears
from browser import document as doc
from browser import html
import math
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "cango_gear"
brython_div = doc["brython_div"]
brython_div <= canvas
from browser import document as doc
from browser import window
import math
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
shape = window.Shape.new
path = window.Path.new
creategeartooth = window.createGearTooth.new
tweener = window.Tweener.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")
######################################
# 畫正齒輪輪廓
#####################################
def cangoGear(n, m, pa):
    # n 為齒數
    #n = 17
    # pa 為壓力角
    #pa = 25
    # m 為模數, 根據畫布的寬度, 計算適合的模數大小
    # Module = mm of pitch diameter per tooth
    #m = 0.8*canvas.width/n
    # pr 為節圓半徑
    pr = n*m/2 # gear Pitch radius
    # generate gear
    data = creategeartooth(m, n, pa)
    # Brython 程式中的 print 會將資料印在 Browser 的 console 區
    #print(data)
    gearTooth = path(data, {
      "fillColor":"#ddd0dd",
      "border": True,
      "strokeColor": "#606060" })
    gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
    # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
    gear = gearTooth.dup()
    # gear 為單一齒的輪廓資料
    #cgo.render(gearTooth)
    # 利用單齒輪廓旋轉, 產生整個正齒輪外形
    for i in range(1, n):
        # 將 gearTooth 中的資料複製到 newTooth
        newTooth = gearTooth.dup()
        # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
        newTooth.rotate(360*i/n)
        gear.appendPath(newTooth)
    # 建立軸孔
    # add axle hole, hr 為 hole radius
    hr = 0.6*pr # diameter of gear shaft
    shaft = path(shapedefs.circle(hr), {
      "fillColor":"#ddd0dd",
      "border": True,
      "strokeColor": "#606060" })
    gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
    return gear
# 設定兩齒齒數
n1 = 17
n2 = 11
n3 = 13
reduced_ratio = 0.5
# 使用 80% 的畫布寬度
m = 0.8*canvas.width/((n1+n2+n3)*reduced_ratio)
# 設定共同的壓力角
pa = 25
# n 齒輪的節圓半徑
pr1 = n1*m/2
# n2 齒輪的節圓半徑
pr2 = n2*m/2
pr3 = n3*m/2
cx = canvas.width/2
cy = canvas.height/2
# 建立 gears
gear1 = cangoGear(n1, m, pa)
gear2 = cangoGear(n2, m, pa)
gear3 = cangoGear(n3, m, pa)
from browser.timer import set_interval
deg = math.pi/180
rotate_speed = 12*deg
def draw():
    cgo.clearCanvas()
    gear1.transform.translate(cx-(pr1+pr2)*reduced_ratio, cy)
    gear1.transform.scale(reduced_ratio)
    gear1.transform.rotate(0)
    gear1.rotate(rotate_speed)
    cgo.render(gear1)
    
    gear2.transform.translate(cx, cy)
    gear2.transform.scale(reduced_ratio)
    gear2.transform.rotate(180+(360/n2/2))
    gear2.rotate(-(rotate_speed)*n1/n2)
    cgo.render(gear2)
    
    gear3.transform.translate(cx+(pr2+pr3)*reduced_ratio, cy)
    gear3.transform.scale(reduced_ratio)
    gear3.transform.rotate(180+(360/n3/2)+(180+(360/n2/2))*n2/n3)
    gear3.rotate((rotate_speed*n1/n2)*(n2/n3))
    cgo.render(gear3)
set_interval(draw, 2)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "spur" 的按鈕點按時, 執行 Spur 物件中的 prog 方法
doc["spur"].bind('click', Spur.prog)
</script>
</p>
<!-- cango spur gears ends -->
<p></p>
<!-- temp convert start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Temp = beditor.editor("""# Temperature Conversion
# Temperature Conversion
'''
C to F: Celsius to Fahrenheit Conversion Formula. To convert temperatures in degrees Celsius to Fahrenheit, multiply by 1.8 (or 9/5) and add 32.
To convert temperatures in degrees Fahrenheit to Celsius, subtract 32 and multiply by .5556 (or 5/9).
Fahrenheit = Celsius*9/5 + 32
Celsium = (Fahrenheit - 32)*5/9
'''
from browser import document, html
brython_div = document["brython_div"]
def c2f(c):
    f = round(c*9/5 + 32, 3)
    return "Celsiusc: "+ str(c) +         " degrees = Fahrenheit: " + str(f) + " degrees"
    
def f2c(f):
    c = round((f - 32)*5/9, 3)
    return "Fahrenheit: "+ str(f) +         " degrees = Celsiusc: " + str(c) + " degrees"
    
choice = input("c2f or f2c")
if choice == "c2f":
    '''
    c = float(input("input Celsius in degrees"))
    print(c2f(c))
    '''
    for deg in range(100):
        brython_div <= c2f(deg)
        brython_div <= html.BR()
else:
    '''
    f = float(input("input Fahrenheit in degrees"))
    print(f2c(f))
    '''
    for deg in range(100):
        brython_div <= f2c(deg)
        brython_div <= html.BR()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "temp" 的按鈕點按時, 執行 Temp 物件中的 prog 方法
doc["temp"].bind('click', Temp.prog)
</script>
</p>
<!-- temp convert ends -->
<p></p>
<!-- forloop start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Forloop = beditor.editor("""# For loop
for i in range(5):
    print(i)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "forloop" 的按鈕點按時, 執行 Forloop 物件中的 prog 方法
doc["forloop"].bind('click', Forloop.prog)
</script>
</p>
<!-- forloop ends -->
<p></p>
<!-- guess start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Guess = beditor.editor("""# 猜數字遊戲
from browser import document, html, alert
import random
# 跳出文字說明視窗
alert("開始玩猜數字遊戲")
# 利用 random 模組中的 randint 取 1~100 間的亂數
標準答案 = random.randint(1, 100)
# 利用 input 函式視窗, 取使用者所猜的數字, 轉為整數
你猜的數字 = int(input("請輸入您所猜 1~100 間的整數:"))
# 猜測次數起始值設為 1
猜測次數 = 1
# 進入重複迴圈, 直到猜對數字
while 標準答案 != 你猜的數字:
    # 根據使用者所猜的數字, 與答案比較後, 給出提示
    if 標準答案 < 你猜的數字:
        alert("猜第" + str(猜測次數) + "次, 太大了，再猜 :)加油")
    else:
        alert("猜第" + str(猜測次數) + "次, 太小了，再猜 :)加油")
    你猜的數字 = int(input("請輸入您所猜 1~100 間的整數:"))
    # 猜測次數累加
    猜測次數 += 1
# 跳出迴圈表示猜對, 給出最後文字說明視窗
alert("猜對了！答案為" + str(標準答案) + ", 總共猜了" + str(猜測次數) + "次")
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "guess" 的按鈕點按時, 執行 Guess 物件中的 prog 方法
doc["guess"].bind('click', Guess.prog)
</script>
</p>
<!-- guess ends -->
<p></p>
<!-- autoguess start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Autoguess = beditor.editor("""# 程式自動猜數字遊戲
from browser import document, html, alert
import random
 
id4 = document["brython_div"]
執行次數 = 100
總猜測次數 = 0
for i in range(執行次數):
    id4 <= "第" + str(i+1) + "次玩:" + html.BR()
    下限 = 1
    上限 = 100
    標準答案 = random.randint(下限, 上限)
    pc猜的數字 = random.randint(下限, 上限)
    #print(標準答案, pc猜的數字)
    #integer int()
    #string str()
    #float float()
    #你猜的數字 = int(input("請輸入您所猜的整數:"))
    猜測次數 = 1
    while 標準答案 != pc猜的數字:
        if 標準答案 < pc猜的數字:
            #print("太大了，再猜一次 :)加油")
            # 因此已經確定"pc猜的數字"不是答案, 因此 - 1
            id4 <= "電腦猜的數字:" + str(pc猜的數字) + " 太大了!" + html.BR()
            上限 = pc猜的數字 - 1
        else:
            #print("太小了，再猜一次 :)加油")
            # 因此已經確定"pc猜的數字"不是答案, 因此 + 1
            id4 <= "電腦猜的數字:" + str(pc猜的數字) + " 太小了!" + html.BR()
            下限 = pc猜的數字 + 1
        #pc猜的數字 = int(input("請輸入您所猜的整數:"))
        pc猜的數字 = random.randint(下限, 上限)
        猜測次數 += 1
    #print("猜對了！總共猜了", 猜測次數, "次")
    id4 <= "電腦猜對了, 答案為: " + str(標準答案) + ", 總共猜了 "+ str(猜測次數) + "次" + html.BR()
    總猜測次數 += 猜測次數
平均猜測次數 = int(總猜測次數/執行次數)
#print("平均次數", 平均猜測次數)
id4 <= "平均次數: " + str(平均猜測次數)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "autoguess" 的按鈕點按時, 執行 Autoguess 物件中的 prog 方法
doc["autoguess"].bind('click', Autoguess.prog)
</script>
</p>
<!-- autoguess ends -->
<p></p>
<!-- lottery start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Lottery = beditor.editor("""# 大樂透電腦選號
# lottery
from browser import document, html, alert
import random
try:
    total = int(input("請問要出幾張大樂透彩卷號碼?"))
except:
    alert("請輸入要選擇大樂透電腦選號數量的'整數'")
    total = int(input("請問要出幾張大樂透彩卷號碼?"))
# 準備將電腦選出的號碼, 輸出到內定 id="brython_div" 的標註區域
output_div = document["brython_div"]
output_div <= "以下將出 " + str(total) + " 張電腦選號彩卷:" + html.BR()
for i in range(1, total + 1):
    # 利用 list(range()) 產生 1 到 49 的 population list
    # 然後再透過 random.sample(population, k) 
    # 從 population, 產生 k 個不同的數字
    numbers = random.sample(list(range(1, 49)), 6)
    output_div <= str(i) + ". 電腦選號為: " + str(numbers) + html.BR()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "lottery" 的按鈕點按時, 執行 Lottery 物件中的 prog 方法
doc["lottery"].bind('click', Lottery.prog)
</script>
</p>
<!-- lottery ends -->
<p></p>
<!-- 台灣威力彩 start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Weleadlottery = beditor.editor("""# 威力彩電腦選號
# weleadlottery
from browser import document, html, alert
import random
try:
    total = int(input("請問要出幾張威力彩卷號碼?"))
except:
    alert("請輸入要選擇威力彩電腦選號數量的'整數'")
    total = int(input("請問要出幾張威力彩卷號碼?"))
# 準備將電腦選出的號碼, 輸出到內定 id="brython_div" 的標註區域
output_div = document["brython_div"]
output_div <= "以下將出 " + str(total) + " 張威力彩電腦選號彩卷:" + html.BR()
for i in range(1, total + 1):
    # 利用 list(range()) 產生第一區 1 到 38 , 第二區 1 到 8 的 population list
    # 然後再透過 random.sample(population, k) 
    # 從 population, 產生 k 個不同的數字
    section1_numbers = random.sample(list(range(1, 38)), 6)
    section2_number = random.sample(list(range(1, 8)), 1)
    output_div <= str(i) + ". 電腦選號第一區為: " + str(section1_numbers) + html.BR()
    output_div <= ". 電腦選號第二區為: " + str(section2_number) + html.BR()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "lottery" 的按鈕點按時, 執行 Lottery 物件中的 prog 方法
doc["weleadlottery"].bind('click', Weleadlottery.prog)
</script>
</p>
<!-- 台灣威力彩 ends -->
<p></p>
<!-- bezier starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Bezier = beditor.editor("""# Cango Bezier 繪圖
from browser import window, html
from browser import document as doc
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "canvas"
brython_div = doc["brython_div"]
brython_div <= canvas
# Javascript 物件
cango = window.Cango.new
path = window.Path.new
shape = window.Shape.new
group = window.Group.new
# Javascript 變數
shapedefs = window.shapeDefs
g1 = cango("canvas")
g1.clearCanvas()
g1.gridboxPadding(10, 10, 5, 7)
g1.fillGridbox("lightgreen")
g1.setWorldCoordsRHC(-100, -100, 400)
x1 = 40
y1 = 20
cx1 = 90
cy1 = 120
x2 = 120
y2 = 100
cx2 = 130
cy2 = 20
cx3 = 150
cy3 = 120
x3 = 180
y3 = 60
def dragC1(mousePos):
    global cx1, cy1
    cx1 = mousePos.x
    cy1 = mousePos.y
    drawCurve()
def dragC2(mousePos):
    global cx2, cy2
    cx2 = mousePos.x
    cy2 = mousePos.y
    drawCurve()
def dragC3(mousePos):
    global cx3, cy3
    cx3 = mousePos.x
    cy3 = mousePos.y
    drawCurve()
def drawCurve():
    qbez = path(['M', x1, y1, 'Q', cx1, cy1, x2, y2], {
      'strokeColor':'blue'})
    cbez = path(['M', x2, y2, 'C', cx2, cy2, cx3, cy3, x3, y3], {
      'strokeColor':'green'})
    L1 = path(['M', x1, y1, 'L', cx1, cy1, x2, y2], {
      'strokeColor':"rgba(0, 0, 0, 0.2)",
      'dashed':[4]})
    L2 = path(['M', x2, y2, 'L', cx2, cy2], {
      'strokeColor':"rgba(0, 0, 0, 0.2)",
      'dashed':[4]})
    L3 = path(['M', x3, y3, 'L', cx3, cy3], {
      'strokeColor':"rgba(0, 0, 0, 0.2)",
      'dashed':[4]})
    c1.transform.translate(cx1, cy1)
    c2.transform.translate(cx2, cy2)
    c3.transform.translate(cx3, cy3)
    grp = group(qbez, cbez, L1, L2, L3, c1, c2, c3)
    g1.render(grp, True)
g1.clearCanvas("lightyellow")
g1.deleteAllLayers()
g1.setWorldCoordsRHC(0, 0, 200)
c1 = shape(shapedefs.circle(6), {'fillColor':'red'})
c1.enableDrag(None, dragC1, None)
c2 = shape(shapedefs.circle(6), {'fillColor':'red'})
c2.enableDrag(None, dragC2, None)
c3 = shape(shapedefs.circle(6), {'fillColor':'red'})
c3.enableDrag(None, dragC3, None);
drawCurve()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "bezier" 的按鈕點按時, 執行 Bezier 物件中的 prog 方法
doc["bezier"].bind('click', Bezier.prog)
</script>
</p>
<!-- bezier ends -->
<p></p>
<!-- turtle1 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle1 = beditor.editor("""# Turtle1 繪圖
from browser import window, html
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
t = turtle.Turtle()
t.width(5)
for c in ['red', '#00ff00', '#fa0', 'rgb(0,0,200)']:
    t.color(c)
    t.forward(100)
    t.left(90)
# dot() and write() do not require the pen to be down
t.penup()
t.goto(-30, -100)
t.dot(40, 'rgba(255, 0, 0, 0.5')
t.goto(30, -100)
t.dot(40, 'rgba(0, 255, 0, 0.5')
t.goto(0, -70)
t.dot(40, 'rgba(0, 0, 255, 0.5')
t.goto(0, 125)
t.color('purple')
t.write("這就是 Brython, 網頁上的 Python", font=("Arial", 15, "normal"))
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle1" 的按鈕點按時, 執行 Turtle1 物件中的 prog 方法
doc["turtle1"].bind('click', Turtle1.prog)
</script>
</p>
<!-- turtle1 ends -->
<p></p>
<!-- turtle2 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle2 = beditor.editor("""# Turtle2 繪圖
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
star = turtle.Turtle()
for i in range(5):
    star.forward(250)
    star.right(144)
    
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle2" 的按鈕點按時, 執行 Turtle2 物件中的 prog 方法
doc["turtle2"].bind('click', Turtle2.prog)
</script>
</p>
<!-- turtle2 ends -->
<p></p>
<!-- turtle3 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle3 = beditor.editor("""# Turtle3 繪圖
# https://michael0x2a.com/blog/turtle-examples
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
painter = turtle.Turtle()
painter.pencolor("blue")
for i in range(50):
    painter.forward(50)
    painter.left(123) # Let's go counterclockwise this time 
    
painter.pencolor("red")
for i in range(50):
    painter.forward(100)
    painter.left(123)
    
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle3" 的按鈕點按時, 執行 Turtle3 物件中的 prog 方法
doc["turtle3"].bind('click', Turtle3.prog)
</script>
</p>
<!-- turtle3 ends -->
<p></p>
<!-- turtle4 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle4 = beditor.editor("""# Turtle4 繪圖
# https://docs.python.org/3.7/library/turtle.html?highlight=turtle
# https://fiftyexamples.readthedocs.io/en/latest/turtle.html
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
# 輸入 "turtle" 字串, 表示要使用內建的烏龜圖示
t = turtle.Turtle("turtle")
# 設定繪圖尺寸
screen_x = 500-20
screen_y = 300
# 提筆, 將烏龜移動到畫布中心
t.penup()
t.home()
# 內定方向為右, 前進 screen_x/2
t.forward(screen_x / 2)
# 將方向往右轉 90 度
t.right(90)
# 此時方向向下, 前進 screen_y/2
t.forward(screen_y / 2)
# 令烏龜方向轉絕對角度 180, 等同轉相對角度 90 度, 即 t.right(90)
t.setheading(180)
# 將畫筆顏色設為紅色
t.pencolor('red')
# 下筆準備繪圖
t.pendown()
# 設筆寬度為 10
t.pensize(10)
# 進入重複迴圈, 此時方向向右, 分別
# 前進 screen_x, 之後轉 90 度, 方向朝上
# 再前進 screen_y, 之後再轉 90 度, 方向朝右
# 再前進 screen_x, 之後轉 90 度, 方向朝下
# 最後再前進 screen_y 後, 將方向轉為向左
for distance in (screen_x, screen_y, screen_x, screen_y):
    t.forward(distance)
    t.right(90)
# 提筆後, 將烏龜轉回內定方向回到畫布中心
t.penup()
t.home()
# 完成 turtle 繪圖
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle4" 的按鈕點按時, 執行 Turtle4 物件中的 prog 方法
doc["turtle4"].bind('click', Turtle4.prog)
</script>
</p>
<!-- turtle4 ends -->
<p></p>
<!-- turtle5 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle5 = beditor.editor("""# Turtle5 繪圖
# https://brython.info/gallery/turtle.html
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
t = turtle.Turtle("turtle")
t.speed(1)
t.forward(50)
print("Should be (50, 0):", t.position())
print("Should be 50: ", t.xcor())
print("Should be 0: ", t.ycor())
t.left(90)
t.color("blue")
t.speed(2)
t.fd(50)
print("Should be (50, 50):", t.pos())
print("Should be 225: ", t.towards(0, 0))
print("Should be 90: ", t.heading())
print("Should be approximately 71:", t.distance(0, 0))
# Draw the same square in three different angle modes
t.width(4)
print("Drawing using degrees - the default")
print("Heading should be 90: ", t.heading())
for i in range(4):
    t.forward(100)
    t.left(90)
print("Drawing using radians")
t.radians()
print("Heading should be pi/2: ", t.heading())
for i in range(4):
    t.forward(100)
    t.left(math.pi/2)
print("Drawing using gradients")
t.degrees(400)
print("Heading should be 100: ", t.heading())
for i in range(4):
    t.forward(100)
    t.left(100)
t.degrees()
t.width(1)
t.lt(90)
t.color("orange")
t.backward(50)
t.right(90)
t.color("green")
t.back(50)
t.rt(90)
t.color("red")
t.bk(50)
t.stamp()
t.speed(4)
t.color("black", "white")
t.goto(-100, 100)
t.stamp()
t.color("blue", "yellow")
t.setposition(0, 100)
t.stamp()
t.color("green", "white")
t.setpos(100, 100)
t.stamp()
t.speed(10)
t.color("orange")
t.sety(-100)
t.setx(-100)
t.stamp()
t.color("cyan")
t.home()
t.stamp()
t.color("green")
t.width(4)
t.setheading(180)
t.forward(150)
t.seth(90)
t.fd(20)
t.dot(30, "rgba(255, 0, 0, 0.2)")
t.color("red")
t.speed(0)
t.forward(30)
t.left(90)
t.circle(30)
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle5" 的按鈕點按時, 執行 Turtle5 物件中的 prog 方法
doc["turtle5"].bind('click', Turtle5.prog)
</script>
</p>
<!-- turtle5 ends -->
<p></p>
<!-- turtle6 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle6 = beditor.editor("""# Turtle6 繪圖
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
t = turtle.Turtle("turtle")
t.speed(10)
colors = ['red', 'purple', 'blue', 'green', 'orange']
for x in range(150):
    t.pencolor(colors[x % 5])
    t.width(x/10 + 1)
    t.forward(x)
    t.left(59)
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle6" 的按鈕點按時, 執行 Turtle6 物件中的 prog 方法
doc["turtle6"].bind('click', Turtle6.prog)
</script>
</p>
<!-- turtle6 ends -->
<p></p>
<!-- turtle7 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle7 = beditor.editor("""# Turtle7 繪圖
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
screen=turtle.Screen()    #making a canvas for drawing
screen.bgcolor('black')    #making canvas black
trtl=turtle.Turtle()  #making a turtle
trtl.pencolor('red')    #making colour of the pen red
trtl.pensize(5)    #choosing the size of pen nib 
trtl.speed(10)    #choosing the speed of drawing
# shape should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’
trtl.shape('turtle')   #choosing the shape of pen nib
trtl.forward(150)    #drawing a line of 150 pixels
trtl.right(90)    #asking turtle to turn 90 degrees
trtl.forward(150)    #drawing a line of 150 pixels
trtl.penup()    # preparing for moving pen without drawing
trtl.setpos(-140,-120)    # making the new position of the turtle
trtl.pendown()   # bringing the pen down for drawing again
trtl.pencolor('green')    # choosin the pen colour as green
trtl.write('Brython 烏龜繪圖', font=("Arial", 20, "bold"))    # chosing the font
trtl.penup()
trtl.ht()    # hiding the turtle from the screen
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle7" 的按鈕點按時, 執行 Turtle7 物件中的 prog 方法
doc["turtle7"].bind('click', Turtle7.prog)
</script>
</p>
<!-- turtle7 ends -->
<p></p>
<!-- turtle8 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle8 = beditor.editor("""# Turtle8 繪圖
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
wn = turtle.Screen() 
wn.bgcolor("black") 
skk = turtle.Turtle() 
skk.speed(10)
skk.shape("circle")
skk.color("blue") 
  
def sqrfunc(size): 
    for i in range(4): 
        skk.fd(size) 
        skk.left(90) 
        size = size-5
  
sqrfunc(146) 
sqrfunc(126) 
sqrfunc(106) 
sqrfunc(86) 
sqrfunc(66) 
sqrfunc(46) 
sqrfunc(26) 
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle8" 的按鈕點按時, 執行 Turtle8 物件中的 prog 方法
doc["turtle8"].bind('click', Turtle8.prog)
</script>
</p>
<!-- turtle8 ends -->
<p></p>
<!-- konva1 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Konva1 = beditor.editor("""# Konva1 繪圖
# 引用 https://konvajs.github.io/ 繪圖
from browser import document, html, window
width = 600
height = 400
konva = window.Konva
# Konva 必須在 canvas 繪圖, 從上方設定,  canvas id 為 "container"
stage = konva.Stage.new({
        "container": 'brython_div',
        "width": width,
        "height": height
    })
layer = konva.Layer.new()
rectX = stage.getWidth() / 2 - 50
rectY = stage.getHeight() / 2 - 25
box = konva.Rect.new({
        "x": rectX,
        "y": rectY,
        "width": 100,
        "height": 50,
        "fill": '#00D2FF',
        "stroke": 'black',
        "strokeWidth": 4,
        "draggable": True
    })
def f1():
    document.body.style.cursor = 'pointer'
    
def f2():
    document.body.style.cursor = 'default'
# add cursor styling
box.on('mouseover', f1())
box.on('mouseout', f2())
layer.add(box)
stage.add(layer)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "konva1" 的按鈕點按時, 執行 Konva1 物件中的 prog 方法
doc["konva1"].bind('click', Konva1.prog)
</script>
</p>
<!-- konva1 ends -->
<p></p>
<!-- ycqsort starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ycqsort = beditor.editor("""# Ycombinator quicksort example
Y = lambda f: lambda *args: f(Y(f))(*args)
quicksort = Y(lambda f:
    lambda x: (
        f([item for item in x if item < x[0]])
        + [y for y in x if x[0] == y]
        + f([item for item in x if item > x[0]])
    ) if x else [])
    
print(quicksort([1, 3, 5, 4, 1, 3, 2]))
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ycqsort" 的按鈕點按時, 執行 Ycqsort 物件中的 prog 方法
doc["ycqsort"].bind('click', Ycqsort.prog)
</script>
</p>
<!-- ycqsort ends -->
<p></p>
<!-- ball starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ball = beditor.editor("""# Ggame ball example
from ggame import (
    App, 
    Color, 
    LineStyle, 
    Sprite, 
    RectangleAsset, 
    ImageAsset,
    CircleAsset, 
    EllipseAsset, 
    PolygonAsset,
)
from browser import document as doc
from browser import html
# for site variable to check socket.gethostname() for image file location
import socket
# 引入既有的id="graphics-column" 標註
graphics_column = doc["graphics-column"]
# 建立內定名稱為 "ggame-canvas" 的 canvas 標註
canvas = html.CANVAS(width = 600, height = 100)
canvas.id = "ggame-canvas"
# 將 canvas 插入 gc 標註中
graphics_column <= canvas
# reverse - change the ball direction
def reverse(b):
    b.direction *= -1
# Set up function for handling screen refresh
def step():
    if ball.go:
        ball.x += ball.direction
        if ball.x + ball.width > myapp.width or ball.x < 0:
            ball.x -= ball.direction
            reverse(ball)
myapp = App()
# Three primary colors with no transparency (alpha = 1.0)
red = Color(0xff0000, 1.0)
green = Color(0x00ff00, 1.0)
blue = Color(0x0000ff, 1.0)
black = Color(0x000000, 1.0)
# define colors and line style
green = Color(0x00ff00, 1)
black = Color(0, 1)
noline = LineStyle(0, black)
# a rectangle asset and sprite to use as background
bg_asset = RectangleAsset(canvas.width, canvas.height, noline, green)
bg = Sprite(bg_asset, (0,0))
# when work with dynamic site
if socket.gethostname() == "localhost":
    site = ""
else:
    # when work with remote site
    site="./.."
ball_asset = ImageAsset(site+"/images/orb-150545_640.png")
ball = Sprite(ball_asset, (0, 0))
# Original image is too big. Scale it to 1/10 its original size
ball.scale = 0.1
# custom attributes
ball.direction = 7
ball.go = True
myapp.run(step)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ball" 的按鈕點按時, 執行 Ball 物件中的 prog 方法
doc["ball"].bind('click', Ball.prog)
</script>
</p>
<!-- ball ends -->
<p></p>
<!-- nfulist starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Nfulist = beditor.editor("""# nfulist
url = "https://nfulist.herokuapp.com/?semester=1092&courseno=2384&column=True"
data = open(url).read()
print(data)
'''
2021 spring:
0741 1a
0764 2a
0776 2b
2384 5j
'''
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "nfulist" 的按鈕點按時, 執行 Nfulist 物件中的 prog 方法
doc["nfulist"].bind('click', Nfulist.prog)
</script>
</p>
<!-- nfulist ends -->
<p></p>
<!-- clock1 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Clock1 = beditor.editor("""# clock1 in Brython
'''Code for the clock'''
# Line drawing
# 導入 doc
from browser import document as doc
from browser import html
import math
import time
import browser.timer
canvas = html.CANVAS(width = 300, height = 200)
canvas.id = "line_drawing"
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["line_drawing"]
ctx = canvas.getContext("2d")

sin, cos = math.sin, math.cos
width, height = 200, 200 # canvas dimensions
ray = 100 # clock ray

background = "SteelBlue"
digits = "#fff"
border = "blue"

def needle(angle, r1, r2):
    '''Draw a needle at specified angle in specified color.
    r1 and r2 are percentages of clock ray.
    '''
    x1 = width / 2 - ray * cos(angle) * r1
    y1 = height / 2 - ray * sin(angle) * r1
    x2 = width / 2 + ray * cos(angle) * r2
    y2 = height / 2 + ray * sin(angle) * r2
    ctx.beginPath()
    ctx.strokeStyle = "#fff"
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.stroke()

def set_clock():
    # erase clock
    ctx.beginPath()
    ctx.fillStyle = background
    ctx.arc(width / 2, height / 2, ray * 0.89, 0, 2 * math.pi)
    ctx.fill()

    # redraw hours
    show_hours()

    # print day
    now_time = time.time()
    now = time.localtime(now_time)
    microsecs = now_time - int(now_time)
    day = now.tm_mday
    ctx.font = "bold 14px Arial"
    ctx.textAlign = "center"
    ctx.textBaseline = "middle"
    ctx.fillStyle = "#000"
    ctx.fillText(day, width * 0.7, height * 0.5)

    # draw needles for hour, minute, seconds
    ctx.lineWidth = 2
    hour = now.tm_hour % 12 + now.tm_min / 60
    angle = hour * 2 * math.pi / 12 - math.pi / 2
    needle(angle, 0.05, 0.45)
    minute = now.tm_min
    angle = minute * 2 *math.pi / 60 - math.pi / 2
    needle(angle, 0.05, 0.7)
    ctx.lineWidth = 1
    second = now.tm_sec + microsecs
    angle = second * 2 * math.pi / 60 - math.pi / 2
    needle(angle, 0.05, 0.8)

def show_hours():
    ctx.beginPath()
    ctx.arc(width / 2, height / 2, ray * 0.05, 0, 2 * math.pi)
    ctx.fillStyle = digits
    ctx.fill()
    for i in range(1, 13):
        angle = i * math.pi / 6 - math.pi / 2
        x3 = width / 2 + ray * cos(angle) * 0.82
        y3 = height / 2 + ray * sin(angle) * 0.82
        ctx.font = "18px Arial"
        ctx.textAlign = "center"
        ctx.textBaseline = "middle"
        ctx.fillText(i, x3, y3)
    # cell for day
    ctx.fillStyle = "#fff"
    ctx.fillRect(width * 0.65, height * 0.47, width * 0.1, height * 0.06)

    ctx.beginPath()
ctx.arc(width / 2, height / 2, ray, 0, 2 * math.pi)
ctx.fillStyle = background
ctx.fill()

browser.timer.set_interval(set_clock, 100)
show_hours()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "clock1" 的按鈕點按時, 執行 Clock1 物件中的 prog 方法
doc["clock1"].bind('click', Clock1.prog)
</script>
</p>
<!-- clock1 ends -->
<p></p>
<!-- fourbar linkage starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Fourbar= beditor.editor("""# Fourbar Linkage Simulation
from browser import document, html
import math
import time
import browser.timer
 
class Coord(object):
    def __init__(self,x,y):
        self.x = x
        self.y = y
 
    def __sub__(self,other):
        # This allows you to substract vectors
        return Coord(self.x-other.x,self.y-other.y)
 
    def __repr__(self):
        # Used to get human readable coordinates when printing
        return "Coord(%f,%f)"%(self.x,self.y)
 
    def length(self):
        # Returns the length of the vector
        return math.sqrt(self.x**2 + self.y**2)
 
    def angle(self):
        # Returns the vector's angle
        return math.atan2(self.y,self.x)
 
def normalize(coord):
    return Coord(
        coord.x/coord.length(),
        coord.y/coord.length()
        )
 
def perpendicular(coord):
    # Shifts the angle by pi/2 and calculate the coordinates
    # using the original vector length
    return Coord(
        coord.length()*math.cos(coord.angle()+math.pi/2),
        coord.length()*math.sin(coord.angle()+math.pi/2)
        )
 
# 點類別
class Point(object):
    # 起始方法
    def __init__(self, x, y):
        self.x = x
        self.y = y
 
    # 繪製方法
    def drawMe(self, g, r):
        self.g = g
        self.r = r
        self.g.save()
        self.g.moveTo(self.x,self.y)
        self.g.beginPath()
        # 根據 r 半徑繪製一個圓代表點的所在位置
        self.g.arc(self.x, self.y, self.r, 0, 2*math.pi, True)
        self.g.moveTo(self.x,self.y)
        self.g.lineTo(self.x+self.r, self.y)
        self.g.moveTo(self.x, self.y)
        self.g.lineTo(self.x-self.r, self.y)
        self.g.moveTo(self.x, self.y)
        self.g.lineTo(self.x, self.y+self.r)
        self.g.moveTo(self.x, self.y)
        self.g.lineTo(self.x, self.y-self.r)
        self.g.restore()
        self.g.stroke()
 
    # 加入 Eq 方法
    def Eq(self, pt):
        self.x = pt.x
        self.y = pt.y
 
    # 加入 setPoint 方法
    def setPoint(self, px, py):
        self.x = px
        self.y = py
 
    # 加上 distance(pt) 方法, 計算點到 pt 的距離
    def distance(self, pt):
        self.pt = pt
        x = self.x - self.pt.x
        y = self.y - self.pt.y
        return math.sqrt(x * x + y * y)
 
    # 利用文字標示點的座標位置
    def tag(self, g):
        self.g = g
        self.g.beginPath()
        self.g.fillText("%d, %d"%(self.x, self.y),self.x, self.y)
        self.g.stroke()
 
 
# Line 類別物件
class Line(object):
 
    # 起始方法
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        # 直線的第一點, 設為線尾
        self.Tail = self.p1
        # 直線組成的第二點, 設為線頭
        self.Head = self.p2
        # 直線的長度屬性
        self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2))
 
    # setPP 以指定頭尾座標點來定義直線
    def setPP(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.Tail = self.p1
        self.Head = self.p2
        self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2))
 
    # setRT 方法 for Line, 應該已經確定 Tail 點, 然後以 r, t 作為設定 Head 的參考
    def setRT(self, r, t):
        self.r = r
        self.t = t
        x = self.r * math.cos(self.t)
        y = self.r * math.sin(self.t)
        self.Tail.Eq(self.p1)
        self.Head.setPoint(self.Tail.x + x,self.Tail.y + y)
 
    # getR 方法 for Line
    def getR(self):
        # x 分量與 y 分量
        x = self.p1.x - self.p2.x
        y = self.p1.y - self.p2.y
        return math.sqrt(x * x + y * y)
 
    # 根據定義 atan2(y,x), 表示 (x,y) 與 正 x 軸之間的夾角, 介於 pi 與 -pi 間
    def getT(self):
        x = self.p2.x - self.p1.x
        y = self.p2.y - self.p1.y
        if (math.fabs(x) < math.pow(10,-100)):
            if(y < 0.0):
                return (-math.pi/2)
            else:
                return (math.pi/2)
        else:
            return math.atan2(y, x)
 
    # setTail 方法 for Line
    def setTail(self, pt):
        self.pt = pt
        self.Tail.Eq(pt)
        self.Head.setPoint(self.pt.x + self.x, self.pt.y + self.y)
 
    # getHead 方法 for Line
    def getHead(self):
        return self.Head
 
    def getTail(self):
        return self.Tail
 
    def drawMe(self, g):
        self.g = g
        self.g.beginPath()
        self.g.moveTo(self.p1.x,self.p1.y)
        self.g.lineTo(self.p2.x,self.p2.y)
        self.g.stroke()
 
    def test(self):
        return ("this is pure test to Inherit")
 
 
class Link(Line):
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.length = math.sqrt(math.pow((self.p2.x - self.p1.x), 2) + math.pow((self.p2.y - self.p1.y), 2))
 
    #g context
    def drawMe(self, g):
        self.g = g
        hole = 5
        radius = 10
        length = self.getR()
        # alert(length)
        # 儲存先前的繪圖狀態
        self.g.save()
        self.g.translate(self.p1.x,self.p1.y)
        #alert(str(self.p1.x)+","+str(self.p1.y))
        #self.g.rotate(-((math.pi/2)-self.getT()))
        self.g.rotate(-math.pi*0.5 + self.getT())
        #alert(str(self.getT()))
        #self.g.rotate(10*math.pi/180)
        #this.g.rotate(-(Math.PI/2-this.getT()));
        # 必須配合畫在 y 軸上的 Link, 進行座標轉換, 也可以改為畫在 x 軸上...
        self.g.beginPath()
        self.g.moveTo(0,0)
        self.g.arc(0, 0, hole, 0, 2*math.pi, True)
        self.g.stroke()
        self.g.moveTo(0,length)
        self.g.beginPath()
        self.g.arc(0,length, hole, 0, 2*math.pi, True)
        self.g.stroke()
        self.g.moveTo(0,0)
        self.g.beginPath()
        self.g.arc(0,0, radius, 0, math.pi, True)
        self.g.moveTo(0+radius,0)
        self.g.lineTo(0+radius,0+length)
        self.g.stroke()
        self.g.moveTo(0,0+length)
        self.g.beginPath()
        self.g.arc(0, 0+length, radius, math.pi, 0, True)
        self.g.moveTo(0-radius,0+length)
        self.g.lineTo(0-radius,0)
        self.g.stroke()
        self.g.restore()
        '''
        self.g.beginPath()
        self.g.fillStyle = "red"
        self.g.font = "bold 18px sans-serif"
        self.g.fillText("%d, %d"%(self.p2.x, self.p2.y),self.p2.x, self.p2.y)
        self.g.stroke()
        '''
 
class Triangle(object):
    def __init__(self, p1, p2, p3):
        self.p1 = p1
        self.p2 = p2
        self.p3 = p3
 
    def getLenp3(self):
        p1 = self.p1
        ret = p1.distance(self.p2)
        return ret
 
    def getLenp1(self):
        p2 = self.p2
        ret = p2.distance(self.p3)
        return ret
 
    def getLenp2(self):
        p1 = self.p1
        ret = p1.distance(self.p3)
        return ret
 
    # 角度
    def getAp1(self):
        ret = math.acos(((self.getLenp2() * self.getLenp2() + self.getLenp3() * self.getLenp3()) - self.getLenp1() * self.getLenp1()) / (2* self.getLenp2() * self.getLenp3()))
        return ret
 
    #
    def getAp2(self):
        ret =math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp3() * self.getLenp3()) - self.getLenp2() * self.getLenp2()) / (2* self.getLenp1() * self.getLenp3()))
        return ret
 
    def getAp3(self):
        ret = math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp2() * self.getLenp2()) - self.getLenp3() * self.getLenp3()) / (2* self.getLenp1() * self.getLenp2()))
        return ret
 
    def drawMe(self, g):
        self.g = g
        r = 5
        # 繪出三個頂點
        self.p1.drawMe(self.g,r)
        self.p2.drawMe(self.g,r)
        self.p3.drawMe(self.g,r)
        line1 = Line(self.p1,self.p2)
        line2 = Line(self.p1,self.p3)
        line3 = Line(self.p2,self.p3)
        # 繪出三邊線
        line1.drawMe(self.g)
        line2.drawMe(self.g)
        line3.drawMe(self.g)
 
    # ends Triangle def
    # 透過三個邊長定義三角形
    def setSSS(self, lenp3, lenp1, lenp2):
        self.lenp3 = lenmidpt = Point(0, 0)
        self.lenp1 = lenp1
        self.lenp2 = lenp2
        self.ap1 = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2* self.lenp2 * self.lenp3))
        self.ap2 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2* self.lenp1 * self.lenp3))
        self.ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2* self.lenp1 * self.lenp2))
 
    # 透過兩個邊長與夾角定義三角形
    def setSAS(self, lenp3, ap2, lenp1):
        self.lenp3 = lenp3
        self.ap2 = ap2
        self.lenp1 = lenp1
        self.lenp2 = math.sqrt((self.lenp3 * self.lenp3 + self.lenp1 * self.lenp1) - 2* self.lenp3 * self.lenp1 * math.cos(self.ap2))
        #等於 SSS(AB, BC, CA)
 
    def setSaSS(self, lenp2, lenp3, lenp1):
        self.lenp2 = lenp2
        self.lenp3 = lenp3
        self.lenp1 = lenp1
        if(self.lenp1 > (self.lenp2 + self.lenp3)):
        #<CAB 夾角為 180 度, 三點共線且 A 介於 BC 之間
            ret = math.pi
        else :
            # <CAB 夾角為 0, 三點共線且 A 不在 BC 之間
            if((self.lenp1 < (self.lenp2 - self.lenp3)) or (self.lenp1 < (self.lenp3 - self.lenp2))):
                ret = 0.0
            else :
            # 透過餘絃定理求出夾角 <CAB 
                ret = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2 * self.lenp2 * self.lenp3))
        return ret
 
    # 取得三角形的三個邊長值
    def getSSS(self):
        temp = []
        temp.append( self.getLenp1() )
        temp.append( self.getLenp2() )
        temp.append( self.getLenp3() )
        return temp
 
    # 取得三角形的三個角度值
    def getAAA(self):
        temp = []
        temp.append( self.getAp1() )
        temp.append( self.getAp2() )
        temp.append( self.getAp3() )
        return temp
 
    # 取得三角形的三個角度與三個邊長
    def getASASAS(self):
        temp = []
        temp.append(self.getAp1())
        temp.append(self.getLenp1())
        temp.append(self.getAp2())
        temp.append(self.getLenp2())
        temp.append(self.getAp3())
        temp.append(self.getLenp3())
        return temp
    #2P 2L return mid P
    def setPPSS(self, p1, p3, lenp1, lenp3):
        temp = []
        self.p1 = p1
        self.p3 = p3
        self.lenp1 = lenp1
        self.lenp3 = lenp3
 
        #bp3 is the angle beside p3 point, cp3 is the angle for line23, p2 is the output
        line31 = Line(p3, p1)
        self.lenp2 = line31.getR()
        #這裡是求角3
        ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2 * self.lenp1 * self.lenp2))
        bp3 = line31.getT()
        cp3 = bp3 - ap3
        temp.append(p3.x + self.lenp1*math.cos(cp3))#p2.x
        temp.append(p3.y + self.lenp1*math.sin(cp3))#p2.y
        return temp
 
def tag(g, p):
    None
 
midpt = Point(0, 0)
tippt = Point(0, 0)
contour = []
# 執行繪圖流程, 注意 x, y 為 global variables
def draw():
    global theta, midpt, oldpt
    context.clearRect(0, 0, canvas.width, canvas.height)
    line1.drawMe(context)
    line2.drawMe(context)
    line3.drawMe(context)
    #triangle1.drawMe(context)
    #triangle2.drawMe(context)
    theta += dx
    p2.x = p1.x + line1.length*math.cos(theta*degree)
    p2.y = p1.y - line1.length*math.sin(theta*degree)
    p3.x, p3.y = triangle2.setPPSS(p2,p4,link2_len,link3_len)
    # 計算垂直單位向量
    a = Coord(p3.x, p3.y)
    b = Coord(p2.x, p2.y)
    normal = perpendicular(normalize(a-b))
    midpt.x = (p2.x + p3.x)/2
    midpt.y = (p2.y + p3.y)/2
    tippt.x = midpt.x + 150*normal.x
    tippt.y = midpt.y + 150*normal.y
    if theta < 360:
        contour.append((tippt.x, tippt.y))
    context.beginPath()
    context.moveTo(midpt.x, midpt.y)
    context.lineTo(tippt.x, tippt.y)
    # 利用 fillRect 繪製一個長寬各 1 單位的正方形
    for i in range(len(contour)):
        context.fillRect(contour[i][0], contour[i][1], 1, 1)
    context.stroke()
    #p1.tag(context)
 
# 以上為相關函式物件的定義區
# 全域變數
# 幾何位置輸入變數
x=10
y=10
r=10
 
# 畫布與繪圖內容
# 其他輸入變數
theta = 0
degree = math.pi/180.0
dx = 2
dy = 4
 
#set p1.p2.p3.p4 position
lift = 10
p1 =  Point(150,100+lift)
p2 =  Point(150,200+lift)
p3 =  Point(300,300+lift)
p4 =  Point(350,100+lift)
 
#accord position create link
line1 =  Link(p1,p2)
line2 =  Link(p2,p3)
line3 =  Link(p3,p4)
line4 =  Link(p1,p4)
line5 =  Link(p2,p4)
 
link2_len = p2.distance(p3)
link3_len = p3.distance(p4)
 
#link2_len = line1.getR()
#link3_len = line3.getR()
#alert(str(link2_len)+','+str(link3_len))
 
triangle1 =  Triangle(p1,p2,p4)
triangle2 =  Triangle(p2,p3,p4)
 
# 視窗載入時執行內容
# 繪圖畫布設定

canvas = html.CANVAS(width = 600, height = 450)
canvas.id = "line_drawing"
brython_div = document["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = document["line_drawing"]
context = canvas.getContext("2d")
 
# 座標轉換, 移動 canvas.height 並且 y 座標變號, 也就是將原點座標移到畫面左下角
context.translate(0,canvas.height)
context.scale(1,-1)
 
#以間隔 20 micro seconds 重複呼叫 draw()
browser.timer.set_interval(draw,20)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "fourbar" 的按鈕點按時, 執行 Fourbar 物件中的 prog 方法
doc["fourbar"].bind('click', Fourbar.prog)
</script>
</p>
<!-- fourbar linkage ends -->
<p><button id="keyword">Keyword</button><button id="ex1">Ex1</button><button id="ex2">Ex2</button><button id="ex3">Ex3</button><button id="ex4">Ex4</button><button id="forloop">Ex5</button><button id="guess">Guess</button><button id="autoguess">Autoguess</button><button id="lottery">大樂透</button><button id="weleadlottery">威力彩</button><button id="temp">Temp</button><button id="draw">Draw</button><button id="flag">Flag</button><button id="bezier">Bezier</button><button id="clock1">clock1</button><button id="fourbar">Fourbar</button><button id="turtle1">Turtle1</button><button id="turtle2">Turtle2</button><button id="turtle3">Turtle3</button><button id="turtle4">Turtle4</button><button id="turtle5">Turtle5</button><button id="turtle6">Turtle6</button><button id="turtle7">Turtle7</button><button id="turtle8">Turtle8</button><button id="konva1">Konva1</button><button id="bunny">Bunny</button><button id="ball">Ball</button><button id="spur">Spur</button><button id="ycqsort">Ycqsort</button><button id="nfulist">nfulist</button><button id="clear">Clear</button></p>
<h4>參考資料:</h4>
<p><a href="/downloads/turtle_intro.pdf">turtle_intro.pdf</a></p>
<p><a href="/downloads/turtle_intro2.pdf">turtle_intro2.pdf</a></p>
<p>其他擷取程式的方式: <a href="http://mde.tw/2017springvcp/blog/web-based-python.html">http://mde.tw/2017springvcp/blog/web-based-python.html</a></p>
<h4>Qt for Python</h4>
<p><a href="https://www.qt.io/qt-for-python">https://www.qt.io/qt-for-python</a></p>
<p><a href="https://build-system.fman.io/python-qt-tutorial">https://build-system.fman.io/python-qt-tutorial</a></p>
<p><a href="https://build-system.fman.io/pyqt-exe-creation/">https://build-system.fman.io/pyqt-exe-creation/</a></p>
<p><a href="https://github.com/mherrmann/fbs-tutorial">https://github.com/mherrmann/fbs-tutorial</a></p>
<p><a href="https://www.ics.com/blog/we-ported-qt-app-c-python-heres-what-happened">https://www.ics.com/blog/we-ported-qt-app-c-python-heres-what-happened</a></p>
<p>
<script src="/static/konva.min.js"></script>
</p>
<div id="container"></div>
<p>
<script>
var width = window.innerWidth;
    var height = window.innerHeight;
    // globals
    var curveLayer, lineLayer, anchorLayer, quad, bezier;
    function updateDottedLines() {
        var q = quad;
        var b = bezier;
        var quadLine = lineLayer.get('#quadLine')[0];
        var bezierLine = lineLayer.get('#bezierLine')[0];
        quadLine.setPoints([q.start.attrs.x, q.start.attrs.y, q.control.attrs.x, q.control.attrs.y, q.end.attrs.x, q.end.attrs.y]);
        bezierLine.setPoints([b.start.attrs.x, b.start.attrs.y, b.control1.attrs.x, b.control1.attrs.y, b.control2.attrs.x, b.control2.attrs.y, b.end.attrs.x, b.end.attrs.y]);
        lineLayer.draw();
    }
    function buildAnchor(x, y) {
        var anchor = new Konva.Circle({
            x: x,
            y: y,
            radius: 20,
            stroke: '#666',
            fill: '#ddd',
            strokeWidth: 2,
            draggable: true
        });
        // add hover styling
        anchor.on('mouseover', function() {
            document.body.style.cursor = 'pointer';
            this.setStrokeWidth(4);
            anchorLayer.draw();
        });
        anchor.on('mouseout', function() {
            document.body.style.cursor = 'default';
            this.setStrokeWidth(2);
            anchorLayer.draw();
        });
        anchor.on('dragend', function() {
            drawCurves();
            updateDottedLines();
        });
        anchorLayer.add(anchor);
        return anchor;
    }
    function drawCurves() {
        var context = curveLayer.getContext();
        context.clear();
        // draw quad
        context.beginPath();
        context.moveTo(quad.start.attrs.x, quad.start.attrs.y);
        context.quadraticCurveTo(quad.control.attrs.x, quad.control.attrs.y, quad.end.attrs.x, quad.end.attrs.y);
        context.setAttr('strokeStyle', 'red');
        context.setAttr('lineWidth', 4);
        context.stroke();
        // draw bezier
        context.beginPath();
        context.moveTo(bezier.start.attrs.x, bezier.start.attrs.y);
        context.bezierCurveTo(bezier.control1.attrs.x, bezier.control1.attrs.y, bezier.control2.attrs.x, bezier.control2.attrs.y, bezier.end.attrs.x, bezier.end.attrs.y);
        context.setAttr('strokeStyle', 'blue');
        context.setAttr('lineWidth', 4);
        context.stroke();
    }
    var stage = new Konva.Stage({
        container: 'container',
        width: width,
        height: height
    });
    anchorLayer = new Konva.Layer();
    lineLayer = new Konva.Layer();
    // curveLayer just contains a canvas which is drawn
    // onto with the existing canvas API
    curveLayer = new Konva.Layer();
    var quadLine = new Konva.Line({
        dash: [10, 10, 0, 10],
        strokeWidth: 3,
        stroke: 'black',
        lineCap: 'round',
        id: 'quadLine',
        opacity: 0.3,
        points: [0, 0]
    });
    var bezierLine = new Konva.Line({
        dash: [10, 10, 0, 10],
        strokeWidth: 3,
        stroke: 'black',
        lineCap: 'round',
        id: 'bezierLine',
        opacity: 0.3,
        points: [0, 0]
    });
    // add dotted line connectors
    lineLayer.add(quadLine);
    lineLayer.add(bezierLine);
    quad = {
        start: buildAnchor(60, 30),
        control: buildAnchor(240, 110),
        end: buildAnchor(80, 160)
    };
    bezier = {
        start: buildAnchor(280, 20),
        control1: buildAnchor(530, 40),
        control2: buildAnchor(480, 150),
        end: buildAnchor(300, 150)
    };
    // keep curves insync with the lines
    anchorLayer.on('beforeDraw', function() {
        drawCurves();
        updateDottedLines();
    });
    stage.add(curveLayer);
    stage.add(lineLayer);
    stage.add(anchorLayer);
    drawCurves();
    updateDottedLines();
</script>
</p>
<h3>Brython</h3>
<p><a href="https://github.com/brython-dev/brython/wiki/How-Brython-works">https://github.com/brython-dev/brython/wiki/How-Brython-works</a> </p>
<p>上一頁的網際 Python 是透過 <a href="https://brython.info/">https://brython.info/</a> 完成, 當使用者在網頁中執行 Python 程式時, 透過 Brython 即時轉為 Javascript 後執行.</p>
<p>Brython Google Group: <a href="https://groups.google.com/g/brython">https://groups.google.com/g/brython</a></p>
<h4>Introduction guide to Brython:</h4>
<p style="padding-left: 30px;"><a href="https://stackabuse.com/an-introductory-guide-to-brython">https://stackabuse.com/an-introductory-guide-to-brython</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/introduction-to-brython/">https://www.geeksforgeeks.org/introduction-to-brython/</a></p>
<p style="padding-left: 30px;"><a href="https://realpython.com/brython-python-in-browser/">https://realpython.com/brython-python-in-browser/</a></p>
<h4>Game in Brython:</h4>
<p style="padding-left: 30px;"><a href="https://medium.com/swlh/sick-of-javascript-just-use-browser-python-4b9679efe08b">https://medium.com/swlh/sick-of-javascript-just-use-browser-python-4b9679efe08b</a></p>
<h4>Calculator in Brython:</h4>
<p><a href="https://codehs.com/tutorial/zach/Intro_to_Brython_-_Calculator">https://codehs.com/tutorial/zach/Intro_to_Brython_-_Calculator</a></p>
<p><a href="/downloads/calculator.html">calculator.html</a></p>
<p><iframe height="300" src="/downloads/calculator.html" width="640"></iframe></p>
<h4>calculator.html 原始碼:</h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8"&gt;
        &lt;!-- 直接從 cdn 導入 brython 程式庫 --&gt;
        &lt;script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3.8.8/brython.min.js"&gt;&lt;/script&gt;
&lt;!-- 設定適合用於 calculator 的 table td 格式 --&gt;
&lt;style&gt;
*{
    font-family: sans-serif;
    font-weight: normal;
    font-size: 1.1em;
}
td{
    width: 80px;
    background-color: #ccc;
    padding: 10px 30px 10px 30px;
    border-radius: 0.2em;
    text-align: center;
    cursor: default;
}
#result{
    border-color: #000;
    border-width: 1px;
    border-style: solid;
    padding: 10px 30px 10px 30px;
    text-align: right;
}
&lt;/style&gt;
    &lt;/head&gt;

    &lt;body onload="brython()"&gt;
        &lt;script type="text/python"&gt;
            from browser import document, html
            # calc 為 html table
            calc = html.TABLE()
            calc &lt;= html.TR(html.TH(html.DIV("0", id="result"), colspan=3) +
                            html.TD("C"))
            lines = ["789/", "456*", "123-", "0.=+"]
            
            calc &lt;= (html.TR(html.TD(x) for x in line) for line in lines)
            
            document &lt;= calc
            
            result = document["result"] # direct acces to an element by its id
            
            def action(event):
                """Handles the "click" event on a button of the calculator."""
                # The element the user clicked on is the attribute "target" of the
                # event object
                element = event.target
                # The text printed on the button is the element's "text" attribute
                value = element.text
                if value not in "=C":
                    # update the result zone
                    if result.text in ["0", "error"]:
                        result.text = value
                    else:
                        result.text = result.text + value
                elif value == "C":
                    # reset
                    result.text = "0"
                elif value == "=":
                    # execute the formula in result zone
                    try:
                        result.text = eval(result.text)
                    except:
                        result.text = "error"
            
            # Associate function action() to the event "click" on all buttons
            for button in document.select("td"):
                button.bind("click", action)
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</pre>
<h4>延伸練習:</h4>
<p style="padding-left: 30px;">請將上述網際加減乘除計算機, 以 Brython(Browser Python) 改為<a href="https://www.eeweb.com/tools/online-scientific-calculator/">網際工程用計算機</a>.</p><h3>網際模擬程式</h3>
<p><a href="https://mdecp2018.github.io/finalproject-bgx/content/%E7%B6%B2%E9%9A%9B%E6%A8%A1%E6%93%AC%E7%A8%8B%E5%BC%8F.html">網際模擬程式原始網頁</a></p>
<p><a href="https://github.com/mdecourse/webgame">https://github.com/mdecourse/webgame</a> 是一套源自<a href="https://github.com/tiggerntatie/brython-server"> https://github.com/tiggerntatie/brython-server</a> 的網際模擬程式庫, 適合用來開發線上遊戲或與工程設計相關的網際程式.</p>
<p>之前的 js 程式庫都採用遠端資料, 目前將各程式庫升級為最新版本, 且改為自帶程式庫.</p>
<p>參考的網際程式庫: <a href="https://github.com/tiggerntatie/ggame">https://github.com/tiggerntatie/ggame</a> </p>
<p>由於此 ggame 程式庫使用</p>
<p>jquery-3.3.1.min.js - <a href="https://jquery.com/">https://jquery.com/</a> <br/>jquery-ui.1.12.1.min.js - <a href="https://jqueryui.com/">https://jqueryui.com/</a> <br/>pixi-4.8.2.min.js - <a href="http://www.pixijs.com/">http://www.pixijs.com/</a> <br/>buzz-1.2.1.js - <a href="http://buzz.jaysalvat.com/">http://buzz.jaysalvat.com/</a> <br/>brython3.9.4.js - <a href="https://brython.info/">https://brython.info/</a> <br/>brython_stdlib3.9.4.js</p>
<p>因此使用者必須對上述程式庫有些了解後, 再深入研究如何使用  ggame 程式庫開發專案套件.</p>
<p>使用者可以登入 github.com 後, 連結至 <a href="https://github.com/mdecourse/webgame">https://github.com/mdecourse/webgame</a> 選擇將 webgame 倉儲作為 template 後新增網際程式倉儲, 之後可以利用 Leo Editor 進行後續程式開發.</p>
<h3>Spacewar</h3>
<p><a href="https://mdecp2018.github.io/finalproject-bgx/content/%E7%B6%B2%E9%9A%9B%E6%A8%A1%E6%93%AC%E7%A8%8B%E5%BC%8F.html">2018 網際模擬程式</a></p>
<p><a href="/downloads/ggame-readthedocs-io-en-latest.pdf">ggame documentation.pdf</a></p>
<p>another game engine in brython: <a href="https://github.com/mdecourse/brython-game-engine-demo">https://github.com/mdecourse/brython-game-engine-demo</a></p>
<script src="/static/brython.js"></script>
<!-- check if we need brython_stdlib.js or not -->
<p></p>
<!-- <script src="/static/brython_stdlib.js"></script> -->
<p></p>
<!-- for ggame -->
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<!-- brython_modules.js is ggame brython library converted into javascript -->
<script src="/downloads/brython_modules.js"></script>
<!-- start brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
<!-- ggame will show on graphics-column markup -->
<div id="graphics-column"></div>
<script type="text/python3">
from ggame import App, Sprite, ImageAsset, Frame, CircleAsset
from ggame import SoundAsset, Sound, TextAsset, Color
import math
from time import time
from browser import document as doc
from browser import html
import socket

# bring in the id="graphics-column" markup
graphics_column = doc["graphics-column"]
# create "ggame-canvas" canvas markup
canvas = html.CANVAS(width = 600, height = 600)
canvas.id = "ggame-canvas"
# insert canvas into the graphics_column div markup
graphics_column <= canvas

# can we get the execution mode through brython
# when work with dynamic site
if socket.gethostname() == "localhost":
    site = ""
else:
    # when work with remote site
    site="./.."

class Stars(Sprite):

    asset = ImageAsset(site+"/images/starfield.jpg")
    width = 512
    height = 512

    def __init__(self, position):
        super().__init__(Stars.asset, position)

# Sun 類別繼承自 Sprite
class Sun(Sprite):
    
    width = 80
    height = 76
    asset = ImageAsset(site+"/images/sun.png", Frame(0, 0, width, height))
    
    def __init__(self, position):
        super().__init__(Sun.asset, position, CircleAsset(32))
        self.mass = 30*1000
        self.fxcenter = 0.5
        self.fycenter = 0.5

class Vector:
    
    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    def mag(self):
        return math.sqrt(self.x*self.x + self.y*self.y)
    
    def unit(self):
        r = self.mag()
        if r == 0:
            return Vector(0,0)
        else:
            return Vector(self.x/r, self.y/r)

class GravitySprite(Sprite):
    
    G = 50.0

    def __init__(self, asset, collisionasset, position, velocity, sun):
        super().__init__(asset, position, collisionasset)
        self.vx = velocity[0]
        self.vy = velocity[1]
        self.sun = sun
        self.fxcenter = 0.5
        self.fycenter = 0.5
        self.rrate = 0.0
        self.thrust = 0.0
        self.mass = 1.0
        
    def step(self, T, dT):
        #dt = 0.033
        R = Vector(self.sun.x-self.x, self.sun.y-self.y)
        #Ur = R.unit()
        r = R.mag()
        Ux, Uy = R.x/r, R.y/r
        ag = GravitySprite.G*self.sun.mass/R.mag()**2
        Agx, Agy = Ux*ag, Uy*ag
        vx, vy = self.vx, self.vy
        At = self.thrust/self.mass
        dt2o2 = dT*dT*0.5
        self.vx = self.vx + (Agx - At*math.sin(self.rotation))* dT
        self.vy = self.vy + (Agy - At*math.cos(self.rotation))* dT
        self.x = self.x + self.vx * dT + Agx*dt2o2
        self.y = self.y + self.vy * dT + Agy*dt2o2


class Bullet(GravitySprite):
    
    asset = ImageAsset(site+"/images/blast.png", Frame(0,0,8,8), 8)
    collisionasset = CircleAsset(4)
    pewasset = SoundAsset(site+"/downloads/pew1.mp3")
    
    def __init__(self, app, sun):
        super().__init__(Bullet.asset, Bullet.collisionasset, (0,0), (0,0), sun)
        self.visible = False
        self.firing = False
        self.time = 0
        self.pew = Sound(Bullet.pewasset)
        self.pew.volume = 10
        
    def shoot(self, position, velocity, time):
        self.position = position
        self.vx = velocity[0]
        self.vy = velocity[1]
        self.time = time
        self.visible = True
        self.firing = True
        self.pew.play()

    def step(self, T, dT):
        self.time = self.time - dT
        if self.visible:
            if self.time <= 0:
                self.visible = False
            else:
                self.nextImage(True)
                super().step(T, dT)
                if self.collidingWith(self.sun):
                    self.visible = False
                    ExplosionSmall(self.position)
                else:
                    ships = self.collidingWithSprites(Ship1)
                    ships.extend(self.collidingWithSprites(Ship2))
                    for ship in ships:
                        if not self.firing and ship.visible:
                            ship.explode()
                            self.visible = False
                    if not ships:
                        self.firing = False


class HealthBar:
    
    def __init__(self, indicatorasset, initvalue, position, app):
        self.sprites = [Sprite(indicatorasset, (0,app.height-75)) for i in range(initvalue)]
        for s in self.sprites:
            s.scale = 0.4
        width = self.sprites[0].width
        if position == 'left':
            x = 50
            step = width+5
        else:
            x = app.width - 50 - width
            step = -width-5
        for s in self.sprites:
            s.x = x
            x = x + step
        self.restart()
        
    def restart(self):
        for s in self.sprites:
            s.visible = True
        self.count = len(self.sprites)
        
    def dead(self):
        return self.count == 0
        
    def killone(self):
        if self.count > 0:
            self.count =  self.count - 1
            self.sprites[self.count].visible = False


class Ship(GravitySprite):

    R = 2.0
    bullets = 6
    healthcount = 6
    reappearasset = SoundAsset(site+"/downloads/reappear.mp3")
    
    def __init__(self, asset, app, position, velocity, sun):
        self.bullets = []
        for i in range(Ship.bullets):
            self.bullets.append(Bullet(app, sun))
        collisionasset = CircleAsset(40) 
        super().__init__(asset, collisionasset, position, velocity, sun)
        self.initposition = position
        self.initvelocity = self.vx, self.vy
        self.initrotation = self.rotation
        self.app = app
        self.mass = 1.0
        self.imagex = 0
        self.reappear = Sound(Ship.reappearasset)
        self.reappear.volume = 40
        self.waitspawn = 0
        self.respawnplayed = False
        healthpos = 'left' if position[0] < app.width/2 else 'right'
        self.health = HealthBar(asset, Ship.healthcount, healthpos, app)
        self.dead = False

    def registerKeys(self, keys):
        commands = ["left", "right", "forward", "fire"]
        self.keymap = dict(zip(keys, commands))
        [self.app.listenKeyEvent("keydown", k, self.controldown) for k in keys]
        [self.app.listenKeyEvent("keyup", k, self.controlup) for k in keys]

    def shootvector(self):
        vel = 150
        xv = vel*(-math.sin(self.rotation))
        yv = vel*(-math.cos(self.rotation))
        return xv + self.vx, yv + self.vy
        

    def controldown(self, event):
        if self.visible:
            command = self.keymap[event.key]
            if command == "left":
                self.rrate = Ship.R
            elif command == "right":
                self.rrate = -Ship.R
            elif command == "forward":
                self.thrust = 40.0
                self.imagex = 1 # start the animated rockets
                self.setImage(self.imagex)
            elif command == "fire":
                for bullet in self.bullets:
                    if bullet.time <= 0:
                        bullet.shoot(self.position, self.shootvector(), 10)
                        break
                        
            
    def controlup(self, event):
        command = self.keymap[event.key]
        if command in ["left", "right"]:
            self.rrate = 0.0
        elif command == "forward":
            self.thrust = 0.0
            self.imagex = 0 # stop the animated rockets
            self.setImage(self.imagex)
            
    def step(self, T, dT):
        if self.waitspawn > 0:
            self.waitspawn = self.waitspawn - dT
            if self.waitspawn < 1 and not self.respawnplayed:
                self.reappear.play()
                self.respawnplayed = True
            if self.waitspawn <= 0:
                self.reset()
        for bullet in self.bullets:
            bullet.step(T, dT)
        if self.visible:
            super().step(T, dT)
            self.rotation = self.rotation + self.rrate * dT
            if self.collidingWith(self.sun):
                self.explode()
            if self.thrust != 0.0:
                self.imagex = self.imagex + 1    # animate the rockets
                if self.imagex == 4:
                    self.imagex = 1
                self.setImage(self.imagex)
            if (self.x < -100 or self.x > self.app.width + 100 or
                self.y < -100 or self.y > self.app.height + 100):
                self.explode()
        

    def explode(self):
        self.visible = False
        ExplosionBig(self.position)
        self.waitspawn = 5

    def reset(self):
        if not self.health.dead():
            self.position = self.initposition
            self.vx, self.vy = self.initvelocity
            self.rotation = self.initrotation
            self.visible = True
            self.respawnplayed = False
            self.health.killone()
            for bullet in self.bullets:
                bullet.time = 0
        else:
            self.dead = True

    def newgame(self):
        self.health.restart()
        self.dead = False
        self.reset()
            
class Ship1(Ship):
    
    asset = ImageAsset(site+"/images/four_spaceship_by_albertov_with_thrust.png", 
        Frame(227,0,292-227,125), 4, 'vertical')
        
    def __init__(self, app, position, velocity, sun):
        super().__init__(Ship1.asset, app, position, velocity, sun)
        self.registerKeys(["a", "d", "w", "space"])
        
    def step(self, T, dT):
        super().step(T, dT)
        if self.visible:
            collides = self.collidingWithSprites(Ship2)
            if len(collides):
                if collides[0].visible:
                    collides[0].explode()
                    self.explode()
        
class Ship2(Ship):
    
    asset = ImageAsset(site+"/images/four_spaceship_by_albertov_with_thrust.png", 
        Frame(0,0,86,125), 4, 'vertical')
        
    def __init__(self, app, position, velocity, sun):
        super().__init__(Ship2.asset, app, position, velocity, sun)
        self.registerKeys(["left arrow", "right arrow", "up arrow", "enter"])

    def step(self, T, dT):
        super().step(T, dT)
        if self.visible:
            collides = self.collidingWithSprites(Ship1)
            if len(collides):
                if collides[0].visible:
                    collides[0].explode()
                    self.explode()

class ExplosionSmall(Sprite):
    
    asset = ImageAsset(site+"/images/explosion1.png", Frame(0,0,128,128), 10)
    boomasset = SoundAsset(site+"/downloads/explosion1.mp3")
    
    def __init__(self, position):
        super().__init__(ExplosionSmall.asset, position)
        self.image = 0
        self.center = (0.5, 0.5)
        self.boom = Sound(ExplosionSmall.boomasset)
        self.boom.play()
        
    def step(self):
        self.setImage(self.image//2)  # slow it down
        self.image = self.image + 1
        if self.image == 20:
            self.destroy()

class ExplosionBig(Sprite):
    
    asset = ImageAsset(site+"/images/explosion2.png", Frame(0,0,4800/25,195), 25)
    boomasset = SoundAsset(site+"/downloads/explosion2.mp3")
    
    def __init__(self, position):
        super().__init__(ExplosionBig.asset, position)
        self.image = 0
        self.center = (0.5, 0.5)
        self.boom = Sound(ExplosionBig.boomasset)
        self.boom.play()
        
    def step(self):
        self.setImage(self.image//2)  # slow it down
        self.image = self.image + 1
        if self.image == 50:
            self.destroy()

class Spacewar(App):
    
    strings = {'winner': 'WINNER!',
        'tie': 'TIE!',
        'space': 'Press SPACE to play.',
        'left': 'AWD\nSpace to FIRE',
        'right': 'Arrow Keys\nEnter to FIRE',
        }

    def __init__(self):
        super().__init__()
        for x in range(self.width//Stars.width + 1):
            for y in range(self.height//Stars.height + 1):
                Stars((x*Stars.width, y*Stars.height))
        self.sun = Sun((self.width/2, self.height/2))
        self.ship1 = Ship1(self, (self.width/2-140,self.height/2), (0,-120), self.sun)
        self.ship2 = Ship2(self, (self.width/2+140,self.height/2), (0,120), self.sun)
        self.tsprites = {k:Sprite(TextAsset(text=v, width=200, align='center',style='20px Arial', fill=Color(0xff2222,1))) 
            for k, v in Spacewar.strings.items()}
        self.tsprites['winner'].visible = False
        self.tsprites['winner'].y = self.height/2
        self.tsprites['tie'].visible = False
        self.tsprites['tie'].position = (self.width/2 - 100, self.height/2 + 50)
        self.tsprites['space'].position = (self.width/2 - 100, self.height*3/4)
        self.tsprites['left'].position = (self.width/4 - 50, self.height/2)
        self.tsprites['right'].position = (self.width*3/4 - 50, self.height/2)
        self.state = 'instructions'
        self.listenKeyEvent('keydown', 'space', self.space)

    def space(self, evt):
        if self.state in ['instructions', 'gameover']:
            for t in self.tsprites.values():
                t.visible = False
            self.state = 'playing'
            self.Tlast = time()
            evt.consumed = True
            self.ship1.newgame()
            self.ship2.newgame()

        
    def step(self):
        explosions = self.getSpritesbyClass(ExplosionSmall)
        for explosion in explosions:
            explosion.step()
        explosions = self.getSpritesbyClass(ExplosionBig)
        for explosion in explosions:
            explosion.step()
        if self.state == 'instructions':
            self.tsprites['space'].visible = True
            self.tsprites['left'].visible = True
            self.tsprites['right'].visible = True
        elif self.state == 'playing':
            T = time()
            dT = T-self.Tlast
            self.Tlast = T
            self.ship1.step(T, dT)
            self.ship2.step(T, dT)
            if self.ship1.dead or self.ship2.dead:
                self.state = 'gameover'
        elif self.state == 'gameover':
            self.tsprites['space'].visible = True
            if self.ship1.dead and self.ship2.dead:
                self.tsprites['tie'].visible = True
            else:
                self.tsprites['winner'].visible = True
                self.tsprites['winner'].x = self.width*3/4-50 if self.ship1.dead else self.width/4-50

app = Spacewar()
app.run()
</script>
<h3>Flask</h3>
<p>Server 端 (Flask):</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, render_template, request, jsonify
 
# Initialize the Flask application
app = Flask(__name__)
 
@app.route('/')
def index():
    return render_template('index.html')
 
@app.route('/add_numbers', methods=['POST'])
def add_numbers():
    a = request.form.get('a', 0, type=int)
    b = request.form.get('b', 0, type=int)
    #return jsonify(result = a+b)
    # 必須傳回字串?
    return str(a+b)
 
if __name__ == '__main__':
    app.run(debug=True)</pre>
<p>Client 端 (Brython):</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;
    &lt;link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css" rel="stylesheet"&gt;
    &lt;script src="http://brython.info/src/brython_dist.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body onload="brython()"&gt;
  &lt;script type="text/python"&gt;
    from browser import document
    from browser import ajax
    # https://www.brython.info/static_doc/en/ajax.html
     
    def on_complete(req):
        document["txt_area"] .clear()
        if req.status==200 or req.status==0:
            document["txt_area"] &lt;= req.text
        else:
            document["txt_area"] &lt;= "error "+req.text
             
    def get(url):  
        # req 從 ajax 模組中的 ajax 類別建立案例, 為一個 ajax 物件        
        req = ajax.ajax()
        # a 為 id="A" 輸入欄位中所輸入的值
        a = document['A'].value
        # b 為 id="B" 輸入欄位中所輸入的值        
        b = document['B'].value
        # ajax 物件中的 bind 方法, 第一個輸入變數為 evt, 'complete' 表示 ajax 從伺服器取值完成後, 執行 on_complete 函式
        req.bind('complete', on_complete)
        req.open('POST', url, True)
        req.set_header('content-type','application/x-www-form-urlencoded')
        req.send({"a": a, "b":b}) 
     
    # 使用者按下 id="calculate" 按鈕, 將會執行上述 get("/add_numbers") 函式
    document['calculate'].bind('click',lambda ev:get('/add_numbers'))
 
&lt;/script&gt;
   
    &lt;div class="container"&gt;
      &lt;div class="header"&gt;
        &lt;h3 class="text-muted"&gt;Brython ajax example&lt;/h3&gt;
      &lt;/div&gt;
      &lt;div&gt;
    &lt;input type="text" id="A" size="5" name="a"&gt; +
    &lt;input type="text" id ="B" size="5" name="b"&gt; =
    &lt;div id="txt_area"&gt;&lt;/div&gt;
    &lt;p&gt;&lt;button id="calculate"&gt;calculate server side&lt;/button&gt;
      &lt;/form&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>
<h4>學習資源:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/scissor-rock-paper">https://github.com/mdecourse/scissor-rock-paper</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/scissor-rock-paper2">https://github.com/mdecourse/scissor-rock-paper2</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/wcms-scrum1">https://github.com/mdecourse/wcms-scrum1</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/chiamingyen/pygrouf">https://github.com/chiamingyen/pygrouf</a></p>
<p></p>
<h3>Flutter</h3>
<p>Flutter 是 2015 年由 Google 提出的手機跨 iOS 與 Android 平台應用程式開發框架, 第一版釋出時間為 2017 年 5 月. Flutter 框架除了可以開發手機程式外, 也可用於單機或網際程式開發.</p>
<p>Windows 64 位元環境中的可攜 Flutter 跨平台 App 開發系統:</p>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/1X8icOyPgABAkKHYaDLXPSoy7U7nyxqzW/view?usp=sharing">下載 Flutter_portable_20210707.7z</a> (下載 4.7 GB, 解開壓縮後約 20GB)</p>
<p>可攜系統中的 Android sdk 容量約 7.5 GB, Flutter 與 Dart 容量約 1.6 GB, Java jdk 容量約 200MB. vscode 約 530 MB, home_mdecourse 目錄下含手機 emulator 檔案容量約 9.3 GB.</p>
<p>利用 Visual Studio Code 開發 Flutter App 之前, 必須啟動 BlueStacks (<a href="https://drive.google.com/file/d/1X8icOyPgABAkKHYaDLXPSoy7U7nyxqzW/view?usp=sharing">Flutter_portable_20210707.7z</a> 中 data/ref 目錄有 BlueStacks 第 4 版安裝檔案, 而最新的版本可以從 <a href="https://www.bluestacks.com">https://www.bluestacks.com</a> 下載), 並且啟用 Android Debug Bridge (ADB) 功能, 之後在 Flutter 隨身系統啟動後, 在命令列視窗中執行 adb connect localhost:5555, 就可以直接利用 BlueStacks 作為虛擬手機介面進行 Flutter App 的執行.</p>
<p>當 Visual Studio Code 執行時, 目前必須要啟用 IPv4 網路協定才可正常建立 App 並安裝於 BlueStacks 手機介面中, 之後必須再看看是否能夠直接在 IPv6 網路協定下正常運作.</p>
<p>以下為 Flutter 可攜系統所需的啟動設定檔內容:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_290865">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">REM for flutter
set java_home=%Disk%:\java\jdk8u222-b10
set ANDROID_SDK_home=%Disk%:\home_mdecourse
set GRADLE_USER_home=%Disk%:\home_mdecourse
set ANDROID_SDK_ROOT=%Disk%:\android\sdk
set PUB_CACHE=%Disk%:\home_mdecourse\pub
 
REM set _JAVA_OPTIONS=-Duser.home=%HOME%
set path_flutter=%Disk%:\android\sdk\tools;%Disk%:\android\sdk\tools\bin;%Disk%:\android\sdk\platform-tools;%Disk%:\flutter\bin;%Disk%:\flutter\bin\cache\dart-sdk\bin;
 
set path_vscode=%Disk%:\vscode;</pre>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="http://mde.tw/cp2019/content/Task2.html">http://mde.tw/cp2019/content/Task2.html</a></p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cp2019/content/Flutter.html">http://mde.tw/cp2019/content/Flutter.html</a></p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cp2019/content/Flutter%20Web.html">http://mde.tw/cp2019/content/Flutter%20Web.html</a></p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cp2019/content/DartLang.html">http://mde.tw/cp2019/content/DartLang.html</a></p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cp2019/content/DartLang.html">http://mde.tw/cp2019/content/DartLang.html</a></p>
</div>
</div><h3>Rust</h3>
<h4>Rust 中文入門:</h4>
<p style="padding-left: 30px;"><a href="https://rust-lang.tw/book-tw/title-page.html">https://rust-lang.tw/book-tw/title-page.html</a> (<a href="https://github.com/rust-tw/book-tw">on Github</a>, 利用 <a href="https://github.com/rust-tw/book-tw/blob/zh_tw/.github/workflows/main.yml">Github Actions</a> (<a href="https://github.com/features/actions">何謂 Github Actions</a>?), 以 <a href="https://github.com/rust-lang/mdBook">mdbook</a> 轉為 html)</p>
<p style="padding-left: 30px;">Rust 編譯系統也包含在 <a href="https://mde.tw">KMOLab</a> <a href="http://mde.tw/cmstemplate/content/%E5%8F%AF%E6%94%9C%E7%B3%BB%E7%B5%B1.html">可攜系統</a>中.</p>
<p>2021 計算機程式主要透過網際 Brython 讓學員利用 Python 解決相關機械設計過程可能遭遇的問題, 接下來則將透過 Flask 編寫網際程式, 目的除了進行網際內容管理外, 也希望能夠在 Server 部署 CoppeliaSim headless server, 並利用影像串流將機電系統模擬的場景, 傳輸至使用者瀏覽器中, 以便進行後續的虛實整合模擬與控制, 其中 Rust 首先將扮演的角色為: <a href="https://bheisler.github.io/post/calling-rust-in-python/">讓 Python 能夠呼叫 Rust 所編寫的動態程式庫</a>, 或者採用 Rust 與 Python 程式能夠雙向溝通的 <a href="https://pyo3.rs/v0.14.1/">PyO3</a>, 如此 <a href="https://github.com/KmolYuan/metaheuristics-nature-rs">https://github.com/KmolYuan/metaheuristics-nature-rs</a> 中的演化運算程式庫, 便可以讓伺服器端的 Python 程式進行機械設計相關的演化運算.</p>
<p>當然, 目前 <a href="https://mde.tw">KMOLab</a> 主要的網際程式都採用 Python + Flask 建置, 但之後也可以嘗試將部分網際程式轉由 Rust + <a href="https://actix.rs/">Actix Web</a> 建置.</p>
<hr/>
<p>From <a href="https://research.mozilla.org/rust/">https://research.mozilla.org/rust/</a>, Rust is an open-source systems programming language that focuses on speed, memory safety and parallelism. Developers are using Rust to create a wide range of new software applications, such as game engines, operating systems, file systems, browser components and simulation engines for virtual reality.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/8EPsnf_ZYU0" title="YouTube video player" width="560"></iframe></p>
<p>在 Windows 操作系統中學習 Rust, 首先需要一個能夠編譯 Rust 程式的<a href="http://mde.tw/cmstemplate/content/%E5%8F%AF%E6%94%9C%E7%B3%BB%E7%B5%B1.html">可攜系統</a>.</p>
<p>有了可攜系統之後再逐步從 <a href="http://stevedonovan.github.io/rust-gentle-intro/">http://stevedonovan.github.io/rust-gentle-intro/</a> 了解 Rust 並非簡單易學, 而是當機械設計工程師在熟悉利用 Python 建立網際服務與最佳化設計運算後, 必須利用數值分析方法提升運算效益時, Rust 會是不錯的選擇之一. 具備學習動機之後, 可以先看一下 <a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>, 之後再導入諸如 <a href="https://github.com/KmolYuan/metaheuristics-nature-rs">https://github.com/KmolYuan/metaheuristics-nature-rs</a> 的程式庫, 配合伺服器中的網際 Python 程式進行設計運算.</p>
<p>User Forum: <a href="https://users.rust-lang.org/">https://users.rust-lang.org/</a></p>
<p>Reddit: <a href="https://www.reddit.com/r/rust/">https://www.reddit.com/r/rust/</a></p>
<h4>Rust and Webassembly:</h4>
<p style="padding-left: 30px;"><a href="https://rustwasm.github.io/docs/book/">https://rustwasm.github.io/docs/book/</a></p>
<p style="padding-left: 30px;"><a href="https://ithelp.ithome.com.tw/articles/10206128">https://ithelp.ithome.com.tw/articles/10206128</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/yewstack/yew">https://github.com/yewstack/yew</a></p>
<p style="padding-left: 60px;"><a href="http://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/">http://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/</a></p>
<p style="padding-left: 30px;"><a href="https://erwabook.com/">https://erwabook.com/</a></p>
<h4>GUI for Webassembly:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/emilk/egui">https://github.com/emilk/egui</a></p>
<p style="padding-left: 60px;"><a href="https://reposhub.com/rust/gui/emilk-emigui.html">https://reposhub.com/rust/gui/emilk-emigui.html</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/tauri-apps/tauri">https://github.com/tauri-apps/tauri</a></p>
<h4>Why Python users may need Rust:</h4>
<p style="padding-left: 30px;"><a href="https://gitter.im/rustpython/Lobby">https://gitter.im/rustpython/Lobby</a></p>
<p style="padding-left: 30px;"><a href="https://searchapparchitecture.techtarget.com/news/252496553/Google-Microsoft-back-Python-and-Rust-programming-languages">https://searchapparchitecture.techtarget.com/news/252496553/Google-Microsoft-back-Python-and-Rust-programming-languages</a></p>
<p style="padding-left: 30px;"><a href="https://developers.redhat.com/blog/2017/11/16/speed-python-using-rust#why_does_it_matter_for_a_python_developer_">Speed up your python using Rust</a></p>
<p style="padding-left: 30px;"><a href="https://blog.yasking.org/a/rust-create-dll-using-by-python-nodejs.html">https://blog.yasking.org/a/rust-create-dll-using-by-python-nodejs.html</a></p>
<p style="padding-left: 30px;"><span style="background-color: #ffff99;">Python interpreter written in Rust</span>: <a href="https://github.com/RustPython/RustPython">https://github.com/RustPython/RustPython</a></p>
<p style="padding-left: 60px;"><a href="https://archive.fosdem.org/2019/schedule/event/rust_python/attachments/slides/2846/export/events/attachments/rust_python/slides/2846/RustPython_fosdem2019.pdf">https://archive.fosdem.org/2019/schedule/event/rust_python/attachments/slides/2846/export/events/attachments/rust_python/slides/2846/RustPython_fosdem2019.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://towardsdatascience.com/learning-rust-by-converting-python-to-rust-259e735591c6">https://towardsdatascience.com/learning-rust-by-converting-python-to-rust-259e735591c6</a></p>
<p style="padding-left: 30px;"><a href="https://www.vortexa.com/insight/integrating-rust-into-python">https://www.vortexa.com/insight/integrating-rust-into-python</a></p>
<p style="padding-left: 30px;"><a href="https://codeburst.io/how-to-use-rust-to-extend-python-360174ee5819">https://codeburst.io/how-to-use-rust-to-extend-python-360174ee5819</a></p>
<p style="padding-left: 30px;"><a href="https://pyoxidizer.readthedocs.io/en/v0.9.0/rust_porting.html">https://pyoxidizer.readthedocs.io/en/v0.9.0/rust_porting.html</a></p>
<p style="padding-left: 30px;"><a href="https://www.infinyon.com/blog/2021/03/python-client/">https://www.infinyon.com/blog/2021/03/python-client/</a></p>
<p style="padding-left: 30px;"><a href="https://www.codingame.com/playgrounds/54888/rust-for-python-developers---operators/introduction">https://www.codingame.com/playgrounds/54888/rust-for-python-developers---operators/introduction</a></p>
<p><a href="https://github.com/rust-lang/book">https://github.com/rust-lang/book</a></p>
<p><a>http://stevedonovan.github.io/rust-gentle-intro/</a></p>
<h4>Web framework:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/actix/actix-web">https://github.com/actix/actix-web</a></p>
<p style="padding-left: 30px;"><a href="https://actix.rs/docs/getting-started/">https://actix.rs/docs/getting-started/</a></p>
<h4>cargo.toml</h4>
<pre class="brush:rust;auto-links:false;toolbar:false" contenteditable="false">[package]
name = "hello-actix"
version = "0.1.0"
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]

actix-web = "3"</pre>
<h4>main.rs</h4>
<pre class="brush:rust;auto-links:false;toolbar:false" contenteditable="false">use actix_web::{get, post, web, App, HttpResponse, HttpServer, Responder};

#[get("/")]
async fn hello() -&gt; impl Responder {
    HttpResponse::Ok()
        .content_type("text/html; charset=utf-8")
        .body("速度很快!!")
}

#[post("/echo")]
async fn echo(req_body: String) -&gt; impl Responder {
    HttpResponse::Ok().body(req_body)
}

async fn manual_hello() -&gt; impl Responder {
    HttpResponse::Ok().body("Hey there!")
}


#[actix_web::main]
async fn main() -&gt; std::io::Result&lt;()&gt; {
    HttpServer::new(|| {
        App::new()
            .service(hello)
            .service(echo)
            .route("/hey", web::get().to(manual_hello))
    })
    .bind("127.0.0.1:8080")?
    .run()
    .await
}
</pre>
<h4>The Rust Programming Language:</h4>
<p style="padding-left: 30px;"><a href="https://doc.rust-lang.org/stable/book/">https://doc.rust-lang.org/stable/book/</a></p>
<p style="padding-left: 30px;"><a href="https://lise-henry.github.io/books/trpl2.pdf">https://lise-henry.github.io/books/trpl2.pdf</a></p>
<p><a href="https://github.com/PyO3/pyo3">https://github.com/PyO3/pyo3</a> for Rust Version 1.41.1 (2020-02-27) and up.</p>
<h4>其他:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/lalrpop/lalrpop">https://github.com/lalrpop/lalrpop</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/gluon-lang/gluon">https://github.com/gluon-lang/gluon</a></p>
<h4>學習資源:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/KmolYuan/metaheuristics-nature-rs">https://github.com/KmolYuan/metaheuristics-nature-rs</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/KmolYuan/metaheuristics">https://github.com/KmolYuan/metaheuristics</a> (Cython)</p>
<p style="padding-left: 60px;"><a href="https://github.com/kmollee/algorithm">https://github.com/kmollee/algorithm</a> (Python and Cython)</p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-3-540-73190-0">Introduction to Genetic Algorithms</a> (校園網路中下載電子書)</p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-1-4615-5237-6">Multiobjective Scheduling by Genetic Algorithms</a> (校園網路中下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://fasterthanli.me/articles/a-half-hour-to-learn-rust">https://fasterthanli.me/articles/a-half-hour-to-learn-rust</a></p>
<p style="padding-left: 30px;"><a href="https://tourofrust.com/00_zh-tw.html">https://tourofrust.com/00_zh-tw.html</a></p>
<p style="padding-left: 30px;"><a href="https://towardsdatascience.com/you-want-to-learn-rust-but-you-dont-know-where-to-start-fc826402d5ba">https://towardsdatascience.com/you-want-to-learn-rust-but-you-dont-know-where-to-start-fc826402d5ba</a></p>
<p style="padding-left: 30px;"><a href="https://rust-lang-nursery.github.io/rust-cookbook/intro.html">https://rust-lang-nursery.github.io/rust-cookbook/intro.html</a></p>
<p style="padding-left: 30px;"><a href="https://dhghomon.github.io/easy_rust/">https://dhghomon.github.io/easy_rust/</a></p>
<p style="padding-left: 30px;"><a href="https://serokell.io/blog/rust-guide#data-ownership-model">https://serokell.io/blog/rust-guide#data-ownership-model</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/zF34dRivLOw" title="YouTube video player" width="560"></iframe></p><h3>Haskell</h3>
<p><a href="https://pandoc.org/">https://pandoc.org/</a> 就是採用 Haskell 編寫.</p>
<p><a href="https://serokell.io/blog/10-reasons-to-use-haskell">https://serokell.io/blog/10-reasons-to-use-haskell</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-4480-7">Practical Haskell</a> (校園網路中下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-3739-7">Practical Web Development with Haskell</a> (校園中下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-6251-0">Beginning Haskell</a> (校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-4507-1">Haskell Quick Syntax Reference</a> (校園網路下載電子書)</p><h2>RoboDK</h2>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/nv7mOBDA_Z8" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/dkRaf5n3OKs" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/3EqzMzszMV0" title="YouTube video player" width="560"></iframe></p>
<h2>開發範例</h2>
<h4>平面機構分析與合成:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/ps2020">https://github.com/mdecourse/ps2020</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/YOnLdzrLivM" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ZAGrFV1jCdk" title="YouTube video player" width="560"></iframe></p>
<h4>Python GUI with Serial port communication:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/Pyquino">https://github.com/mdecourse/Pyquino</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/R26R_07rkIc" title="YouTube video player" width="560"></iframe></p>
<p></p>
<h3>網際程式</h3>
<h4>An re-introduction to HTTP cookies:</h4>
<p style="padding-left: 30px;"><a href="https://www.valentinog.com/blog/cookies/">https://www.valentinog.com/blog/cookies/</a></p>
<p>以下程式主要在結合 Flask 與 Fossil SCM 的登入 cookie 設定, 兩台 server 必須屬於同一個 domain name.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask
from flask import make_response, request, redirect
import requests
# for app.secret_key
import os

app = Flask(__name__)
# 使用 session 必須要設定 secret_key
secret_key = os.urandom(24).hex()
app.secret_key = secret_key

@app.route('/')
def hello_world():
    with requests.Session() as s:
        url = 'https://fossil.kmol.info/u/yen/login'
        post_var = {'u': 'username', 'p': 'password'}
        headers = {'X-Requested-With': 'XMLHttpRequest'}
        result = s.post(url, data = post_var, headers = headers)
        cookie = s.cookies.get_dict()
        key = list(cookie.keys())[0]
        value = cookie[key]
        response = make_response(redirect(url))
        response.set_cookie(key, value)
        return response
        
if __name__ == '__main__':
    app.run()</pre>
<h4>Python and SQLite:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/thombashi/SimpleSQLite">https://github.com/thombashi/SimpleSQLite</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/codewithlennylen/Python-SQLite-Tutorials">https://github.com/codewithlennylen/Python-SQLite-Tutorials</a></p>
<h3>FossilPy</h3>
<p><a href="https://github.com/gumblex/fossilpy">https://github.com/gumblex/fossilpy</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sqlite3
con = sqlite3.connect('kmol.fossil')
cur = con.cursor()

# this is the login user through flask Oauth2 login
username = "yen"

# check if login name existed
# pw field is the password
cur.execute("select pw from user where login='" + username + "';")
password = cur.fetchall()

if len(password) == 0:
    print("account is not created!")
    # we may need to create account for this login user
else:
    # the fetched data is a list with tuple inside
    print(password[0][0])
    # we will need the user account and password to get login cookie
    # we will use the account/password to login through flask connection

con.close()</pre>
<p>當 Flask Oauth2 server 與 Fossil SCM 同在一台主機上共用 domain name 時, 可以利用下列程式, 讓使用者透過 Oauth2 登入 Fossil SCM 倉儲:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask
from flask import make_response, redirect
# for creating session
import requests
# for generating random secret_key
import os

app = Flask(__name__)
secret_key = os.urandom(24).hex()
app.secret_key = secret_key

@app.route('/')
def hello_world():
    with requests.Session() as s:
        url = 'https://fossil.kmol.info/u/yen/login'
        post_var = {'u': 'yen', 'p': 'fossil'}
        headers = {'X-Requested-With': 'XMLHttpRequest'}
        result = s.post(url, data = post_var, headers = headers)
        cookie = s.cookies.get_dict()
        key = list(cookie.keys())[0]
        value = cookie[key]

        response = make_response(redirect(url))
        response.set_cookie(key, value)
        return response
        

if __name__ == '__main__':
    app.run()
    </pre>
<p></p>
<h3>Delta</h3>
<p>Delta format 的應用說明:</p>
<p style="padding-left: 30px;">Suppose we have some text value a, and user has changed it to value b. Using delta function we can get a compressed delta value d that we can store and keep it along with the new text value b. If later user wants to see the previous version of text, we can use deltainv(b, d) to get the previous value a. If we keep all consequtive deltas we can use deltainv multiple times to get any of the earlier text versions.</p>
<p>原始的 <a href="https://fossil-scm.org/home/doc/tip/www/delta_format.wiki">Fossil SCM Delta</a> 以 C 編寫.</p>
<p>以下則以 setuptools 編譯為 Python 動態連結程式庫.</p>
<h4>Python Fossil Delta:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/ggicci/python-fossil-delta">https://github.com/ggicci/python-fossil-delta</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import fossil_delta

def main():
    # 使用者在改版過程將 abcdef 改為 abc
    # 當下透過 delta algorithm 對兩者取 delta
    delta = fossil_delta.create_delta(b'abc', b'abcdef')
    # 之後透過 delta 運算給定 delta 與目前的版本, 可以取得先前的版本內容
    out = fossil_delta.apply_delta(b'abc', delta)
    print(out)  # --&gt; abcdef</pre>
<p>以及用 Rust 改寫.</p>
<h4>Rust Fossil Delta:</h4>
<p style="padding-left: 30px;"><a href="https://crates.io/crates/fossil-delta">https://crates.io/crates/fossil-delta</a></p>
<p style="padding-left: 30px;">其中包含 <a href="https://leoeditor.com/">Leo Editor</a> 的應用.</p>
<p>將 <a href="https://github.com/ggicci/python-fossil-delta/blob/master/src/fossil_delta/delta.c">delta.c</a> 透過</p>
<p>setup.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from setuptools import setup

setup(
    name='python-fossil-delta',
    version='18.11.27',
    description='Delta compression algorithm from fossil SCM',
    long_description=open('README.md', 'rt').read(),
    url='https://github.com/ggicci/python-fossil-delta',
    author='Ggicci',
    author_email='ggicci@163.com',
    license='MIT',
    keywords='fossil-delta compression algorithm',
    setup_requires=['cffi&gt;=1.11.5'],
    package_dir={'': 'src'},
    packages=['fossil_delta'],
    package_data={
        'fossil_delta': ['*.h', '*.c', 'build/*.py'],
    },
    cffi_modules=[
        'src/fossil_delta/build/fossil_delta_build.py:ffibuilder',
    ],
    install_requires=['cffi&gt;=1.11.5'],
    platforms='any',
)
</pre>
<p>編譯為 dll, 可以為 Python 程式呼叫運用.</p>
<h3>DSL</h3>
<h4>Domain Specific Language:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/lark-parser/lark">https://github.com/lark-parser/lark</a></p>
<p style="padding-left: 30px;"><a href="http://blog.erezsh.com/how-to-write-a-dsl-in-python-with-lark/">http://blog.erezsh.com/how-to-write-a-dsl-in-python-with-lark/</a></p>
<h2>CPP</h2>
<p><a href="/get_page/DSL/Guide to Scientific Computing in C++">Guide to Scientific Computing in C++</a> (校園網路中下載電子書)</p>
<p><a href="https://drive.google.com/file/d/1m6cmWu9AZhkBj6wFn9IiJlShcpGbz05g/view?usp=sharing">msys64_20210419.7z</a> (下載 3.5GB, 解開壓縮後 12GB)</p>
<p style="padding-left: 30px;">功能: <a href="https://www.msys2.org/">Msys2</a> 安裝</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pacman -S mingw-w64-x86_64-toolchain
pacman -Sy mingw-w64-x86_64-qt5
pacman -Sy mingw-w64-x86_64-qt5-static
pacman -Sy mingw-w64-x86_64-ffmpeg
pacman -Sy mingw-w64-x86-64-cmake</pre>
<p><a href="https://drive.google.com/file/d/17M7Ro9NO2mmycvwOuK-10yYgs2oxFwEB/view?usp=sharing">msys64_20210419_clean.7z</a> (下載 87MB , 解開壓縮後 374MB)</p>
<p style="padding-left: 30px;">功能: 尚未安裝任何 Package 的 <a href="https://www.msys2.org/">Msys2</a> 系統.</p>
<p></p><h1>課程主題</h1>
<p>建立可攜系統在解決 ____ 問題?</p>
<h4>建立可攜程式系統:</h4>
<p style="padding-left: 30px;">從<a href="http://mde.tw/cmstemplate/content/%E5%8F%AF%E6%94%9C%E7%B3%BB%E7%B5%B1.html">可攜系統</a>中選擇所需組合, 搭建可用於維護個人倉儲與網站內容用之隨身程式系統.</p>
<p style="padding-left: 30px;">維護學習倉儲與網站:</p>
<p style="padding-left: 30px;">Portablekmol_base - 每一個 portablekmol 可攜程式系統都必須包括, 其中內含啟動隨身與關閉隨身系統的批次檔案與對應的 home 目錄.</p>
<p style="padding-left: 30px;"><a href="https://www.scintilla.org/SciTE.html">SciTE</a> - 程式與文件編輯器, 經過設定, 可用來解譯 Python, Lua 與 ANSI C 程式.</p>
<p style="padding-left: 30px;"><a href="https://github.com/ShareX/ShareX/releases">ShareX</a> - Windows 電腦畫面取影像或拍攝操作影片用之開放源工具, 應該要設法用 <a href="https://www.qt.io/qt-for-python">Qt for Python</a> 改寫, 其主要核心程式為開放源的 <a href="https://github.com/FFmpeg/FFmpeg">ffmpeg</a>, <a href="https://github.com/ShareX/ShareX/releases">ShareX</a> 利用 C# 建立其操作流程之 GUI 功能視窗介面.</p>
<p style="padding-left: 30px;"><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/zoomit">Zoomit</a> - 用於拍攝操作影片縮放畫面螢幕之工具.</p>
<p style="padding-left: 30px;"><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer">Process Explorer</a> - 用於 Windows Process 檢視與控管之工具.</p>
<p style="padding-left: 30px;"><a href="https://www.python.org/">Python</a> - 用於維護個人靜態網頁與動態網頁之程式解譯系統, 也用於進行 GUI 套件與網際程式開發, 或最佳化及數值分析運算.</p>
<p style="padding-left: 60px;">為了啟動最新版的 CMSiMDE 動態網站, Python 需要安裝 pyopenssl 模組: pip install pyopenssl.</p>
<p style="padding-left: 30px;"><a href="https://git-scm.com/downloads">Portablegit</a> - Git 分散式版次管理系統工具.</p>
<p style="padding-left: 30px;"><a href="https://www.putty.org/">Putty</a> - 提供 sftp, ssh 與 key 控管及網路傳檔或遠端登入工具.</p>
<p style="padding-left: 30px;"><a href="https://portableapps.com/apps/internet/filezilla_portable">Filezilla</a> - 提供 GUI 模式之 sftp 網路傳檔工具.</p>
<p style="padding-left: 30px;"><a href="https://sourceforge.net/projects/xming/">Xming</a> - Windows X server.</p>
<p style="padding-left: 30px;"><a href="https://portableapps.com/apps/music_video/obs-studio-portable">Portable OBS</a> - 可攜網路串流平台, 可與 Youtube 直播結合, 將直播內容存於 Youtube 直播影片系統中.</p>
<p style="padding-left: 30px;"><a href="https://robodk.com/index">RoboDK</a> - 工業級機械手臂在線與離線模擬與控制系統, 提供 Python API 程式介面, 可讓使用者直觀學習 Python 程式語法, 進而學習如何操控工業級機械手臂執行自動化操作流程.</p>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> - 開放源機電系統模擬與控制整合平台, 提供 Lua 與 Python API 程式控制介面, 可近端或遠端控制模擬中的機電系統.</p>
<p style="padding-left: 30px;"><a href="https://www.msys2.org/">Msys2</a> - 可在 Windows 採用與 Mac 及 Linux 操作系統相同的 C/C++ 程式編譯流程, 主要目的在開發可跨各種操作系統的機械設計相關套件與應用程式.</p>
<p style="padding-left: 30px;"><a href="https://bellard.org/tcc/">TCC</a> - 可與 <a href="https://www.scintilla.org/SciTE.html">SciTE</a> 結合, 用於簡單 ANSI C 程式的類解譯執行.</p>
<p style="padding-left: 30px;"><a href="https://www.lua.org/">Lua</a> - 主要用於 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 機電系統與模擬, 也可用於<a href="http://mde.tw/lab/downloads/lua/index.html">網際程式開發</a>.</p>
<p style="padding-left: 30px;"><a href="https://github.com/Range-Software/range3">Range3</a> - 小型開放源有限元素分析套件.</p>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com/">Webots</a> - 開放源機電系統模擬與控制平台, 其特色是採用 VRML 2.0 延伸格式建立零組件模型, 除具備網際介面外, 也可讓使用者透過程式方法與各種參數式電腦輔助設計系統結合, 直接進行機電系統的零組件轉檔, 無需中間經由人工再次進行機電模擬系統組立.</p>
<p style="padding-left: 30px;"><a href="https://miktex.org/">MikTeX</a> - <a href="https://www.latex-project.org/">LaTeX</a> 文件編譯套件, 可與 <a href="https://github.com/features/actions">Github Actions</a> 結合在近端或雲端編譯使用者所建立的協同 LaTeX 文件.</p>
<p style="padding-left: 30px;"><a href="https://www.rust-lang.org/">Rust</a> - 二十一世紀工程師的 C++ 程式語言.</p>
<p>建立倉儲與網站, 在解決 ____ 問題?</p>
<h4>建立課程學習倉儲與網頁:</h4>
<p style="padding-left: 30px;">本課程所有學員都必須建立 <a href="https://github.com/">github</a> (若 <a href="https://gitlab.com">gitlab</a> 已開放一般用戶使用 <a href="https://docs.gitlab.com/ee/user/project/pages/">gitlab pages</a>, 則需同時建立 <a href="https://gitlab.com">gitlab</a> 帳號) 與 <a href="https://www.heroku.com/">Heroku</a> 帳號, 目的在將課程學習歷程, 記錄在分散式版次管理系統中.</p>
<p style="padding-left: 30px;">除了雲端主機外, 各學員必須學會如何利用 <a href="https://www.virtualbox.org/">Virtualbox</a> 上的 <a href="https://ubuntu.com/">Ubuntu</a> 虛擬主機, 將雲端分散式版次管理系統上的內容, 同步至自行架設的 <a href="https://gogs.io/">GOGS</a> (或 <a href="https://github.com/go-gitea/gitea">Gitea</a>) 與 <a href="https://www.fossil-scm.org">Fossil SCM</a> 分散式版次管理系統.</p>
<p>Fossil SCM 的出現, 在解決 ____ 問題?</p>
<h4>Fossil SCM 手冊巡禮:</h4>
<p style="padding-left: 30px;"><a href="https://www.fossil-scm.org/home/doc/trunk/www/index.wiki">https://www.fossil-scm.org/home/doc/trunk/www/index.wiki</a></p>
<p style="padding-left: 30px;">Git 與 Fossil SCM 倉儲之間的內容同步, Fossil SCM 系統應用.</p>
<p>在網際介面學習簡單的 Python 語法, 在解決 ____ 問題?</p>
<h4>利用網際介面與可攜系統學習 Python 程式語法:</h4>
<ol>
<li>了解如合透過 <a href="https://brython.info/">Brython</a>, 在網頁中編寫並執行 Python 程式.</li>
<li>了解如何建立簡單的<a href="http://mde.tw/cp2021/content/Brython.html">網際計算機</a>.</li>
<li>延伸簡單的<a href="http://mde.tw/cp2021/content/Brython.html">網際計算機</a>, 建立工程用計算機.</li>
<li>了解如何在網際環境, 利用 Python 進行 2D 繪圖.</li>
<li>延伸<a href="https://cadlab.mde.tw/post/wang-ji-ji-jie-she-ji-2d-hui-tu.html">網際 2D 繪圖</a>, 完成正齒輪齒形繪製.</li>
<li>延伸網際正齒輪齒形繪製, 完成齒輪減速機<a href="https://github.com/mdecourse/wcms-scrum1">齒面寬設計</a>運算與囓合圖.</li>
<li>Python 與 <a href="https://robodk.com/index">RoboDK</a></li>
</ol>
<p></p>
<h2>倉儲與網頁</h2>
<p>本課程網頁的倉儲位於:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/cp2021.git">https://github.com/mdecourse/cp2021.git</a> - <a href="https://mde.tw/cp2021">Github Pages</a></p>
<p style="padding-left: 30px;"><a href="https://gitlab.com/mdecourse/cp2021.git">https://gitlab.com/mdecourse/cp2021.git</a> - <a href="https://mdecourse.gitlab.io/cp2021/">Gitlab Pages</a></p>
<p style="padding-left: 30px;"><a href="https://bitbucket.org/mdecourse/cp2021.git">https://bitbucket.org/mdecourse/cp2021.git</a> -Bitbucket (<a href="https://support.atlassian.com/bitbucket-cloud/docs/publishing-a-website-on-bitbucket-cloud/">如何</a>建立一般網頁, Pages 則必須<a href="https://marketplace.atlassian.com/apps/1212525/pages-for-bitbucket-server?tab=overview&amp;hosting=datacenter">付費</a>)</p>
<p style="padding-left: 30px;"><a href="https://git.heroku.com/cp2021.git">https://git.heroku.com/cp2021.git</a> (cp2021 ~ cp2025 -- heroku2 At Mde dot TW)</p>
<p>將同一份資料的改版提交同步至 Github, Gitlab, Bitbucket 與 Heroku:</p>
<p>Github 上的代號為 origin, 對應至 https://github.com/mdecourse/cp2021.git</p>
<p>git remote add gitlab https://gitlab.com/mdecourse/cp2021.git</p>
<p>git remote add bitbucket https://mdecourse@bitbucket.org/mdecourse/cp2021.git</p>
<p>heroku login 之後 heroku git:remote -a cp2021 (即 git remote add heroku <a href="https://git.heroku.com/cp2021.git">https://git.heroku.com/cp2021.git</a>)</p>
<p>以上設定與改版資料同步至四種雲端系統後, 若僅一人執行開發, 則相關內容連同近端倉儲, 共計有 5 個備份版本.</p>
<p>若專案牽涉 n 人協同, 則每一個時段都將會有至少 n + 4 個備份版本.</p>
<h4>課程練習:</h4>
<p style="padding-left: 30px;">CMSiMDE 倉儲的靜態網站該如何設定, 才能分別在 Github, Gitlab, Bitbucket 與 Heroku 平台上進行伺服?</p>
<p style="padding-left: 30px;">註: Gitlab 與 Bitbucket pages 並非可免費使用. Github pages 也可能只有針對教育帳號能免費使用.</p>
<p style="padding-left: 30px;">CMSiMDE 倉儲的靜態網站該如何在 Fossil SCM 主機中進行伺服?</p>
<p style="padding-left: 30px;">基礎知識:</p>
<p style="padding-left: 60px;">何謂倉儲 (repository)?</p>
<p style="padding-left: 60px;">何謂靜態網頁 (static web site)? 那麼有動態網頁 (dynamic web site)嗎?</p>
<p style="padding-left: 60px;">何謂(電腦)伺服 (serving)?</p>
<p style="padding-left: 60px;">何謂 Fossil SCM？</p><h3>Why Git</h3>
<p><a href="https://asmehackathon2020.github.io/">https://asmehackathon2020.github.io/</a></p>
<p><a href="https://sassafras13.github.io/Gitwiththeflow/">https://sassafras13.github.io/Gitwiththeflow/</a></p>
<p><a href="https://github.com/m2n037/awesome-mecheng">https://github.com/m2n037/awesome-mecheng</a></p>
<p><a href="https://github.com/topics/mechanical-engineering">https://github.com/topics/mechanical-engineering</a></p>
<p><a href="https://www.bosch.com/stories/bringing-open-source-to-mechanical-engineering/">https://www.bosch.com/stories/bringing-open-source-to-mechanical-engineering/</a></p>
<p><a href="https://towardsdatascience.com/transition-from-mechanical-engineer-to-machine-learning-engineer-or-data-scientist-786b9887537">https://towardsdatascience.com/transition-from-mechanical-engineer-to-machine-learning-engineer-or-data-scientist-786b9887537</a></p>
<p><a href="https://git-scm.com/book/zh-tw/v2">Git Book</a> (中文)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-5313-7">Beginning Git and Github</a> (英文)</p>
<p>What can Git do?</p>
<p>Remember all those problems we tried to solve at the beginning of this chapter? Well, Git can solve them all. It can even solve problems you didn’t know you had!</p>
<p>First, it works great with tracking changes. You can</p>
<ol>
<li>Go back and forth between versions</li>
<li>Review the differences between those versions</li>
<li>Check the change history of a file (<a href="https://git-scm.com/docs/git-blame">git blame</a>)</li>
<li>Tag a specific version for quick referencing</li>
</ol>
<p>Git is also a great tool for teamwork. You can</p>
<ol>
<li>Exchange "changesets" between repositories</li>
<li>Review the changes made by others</li>
</ol>
<p>One of the main features of Git is its Branching system. A branch is a copy of a project which you can work on without messing with the repository. This concept has been around for some time, but with Git, it is way faster and more efficient. Branching also comes along with Merging, which is the act of copying the changesets done in a branch back to the source.</p>
<p>Generally, you create a branch to create or test a new feature and merge that branch back when you are satisfied with the work.</p>
<p>There is also a simple concept that you might use a lot: Stashing.</p>
<p>Stashing is the act of safely putting away your current edits so that you have clean environment to work on something completely different. You might want to use stashing when you are playing around or testing a feature but need to work on a new feature in priority. So, you stash your changes away and begin to write that feature. After you are done, you can get your changes back and apply them to your current working environment.</p><h3>Git Push</h3>
<p>將近端改版資料新增提交等步驟都在近端完成, 但是 git push 則是要將改版資料推向遠端倉儲.</p>
<p>共有三種方式可以取得 git push 的使用授權:</p>
<ol>
<li>以該倉儲對應的帳號密碼進行 push</li>
<li>以該倉儲對應的 Personal Access Token 進行 push</li>
<li>以該倉儲對應帳號的 SSH 私鑰進行 push</li>
</ol>
<p>以帳號密碼進行 push:</p>
<p style="padding-left: 30px;">語法為 url = https://github.com/mdecourse/report.git</p>
<p>利用 <a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token">Github Personal Access Token</a> 進行 push 請參考<a href="https://stackoverflow.com/questions/68191392/password-authentication-is-temporarily-disabled-as-part-of-a-brownout-please-us">這裡</a>的說明.</p>
<p style="padding-left: 30px;">語法為 url = <a href="https://&lt;token&gt;@github.com/mdecourse/report.git">https://&lt;token&gt;@github.com/mdecourse/report.git</a></p>
<p>以 <a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh">Github SSH </a>私鑰進行 push:</p>
<p style="padding-left: 30px;">語法為 utl = git@&lt;putty_session&gt;:mdecourse/report.git</p>
<p></p>
<h2>解題練習</h2>
<p>這個頁面已經將 ggame 從 brython 模組轉為 javascript 模組(<a href="http://mde.tw/cp2021/content/%E5%AD%B8%E7%BF%92%E7%A8%8B%E5%BC%8F.html">方法</a>), 名稱為 brython_modules.js 放在 downloads 目錄中.</p>
<h4>請利用下列網際編輯器, 開始學習如何使用 Python 解決問題, 一般機械設計流程會面臨什麼問題?</h4>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-20290-3">A Beginners Guide to Python 3 Programming</a> (校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-25943-3">Advanced Guide to Python 3 Programming</a> (校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-319-19596-4">Elementary Mechanics Using Python</a> (校園網路下載電子書)</p>
<p>1) 從 URL 導入程式<a href="https://docs.python.org/3/tutorial/modules.html">模組</a> (modules). (使用 /static/, ./../downloads/py/). 請列出<a href="https://docs.python.org/3/tutorial/modules.html">模組</a>中的 fib(1000). (瀏覽器上的程式, 可以導入其他網際路徑上 (或其他程式設計者伺服器上) 的另一個程式段, 並且使用該程式段的功能, 對於機械設計流程, 有何用處?)</p>
<p>2) <a href="https://qry.nfu.edu.tw/">學校教務主機</a>可以根據當學期的課號, 查得該課程的修課學員名單, 請問可以直接利用下列網際 Python 程式編輯器, 取得本課程的修課人員學號資料嗎? 當取得修課人員名單後, 可以從中以亂數選出特定個數的學員嗎? 若每一週各選出特定學員, 當週已經被選過的學員, 可以從後續亂數選擇的名單中剔除嗎? (請參考 <a href="https://en.wikipedia.org/wiki/Ajax_(programming)">Ajax</a> 與 <a href="https://brython.info/static_doc/en/ajax.html">browser.ajax</a>, 利用瀏覽器中的程式, 可以跨網路即時從其他伺服器擷取資料, 對機械設計者有什麼意義?)</p>
<p>3) 定時執行特定任務對某些機械裝置可能有些用處, 能夠讓 <a href="https://github.com/mdecourse/schedule">Schedule 模組</a> (<a href="https://bhupesh-v.github.io/A-Simple-Scheduler-in-Python/">ref</a>), 在 Brython 環境中執行嗎?</p>
<p>4) 可以移動的機電模型經常需要客製化的齒輪減速裝置, 能夠直接在瀏覽器中根據減速需求, 設計繪製出能夠直接列印的齒輪組嗎? (<a href="/downloads/DesignBasicGearBoxes.pdf">ref1</a>, <a href="https://all3dp.com/2/3d-printed-gearbox-how-to-design-your-own-box/">ref2</a>, <a href="https://en.wikipedia.org/wiki/STL_(file_format)">ref3</a>, <a href="http://hessmer.org/gears/InvoluteSpurGearBuilder.html?circularPitch=8&amp;pressureAngle=20&amp;clearance=0.05&amp;backlash=0.05&amp;profileShift=0&amp;gear1ToothCount=30&amp;gear1CenterHoleDiamater=4&amp;gear2ToothCount=8&amp;gear2CenterHoleDiamater=4&amp;showOption=3">ref4</a>, <a href="http://www.hessmer.org/blog/2020/09/27/online-involute-spur-gear-builder-v2/">ref5</a>, <a href="https://geargenerator.com/#200,200,100,6,1,3,0,4,1,8,2,4,27,-90,0,0,0,0,0,0,16,4,4,27,-60,0,0,0,0,1,1,12,1,12,20,-60,0,0,0,0,2,0,60,5,12,20,0,1,0,0,0,0,0,3,-515">ref6</a>, <a href="https://www.igus.eu/info/3d-print-gears">ref7</a>)</p>
<p>啟動 Brython 時, 可以同時設定多個模組擷取路徑:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script&gt;/
window.onload=function(){
brython({debug:1, pythonpath:['/static/','/./../downloads/py/']});
}
&lt;/script&gt;</pre>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- for ggame -->
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<script src="/downloads/brython_modules.js"></script>
<!-- Cango 程式庫 -->
<script src="/static/Cango-13v08-min.js"></script>
<script src="/static/CangoAxes-4v01-min.js"></script>
<script src="/static/gearUtils-05.js"></script>
<!-- for Konva 程式庫 -->
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
from browser import html
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
Ace.editor.setValue("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
def helloWorld():
    print("Hello World!")
helloWorld()
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""")
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<div id="brython_div"></div>
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ****************************** keyword start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 kw1
kw1 = beditor.editor("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "keyword" 的按鈕點按時, 執行 kw1 物件中的 prog 方法
doc["keyword"].bind('click', kw1.prog)
</script>
</p>
<p><!-- ****************************** keyword end --></p>
<p><!-- ***************************** slide ex1 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex1 = beditor.editor("""# 導入 Ex1 原始碼
a = 0
def my_print(n, input_str):
    print("以下將重覆列印 '", input_str + "' " + str(n) + "次")
    for i in range(n):
        print(i, input_str)
my_print(5, "Hello World!")
the_str = "開始學習 Python"
num = input("請輸入要列印的次數!")
my_print(int(num), the_str)
a = a + 1
print("(" + str(a) + ")", "_" * 25)
def myfun():
    yield 1
    yield 2
    yield 3
for i in myfun():
    print(i)
x = iter(myfun())
y = list(myfun())
a = a + 1
print("(" + str(a) + ")", "_" * 25)
print(x.__next__())
print(x.__next__())
print(x.__next__())
print(y)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex1" 的按鈕點按時, 執行 Ex1 物件中的 prog 方法
doc["ex1"].bind('click', Ex1.prog)
</script>
</p>
<p><!-- ***************************** slide ex1 end --></p>
<p><!-- ***************************** slide ex2 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex2 = beditor.editor("""# Python 的內建資料型別
import math
def f():
    print("This is a user-defined function")
    return 42
print("Some basic types in Python:")
print(type(2))           # int
print(type(2.2))         # float
print(type("2.2"))       # str  (string)
print(type(2 < 2.2))     # bool (boolean)
print(type(math))        # module
print(type(math.tan))    # builtin_function_or_method ("function" in Brython)
print(type(f))           # function (user-defined function)
print(type(type(42)))    # type
print("#####################################################")
print("And some other types we will see later in the course...")
print(type(Exception())) # Exception
print(type(range(5)))    # range
print(type([1,2,3]))     # list
print(type((1,2,3)))     # tuple
print(type({1,2}))       # set
print(type({1:42}))      # dict (dictionary or map)
print(type(2+3j))        # complex  (complex number) (we may not see this type)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex2" 的按鈕點按時, 執行 Ex2 物件中的 prog 方法
doc["ex2"].bind('click', Ex2.prog)
</script>
</p>
<p><!-- ***************************** slide ex2 end --></p>
<p><!-- ***************************** slide ex3 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex3 = beditor.editor("""# Python 的內建常數與函式
# 內建常數
print("Some builtin constants:")
print(True)
print(False)
print(None)
print("And some more constants in the math module:")
import math
print(math.pi)
print(math.e)
# 內建函式
print("Type conversion functions:")
print(bool(0))   # convert to boolean (True or False)
print(float(42)) # convert to a floating point number
print(int(2.8))  # convert to an integer (int)
print("And some basic math functions:")
print(abs(-5))   # absolute value
print(max(2,3))  # return the max value
print(min(2,3))  # return the min value
print(pow(2,3))  # raise to the given power (pow(x,y) == x**y)
print(round(2.354, 1)) # round with the given number of digits
# other examples
print(3 * 2)
print(3 * "abc")
print(3 + 2)
print("abc" + "def")
print(3 + "def")
# Type Affect Semantics
print(3 * 2)
print(3 * "abc")
print(3 + 2)
print("abc" + "def")
print(3 + "def")
# Integer Division
print("The / operator does 'normal' float division:")
print(" 5/3  =", ( 5/3))
print()
print("The // operator does integer division:")
print(" 5//3 =", ( 5//3))
print(" 2//3 =", ( 2//3))
print("-1//3 =", (-1//3))
print("-4//3 =", (-4//3))
# Modulus or Remainder Operator (%)
print(" 6%3 =", ( 6%3))
print(" 5%3 =", ( 5%3))
print(" 2%3 =", ( 2%3))
print(" 0%3 =", ( 0%3))
print("-4%3 =", (-4%3))
print(" 3%0 =", ( 3%0))
# Verify that (a%b) is equivalent to (a-(a//b)*b)
def mod(a, b):
  return a - (a//b)*b
print(41%14, mod(41,14))
print(14%41, mod(14,41))
print(-32%9, mod(-32,9))
print(32%-9, mod(32,-9))
# Operator Order (Precedence and Associativity)
print("Precedence:")
print(2+3*4)  # prints 14, not 20
print(5+4%3)  # prints  6, not 0 (% has same precedence as *, /, and //)
print(2**3*4) # prints 32, not 4096 (** has higher precedence than *, /, //, and %)
print()
print("Associativity:")
print(5-4-3)   # prints -2, not 4 (- associates left-to-right)
print(4**3**2) # prints 262144, not 4096 (** associates right-to-left)
# Approximate Values of Floating-Point Numbers
print(0.1 + 0.1 == 0.2)        # True, but...
print(0.1 + 0.1 + 0.1 == 0.3)  # False!
print(0.1 + 0.1 + 0.1)         # prints 0.30000000000000004 (uh oh)
print((0.1 + 0.1 + 0.1) - 0.3) # prints 5.55111512313e-17 (tiny, but non-zero!)
# Equality Testing with math.isclose
print("The problem....")
d1 = 0.1 + 0.1 + 0.1
d2 = 0.3
print(d1 == d2)                # False (never use == with floats!)
print()
print("The solution...")
import math
print(math.isclose(d1, d2))  # True!
# math.isclose checks if the two numbers are ALMOST equal, within a small error
# Short-Circuit Evaluation
def yes():
    return True
def no():
    return False
def crash():
    return 1/0 # crashes!
print(no() and crash()) # Works!
print(crash() and no()) # Crashes!
print (yes() and crash()) # Never runs (due to crash), but would also crash (without short-circuiting)
# Or operator
def yes():
    return True
def no():
    return False
def crash():
    return 1/0 # crashes!
print(yes() or crash()) # Works!
print(crash() or yes()) # Crashes!
print(no() or crash())  # Never runs (due to crash), but would also crash (without short-circuiting)
# more examples
def isPositive(n):
    result = (n > 0)
    print("isPositive(",n,") =", result)
    return result
def isEven(n):
    result = (n % 2 == 0)
    print("isEven(",n,") =", result)
    return result
print("Test 1: isEven(-4) and isPositive(-4))")
print(isEven(-4) and isPositive(-4)) # Calls both functions
print("----------")
print("Test 2: isEven(-3) and isPositive(-3)")
print(isEven(-3) and isPositive(-3)) # Calls only one function!
# type vs isinstance
# Both type and isinstance can be used to type-check
# In general, (isinstance(x, T)) will be more robust than (type(x) == T)
print(type("abc") == str)
print(isinstance("abc", str))
# We'll see better reasons for this when we cover OOP + inheritance later
# in the course.  For now, here is one reason:  say you wanted to check
# if a value is any kind of number (int, float, complex, etc). 
# You could do:
def isNumber(x):
    return ((type(x) == int) or
            (type(x) == float)) # are we sure this is ALL kinds of numbers?
print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))
# But this is cleaner, and works for all kinds of numbers, including
# complex numbers for example:
import numbers
def isNumber(x):
    return isinstance(x, numbers.Number) # works for any kind of number
print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex3" 的按鈕點按時, 執行 Ex3 物件中的 prog 方法
doc["ex3"].bind('click', Ex3.prog)
</script>
</p>
<p><!-- ***************************** slide ex3 end --></p>
<p><!-- ***************************** slide ex4 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex4 = beditor.editor("""# Python 函式
# Vocabulary
x = 5
def f(y, z):
    result = x + y + z
    return result
print(f(1, 2)) # 8
print(f(3, 4)) # 12
# Vocabulary:
#   variables: global vs. local
#   statements vs. expressions
#   function definitions vs. function calls
#   parameters vs. arguments
# Return Statements
# Basic example
def isPositive(x):
    return (x > 0)
print(isPositive(5))  # True
print(isPositive(-5)) # False
print(isPositive(0))  # False
# Return ends the function immediately
def isPositive(x):
    print("Hello!")   # runs
    return (x > 0)
    print("Goodbye!") # does not run ("dead code")
print(isPositive(5))  # prints Hello, then True
# No return statement --> return None
def f(x):
    x + 42
print(f(5)) # None
def f2(x):
    result = x + 42
print(f2(5)) # None
# Print versus Return
# This is a common early mistake (confusing print and return):
def cubed(x):
    print(x**3) # Here is the error!
cubed(2)          # seems to work!
print(cubed(3))   # sort of works (but prints None, which is weird)
print(2*cubed(4)) # Error!
# Once again (correctly)
def cubed2(x):
    return (x**3) # That's better!
cubed2(2)          # seems to be ignored (why?)
print(cubed2(3))   # works!
print(2*cubed2(4)) # works!
# Different Parameter and Return Types
def hypotenuse(a, b):
    return ((a**2) + (b**2))**0.5
print(hypotenuse(3, 4)) # 5.0 (not 5)
print("---------------------")
def xor(b1, b2):
    return ((b1 and (not b2)) or (b2 and (not b1)))  # same as (b1 != b2)
print(xor(True,  True))  # False
print(xor(True,  False)) # True
print(xor(False, True))  # True
print(xor(False, False)) # False
print("---------------------")
def isPositive(n):
    return (n > 0)
print(isPositive(10))     # True
print(isPositive(-1.234)) # False
# Function Composition
def f(w):
    return 10*w
def g(x, y):
    return f(3*x) + y
def h(z):
    return f(g(z, f(z+1)))
print(h(1)) # hint: try the "visualize" feature
# Helper Functions 
def onesDigit(n):
    return n%10
def largerOnesDigit(x, y):
    return max(onesDigit(x), onesDigit(y))
print(largerOnesDigit(134, 672)) # 4
print(largerOnesDigit(132, 674)) # Still 4
# Test Functions
# A broken test function
def onesDigit(n):
    return n%10
def testOnesDigit():
    print("Testing onesDigit()...", end="")
    assert(onesDigit(5) == 5)
    assert(onesDigit(123) == 3)
    assert(onesDigit(100) == 0)
    assert(onesDigit(999) == 9)
    print("Passed!")
testOnesDigit() # Passed!  Why is this bad?
# A better version
def onesDigit2(n):
    return n%10
def testOnesDigit2():
    print("Testing onesDigit()...", end="")
    assert(onesDigit2(5) == 5)
    assert(onesDigit2(123) == 3)
    assert(onesDigit2(100) == 0)
    assert(onesDigit2(999) == 9)
    assert(onesDigit2(-123) == 3) # Added this test
    print("Passed!")
testOnesDigit2() # Crashed!  So the test function worked!
# Local Variable Scope
def f(x):
    print("In f, x =", x)
    x += 5
    return x
def g(x):
    return f(x*2) + f(x*3)
print(g(2))
# Another example
def f(x):
    print("In f, x =", x)
    x += 7
    return round(x / 3)
def g(x):
    x *= 10
    return 2 * f(x)
def h(x):
    x += 3
    return f(x+4) + g(x)
print(h(f(1)))
# Global Variable Scope
# In general, you should avoid using global variables.
# You will even lose style points if you use them!
# Still, you need to understand how they work, since others
# will use them, and there may also be some very few occasions
# where you should use them, too!
g = 100
def f(x):
    return x + g
print(f(5)) # 105
print(f(6)) # 106
print(g)    # 100
# Another exampl
g = 100
def f(x):
    # If we modify a global variable, we must declare it as global.
    # Otherwise, Python will assume it is a local variable.
    global g
    g += 1
    return x + g
print(f(5)) # 106
print(f(6)) # 108
print(g)    # 102
# Default arguments
# Sometimes, a function has a parameter that has a natural default
# We can specify that default value in the function definition,
# then choose whether or not to include it in the function call.
def f(x, y=10):
    return x + y
print(f(5))   # 15
print(f(5,1)) # 6
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex4" 的按鈕點按時, 執行 Ex4 物件中的 prog 方法
doc["ex4"].bind('click', Ex4.prog)
</script>
</p>
<p><!-- ***************************** slide ex4 end --></p>
<!-- line drawing start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Draw = beditor.editor("""# Line drawing
# 導入 doc
from browser import document as doc
from browser import html
import math
canvas = html.CANVAS(width = 300, height = 200)
canvas.id = "line_drawing"
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["line_drawing"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
# 設定填圖顏色
ctx.fillStyle = "rgb(200,0,0)"
# 設定畫筆顏色
ctx.strokeStyle = "rgb(0,0,200)"
# 乘上 deg 可轉為徑度單位
deg = math.pi / 180
# 建立多邊形定點位置畫線函式
def star(radius, xc, yc, n):
    #radius = 100
    #xc = 200
    #yc = 200
    xi = xc + radius*math.cos((360/n)*deg+90*deg)
    yi = yc - radius*math.sin((360/n)*deg+90*deg)
    ctx.beginPath()
    ctx.moveTo(xi,yi)
    for i in range(2, n+1):
        x = xc + radius*math.cos((360/n)*deg*i+90*deg)
        y = yc - radius*math.sin((360/n)*deg*i+90*deg)
        ctx.lineTo(x,y)
# 以下利用多邊形畫線函式呼叫執行畫框線或填入顏色
# 畫五邊形框線
star(50, 50, 50, 5)
ctx.closePath()
ctx.stroke()
    
# 填三角形色塊
star(50, 150, 50, 3)
ctx.closePath()
ctx.fill()
    
# 改變畫線顏色後, 畫七邊形框線
ctx.strokeStyle = "rgb(0,200,20)"
star(50, 250, 50, 7)
ctx.closePath()
ctx.stroke()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "draw" 的按鈕點按時, 執行 Draw 物件中的 prog 方法
doc["draw"].bind('click', Draw.prog)
</script>
</p>
<!-- line drawing ends -->
<p></p>
<!-- flag ex start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Flag = beditor.editor("""# 畫中華民國國旗
# 導入 doc
from browser import document as doc
from browser import html
import math
canvas = html.CANVAS(width = 300, height = 200)
canvas.style = {"width": "100%"}
canvas.id = "taiwan_flag"
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "flag" 的按鈕點按時, 執行 Flag 物件中的 prog 方法
doc["flag"].bind('click', Flag.prog)
</script>
</p>
<!-- flag ex ends -->
<p></p>
<!-- bunny starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Bunny = beditor.editor("""# Ggame
from ggame import App, ImageAsset, Sprite, MouseEvent
from random import random, randint
from browser import document as doc
from browser import html
import math
# for site variable to use socket.gethostname() to differentiate execution on localhost or not
import socket
# 引入既有的id="graphics-column" 標註
graphics_column = doc["graphics-column"]
# 建立內定名稱為 "ggame-canvas" 的 canvas 標註
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "ggame-canvas"
# 將 canvas 插入 gc 標註中
graphics_column <= canvas

# when work with dynamic site
if socket.gethostname() == "localhost":
    site = ""
else:
    # when work with remote site
    site="./.."

class Bunny(Sprite):
    
    asset = ImageAsset(site+"/images/bunny.png")
    
    def __init__(self, position):
        super().__init__(Bunny.asset, position)
        # register mouse events
        App.listenMouseEvent(MouseEvent.mousedown, self.mousedown)
        App.listenMouseEvent(MouseEvent.mouseup, self.mouseup)
        App.listenMouseEvent(MouseEvent.mousemove, self.mousemove)
        self.dragging = True
        self.deltax = 0
        self.deltay = 0
    
    def step(self):
        # Every now and then a bunny hops...
        if random() < 0.01:
            self.x += randint(-20,20)
            self.y += randint(-20,20)
        
        
    def mousedown(self, event):
        # capture any mouse down within 50 pixels
        self.deltax = event.x - (self.x + self.width//2) 
        self.deltay = event.y - (self.y + self.height//2)
        if abs(self.deltax) < 50 and abs(self.deltay) < 50:
            self.dragging = True
            # only drag one bunny at a time - consume the event
            event.consumed = True
            
    def mousemove(self, event):
        if self.dragging:
            self.x = event.x - self.deltax - self.width//2
            self.y = event.y - self.deltay - self.height//2
            event.consumed = True
            
    def mouseup(self, event):
        if self.dragging:
            self.dragging = False
            event.consumed = True
            
        
class DemoApp(App):
    
    def __init__(self):
        super().__init__()
        for i in range(5):
            Bunny((randint(50, 600), randint(50, 400)))
        
    def step(self):
        # Override step to perform action on each frame update
        for bunny in self.spritelist:
            bunny.step()
# Create the app
app = DemoApp()  
# Run the app
app.run()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "bunny" 的按鈕點按時, 執行 Bunny 物件中的 prog 方法
doc["bunny"].bind('click', Bunny.prog)
</script>
</p>
<!-- bunny ends -->
<p></p>
<!-- clear canvas start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Clear = beditor.editor("""# 清除畫布
from browser import document, html
brython_div = document["brython_div"] 
brython_div.clear()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "clear" 的按鈕點按時, 執行 Clear 物件中的 prog 方法
doc["clear"].bind('click', Clear.prog)
</script>
</p>
<!-- clear canvas ends -->
<p></p>
<!-- cango spur gears start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Spur = beditor.editor("""# Cango Spur Gears
from browser import document as doc
from browser import html
import math
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "cango_gear"
brython_div = doc["brython_div"]
brython_div <= canvas
from browser import document as doc
from browser import window
import math
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
shape = window.Shape.new
path = window.Path.new
creategeartooth = window.createGearTooth.new
tweener = window.Tweener.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")
######################################
# 畫正齒輪輪廓
#####################################
def cangoGear(n, m, pa):
    # n 為齒數
    #n = 17
    # pa 為壓力角
    #pa = 25
    # m 為模數, 根據畫布的寬度, 計算適合的模數大小
    # Module = mm of pitch diameter per tooth
    #m = 0.8*canvas.width/n
    # pr 為節圓半徑
    pr = n*m/2 # gear Pitch radius
    # generate gear
    data = creategeartooth(m, n, pa)
    # Brython 程式中的 print 會將資料印在 Browser 的 console 區
    #print(data)
    gearTooth = path(data, {
      "fillColor":"#ddd0dd",
      "border": True,
      "strokeColor": "#606060" })
    gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
    # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
    gear = gearTooth.dup()
    # gear 為單一齒的輪廓資料
    #cgo.render(gearTooth)
    # 利用單齒輪廓旋轉, 產生整個正齒輪外形
    for i in range(1, n):
        # 將 gearTooth 中的資料複製到 newTooth
        newTooth = gearTooth.dup()
        # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
        newTooth.rotate(360*i/n)
        gear.appendPath(newTooth)
    # 建立軸孔
    # add axle hole, hr 為 hole radius
    hr = 0.6*pr # diameter of gear shaft
    shaft = path(shapedefs.circle(hr), {
      "fillColor":"#ddd0dd",
      "border": True,
      "strokeColor": "#606060" })
    gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
    return gear
# 設定兩齒齒數
n1 = 17
n2 = 11
n3 = 13
reduced_ratio = 0.5
# 使用 80% 的畫布寬度
m = 0.8*canvas.width/((n1+n2+n3)*reduced_ratio)
# 設定共同的壓力角
pa = 25
# n 齒輪的節圓半徑
pr1 = n1*m/2
# n2 齒輪的節圓半徑
pr2 = n2*m/2
pr3 = n3*m/2
cx = canvas.width/2
cy = canvas.height/2
# 建立 gears
gear1 = cangoGear(n1, m, pa)
gear2 = cangoGear(n2, m, pa)
gear3 = cangoGear(n3, m, pa)
from browser.timer import set_interval
deg = math.pi/180
rotate_speed = 12*deg
def draw():
    cgo.clearCanvas()
    gear1.transform.translate(cx-(pr1+pr2)*reduced_ratio, cy)
    gear1.transform.scale(reduced_ratio)
    gear1.transform.rotate(0)
    gear1.rotate(rotate_speed)
    cgo.render(gear1)
    
    gear2.transform.translate(cx, cy)
    gear2.transform.scale(reduced_ratio)
    gear2.transform.rotate(180+(360/n2/2))
    gear2.rotate(-(rotate_speed)*n1/n2)
    cgo.render(gear2)
    
    gear3.transform.translate(cx+(pr2+pr3)*reduced_ratio, cy)
    gear3.transform.scale(reduced_ratio)
    gear3.transform.rotate(180+(360/n3/2)+(180+(360/n2/2))*n2/n3)
    gear3.rotate((rotate_speed*n1/n2)*(n2/n3))
    cgo.render(gear3)
set_interval(draw, 2)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "spur" 的按鈕點按時, 執行 Spur 物件中的 prog 方法
doc["spur"].bind('click', Spur.prog)
</script>
</p>
<!-- cango spur gears ends -->
<p></p>
<!-- temp convert start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Temp = beditor.editor("""# Temperature Conversion
# Temperature Conversion
'''
C to F: Celsius to Fahrenheit Conversion Formula. To convert temperatures in degrees Celsius to Fahrenheit, multiply by 1.8 (or 9/5) and add 32.
To convert temperatures in degrees Fahrenheit to Celsius, subtract 32 and multiply by .5556 (or 5/9).
Fahrenheit = Celsius*9/5 + 32
Celsium = (Fahrenheit - 32)*5/9
'''
from browser import document, html
brython_div = document["brython_div"]
def c2f(c):
    f = round(c*9/5 + 32, 3)
    return "Celsiusc: "+ str(c) +         " degrees = Fahrenheit: " + str(f) + " degrees"
    
def f2c(f):
    c = round((f - 32)*5/9, 3)
    return "Fahrenheit: "+ str(f) +         " degrees = Celsiusc: " + str(c) + " degrees"
    
choice = input("c2f or f2c")
if choice == "c2f":
    '''
    c = float(input("input Celsius in degrees"))
    print(c2f(c))
    '''
    for deg in range(100):
        brython_div <= c2f(deg)
        brython_div <= html.BR()
else:
    '''
    f = float(input("input Fahrenheit in degrees"))
    print(f2c(f))
    '''
    for deg in range(100):
        brython_div <= f2c(deg)
        brython_div <= html.BR()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "temp" 的按鈕點按時, 執行 Temp 物件中的 prog 方法
doc["temp"].bind('click', Temp.prog)
</script>
</p>
<!-- temp convert ends -->
<p></p>
<!-- forloop start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Forloop = beditor.editor("""# For loop
for i in range(5):
    print(i)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "forloop" 的按鈕點按時, 執行 Forloop 物件中的 prog 方法
doc["forloop"].bind('click', Forloop.prog)
</script>
</p>
<!-- forloop ends -->
<p></p>
<!-- guess start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Guess = beditor.editor("""# 猜數字遊戲
from browser import document, html, alert
import random
# 跳出文字說明視窗
alert("開始玩猜數字遊戲")
# 利用 random 模組中的 randint 取 1~100 間的亂數
標準答案 = random.randint(1, 100)
# 利用 input 函式視窗, 取使用者所猜的數字, 轉為整數
你猜的數字 = int(input("請輸入您所猜 1~100 間的整數:"))
# 猜測次數起始值設為 1
猜測次數 = 1
# 進入重複迴圈, 直到猜對數字
while 標準答案 != 你猜的數字:
    # 根據使用者所猜的數字, 與答案比較後, 給出提示
    if 標準答案 < 你猜的數字:
        alert("猜第" + str(猜測次數) + "次, 太大了，再猜 :)加油")
    else:
        alert("猜第" + str(猜測次數) + "次, 太小了，再猜 :)加油")
    你猜的數字 = int(input("請輸入您所猜 1~100 間的整數:"))
    # 猜測次數累加
    猜測次數 += 1
# 跳出迴圈表示猜對, 給出最後文字說明視窗
alert("猜對了！答案為" + str(標準答案) + ", 總共猜了" + str(猜測次數) + "次")
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "guess" 的按鈕點按時, 執行 Guess 物件中的 prog 方法
doc["guess"].bind('click', Guess.prog)
</script>
</p>
<!-- guess ends -->
<p></p>
<!-- autoguess start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Autoguess = beditor.editor("""# 程式自動猜數字遊戲
from browser import document, html, alert
import random
 
id4 = document["brython_div"]
執行次數 = 100
總猜測次數 = 0
for i in range(執行次數):
    id4 <= "第" + str(i+1) + "次玩:" + html.BR()
    下限 = 1
    上限 = 100
    標準答案 = random.randint(下限, 上限)
    pc猜的數字 = random.randint(下限, 上限)
    #print(標準答案, pc猜的數字)
    #integer int()
    #string str()
    #float float()
    #你猜的數字 = int(input("請輸入您所猜的整數:"))
    猜測次數 = 1
    while 標準答案 != pc猜的數字:
        if 標準答案 < pc猜的數字:
            #print("太大了，再猜一次 :)加油")
            # 因此已經確定"pc猜的數字"不是答案, 因此 - 1
            id4 <= "電腦猜的數字:" + str(pc猜的數字) + " 太大了!" + html.BR()
            上限 = pc猜的數字 - 1
        else:
            #print("太小了，再猜一次 :)加油")
            # 因此已經確定"pc猜的數字"不是答案, 因此 + 1
            id4 <= "電腦猜的數字:" + str(pc猜的數字) + " 太小了!" + html.BR()
            下限 = pc猜的數字 + 1
        #pc猜的數字 = int(input("請輸入您所猜的整數:"))
        pc猜的數字 = random.randint(下限, 上限)
        猜測次數 += 1
    #print("猜對了！總共猜了", 猜測次數, "次")
    id4 <= "電腦猜對了, 答案為: " + str(標準答案) + ", 總共猜了 "+ str(猜測次數) + "次" + html.BR()
    總猜測次數 += 猜測次數
平均猜測次數 = int(總猜測次數/執行次數)
#print("平均次數", 平均猜測次數)
id4 <= "平均次數: " + str(平均猜測次數)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "autoguess" 的按鈕點按時, 執行 Autoguess 物件中的 prog 方法
doc["autoguess"].bind('click', Autoguess.prog)
</script>
</p>
<!-- autoguess ends -->
<p></p>
<!-- lottery start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Lottery = beditor.editor("""# 大樂透電腦選號
# lottery
from browser import document, html, alert
import random
try:
    total = int(input("請問要出幾張大樂透彩卷號碼?"))
except:
    alert("請輸入要選擇大樂透電腦選號數量的'整數'")
    total = int(input("請問要出幾張大樂透彩卷號碼?"))
# 準備將電腦選出的號碼, 輸出到內定 id="brython_div" 的標註區域
output_div = document["brython_div"]
output_div <= "以下將出 " + str(total) + " 張電腦選號彩卷:" + html.BR()
for i in range(1, total + 1):
    # 利用 list(range()) 產生 1 到 49 的 population list
    # 然後再透過 random.sample(population, k) 
    # 從 population, 產生 k 個不同的數字
    numbers = random.sample(list(range(1, 49)), 6)
    output_div <= str(i) + ". 電腦選號為: " + str(numbers) + html.BR()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "lottery" 的按鈕點按時, 執行 Lottery 物件中的 prog 方法
doc["lottery"].bind('click', Lottery.prog)
</script>
</p>
<!-- lottery ends -->
<p></p>
<!-- 台灣威力彩 start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Weleadlottery = beditor.editor("""# 威力彩電腦選號
# weleadlottery
from browser import document, html, alert
import random
try:
    total = int(input("請問要出幾張威力彩卷號碼?"))
except:
    alert("請輸入要選擇威力彩電腦選號數量的'整數'")
    total = int(input("請問要出幾張威力彩卷號碼?"))
# 準備將電腦選出的號碼, 輸出到內定 id="brython_div" 的標註區域
output_div = document["brython_div"]
output_div <= "以下將出 " + str(total) + " 張威力彩電腦選號彩卷:" + html.BR()
for i in range(1, total + 1):
    # 利用 list(range()) 產生第一區 1 到 38 , 第二區 1 到 8 的 population list
    # 然後再透過 random.sample(population, k) 
    # 從 population, 產生 k 個不同的數字
    section1_numbers = random.sample(list(range(1, 38)), 6)
    section2_number = random.sample(list(range(1, 8)), 1)
    output_div <= str(i) + ". 電腦選號第一區為: " + str(section1_numbers) + html.BR()
    output_div <= ". 電腦選號第二區為: " + str(section2_number) + html.BR()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "lottery" 的按鈕點按時, 執行 Lottery 物件中的 prog 方法
doc["weleadlottery"].bind('click', Weleadlottery.prog)
</script>
</p>
<!-- 台灣威力彩 ends -->
<p></p>
<!-- bezier starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Bezier = beditor.editor("""# Cango Bezier 繪圖
from browser import window, html
from browser import document as doc
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "canvas"
brython_div = doc["brython_div"]
brython_div <= canvas
# Javascript 物件
cango = window.Cango.new
path = window.Path.new
shape = window.Shape.new
group = window.Group.new
# Javascript 變數
shapedefs = window.shapeDefs
g1 = cango("canvas")
g1.clearCanvas()
g1.gridboxPadding(10, 10, 5, 7)
g1.fillGridbox("lightgreen")
g1.setWorldCoordsRHC(-100, -100, 400)
x1 = 40
y1 = 20
cx1 = 90
cy1 = 120
x2 = 120
y2 = 100
cx2 = 130
cy2 = 20
cx3 = 150
cy3 = 120
x3 = 180
y3 = 60
def dragC1(mousePos):
    global cx1, cy1
    cx1 = mousePos.x
    cy1 = mousePos.y
    drawCurve()
def dragC2(mousePos):
    global cx2, cy2
    cx2 = mousePos.x
    cy2 = mousePos.y
    drawCurve()
def dragC3(mousePos):
    global cx3, cy3
    cx3 = mousePos.x
    cy3 = mousePos.y
    drawCurve()
def drawCurve():
    qbez = path(['M', x1, y1, 'Q', cx1, cy1, x2, y2], {
      'strokeColor':'blue'})
    cbez = path(['M', x2, y2, 'C', cx2, cy2, cx3, cy3, x3, y3], {
      'strokeColor':'green'})
    L1 = path(['M', x1, y1, 'L', cx1, cy1, x2, y2], {
      'strokeColor':"rgba(0, 0, 0, 0.2)",
      'dashed':[4]})
    L2 = path(['M', x2, y2, 'L', cx2, cy2], {
      'strokeColor':"rgba(0, 0, 0, 0.2)",
      'dashed':[4]})
    L3 = path(['M', x3, y3, 'L', cx3, cy3], {
      'strokeColor':"rgba(0, 0, 0, 0.2)",
      'dashed':[4]})
    c1.transform.translate(cx1, cy1)
    c2.transform.translate(cx2, cy2)
    c3.transform.translate(cx3, cy3)
    grp = group(qbez, cbez, L1, L2, L3, c1, c2, c3)
    g1.render(grp, True)
g1.clearCanvas("lightyellow")
g1.deleteAllLayers()
g1.setWorldCoordsRHC(0, 0, 200)
c1 = shape(shapedefs.circle(6), {'fillColor':'red'})
c1.enableDrag(None, dragC1, None)
c2 = shape(shapedefs.circle(6), {'fillColor':'red'})
c2.enableDrag(None, dragC2, None)
c3 = shape(shapedefs.circle(6), {'fillColor':'red'})
c3.enableDrag(None, dragC3, None);
drawCurve()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "bezier" 的按鈕點按時, 執行 Bezier 物件中的 prog 方法
doc["bezier"].bind('click', Bezier.prog)
</script>
</p>
<!-- bezier ends -->
<p></p>
<!-- turtle1 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle1 = beditor.editor("""# Turtle1 繪圖
from browser import window, html
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
t = turtle.Turtle()
t.width(5)
for c in ['red', '#00ff00', '#fa0', 'rgb(0,0,200)']:
    t.color(c)
    t.forward(100)
    t.left(90)
# dot() and write() do not require the pen to be down
t.penup()
t.goto(-30, -100)
t.dot(40, 'rgba(255, 0, 0, 0.5')
t.goto(30, -100)
t.dot(40, 'rgba(0, 255, 0, 0.5')
t.goto(0, -70)
t.dot(40, 'rgba(0, 0, 255, 0.5')
t.goto(0, 125)
t.color('purple')
t.write("這就是 Brython, 網頁上的 Python", font=("Arial", 15, "normal"))
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle1" 的按鈕點按時, 執行 Turtle1 物件中的 prog 方法
doc["turtle1"].bind('click', Turtle1.prog)
</script>
</p>
<!-- turtle1 ends -->
<p></p>
<!-- turtle2 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle2 = beditor.editor("""# Turtle2 繪圖
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
star = turtle.Turtle()
for i in range(5):
    star.forward(250)
    star.right(144)
    
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle2" 的按鈕點按時, 執行 Turtle2 物件中的 prog 方法
doc["turtle2"].bind('click', Turtle2.prog)
</script>
</p>
<!-- turtle2 ends -->
<p></p>
<!-- turtle3 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle3 = beditor.editor("""# Turtle3 繪圖
# https://michael0x2a.com/blog/turtle-examples
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
painter = turtle.Turtle()
painter.pencolor("blue")
for i in range(50):
    painter.forward(50)
    painter.left(123) # Let's go counterclockwise this time 
    
painter.pencolor("red")
for i in range(50):
    painter.forward(100)
    painter.left(123)
    
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle3" 的按鈕點按時, 執行 Turtle3 物件中的 prog 方法
doc["turtle3"].bind('click', Turtle3.prog)
</script>
</p>
<!-- turtle3 ends -->
<p></p>
<!-- turtle4 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle4 = beditor.editor("""# Turtle4 繪圖
# https://docs.python.org/3.7/library/turtle.html?highlight=turtle
# https://fiftyexamples.readthedocs.io/en/latest/turtle.html
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
# 輸入 "turtle" 字串, 表示要使用內建的烏龜圖示
t = turtle.Turtle("turtle")
# 設定繪圖尺寸
screen_x = 500-20
screen_y = 300
# 提筆, 將烏龜移動到畫布中心
t.penup()
t.home()
# 內定方向為右, 前進 screen_x/2
t.forward(screen_x / 2)
# 將方向往右轉 90 度
t.right(90)
# 此時方向向下, 前進 screen_y/2
t.forward(screen_y / 2)
# 令烏龜方向轉絕對角度 180, 等同轉相對角度 90 度, 即 t.right(90)
t.setheading(180)
# 將畫筆顏色設為紅色
t.pencolor('red')
# 下筆準備繪圖
t.pendown()
# 設筆寬度為 10
t.pensize(10)
# 進入重複迴圈, 此時方向向右, 分別
# 前進 screen_x, 之後轉 90 度, 方向朝上
# 再前進 screen_y, 之後再轉 90 度, 方向朝右
# 再前進 screen_x, 之後轉 90 度, 方向朝下
# 最後再前進 screen_y 後, 將方向轉為向左
for distance in (screen_x, screen_y, screen_x, screen_y):
    t.forward(distance)
    t.right(90)
# 提筆後, 將烏龜轉回內定方向回到畫布中心
t.penup()
t.home()
# 完成 turtle 繪圖
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle4" 的按鈕點按時, 執行 Turtle4 物件中的 prog 方法
doc["turtle4"].bind('click', Turtle4.prog)
</script>
</p>
<!-- turtle4 ends -->
<p></p>
<!-- turtle5 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle5 = beditor.editor("""# Turtle5 繪圖
# https://brython.info/gallery/turtle.html
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
t = turtle.Turtle("turtle")
t.speed(1)
t.forward(50)
print("Should be (50, 0):", t.position())
print("Should be 50: ", t.xcor())
print("Should be 0: ", t.ycor())
t.left(90)
t.color("blue")
t.speed(2)
t.fd(50)
print("Should be (50, 50):", t.pos())
print("Should be 225: ", t.towards(0, 0))
print("Should be 90: ", t.heading())
print("Should be approximately 71:", t.distance(0, 0))
# Draw the same square in three different angle modes
t.width(4)
print("Drawing using degrees - the default")
print("Heading should be 90: ", t.heading())
for i in range(4):
    t.forward(100)
    t.left(90)
print("Drawing using radians")
t.radians()
print("Heading should be pi/2: ", t.heading())
for i in range(4):
    t.forward(100)
    t.left(math.pi/2)
print("Drawing using gradients")
t.degrees(400)
print("Heading should be 100: ", t.heading())
for i in range(4):
    t.forward(100)
    t.left(100)
t.degrees()
t.width(1)
t.lt(90)
t.color("orange")
t.backward(50)
t.right(90)
t.color("green")
t.back(50)
t.rt(90)
t.color("red")
t.bk(50)
t.stamp()
t.speed(4)
t.color("black", "white")
t.goto(-100, 100)
t.stamp()
t.color("blue", "yellow")
t.setposition(0, 100)
t.stamp()
t.color("green", "white")
t.setpos(100, 100)
t.stamp()
t.speed(10)
t.color("orange")
t.sety(-100)
t.setx(-100)
t.stamp()
t.color("cyan")
t.home()
t.stamp()
t.color("green")
t.width(4)
t.setheading(180)
t.forward(150)
t.seth(90)
t.fd(20)
t.dot(30, "rgba(255, 0, 0, 0.2)")
t.color("red")
t.speed(0)
t.forward(30)
t.left(90)
t.circle(30)
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle5" 的按鈕點按時, 執行 Turtle5 物件中的 prog 方法
doc["turtle5"].bind('click', Turtle5.prog)
</script>
</p>
<!-- turtle5 ends -->
<p></p>
<!-- turtle6 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle6 = beditor.editor("""# Turtle6 繪圖
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
t = turtle.Turtle("turtle")
t.speed(10)
colors = ['red', 'purple', 'blue', 'green', 'orange']
for x in range(150):
    t.pencolor(colors[x % 5])
    t.width(x/10 + 1)
    t.forward(x)
    t.left(59)
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle6" 的按鈕點按時, 執行 Turtle6 物件中的 prog 方法
doc["turtle6"].bind('click', Turtle6.prog)
</script>
</p>
<!-- turtle6 ends -->
<p></p>
<!-- turtle7 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle7 = beditor.editor("""# Turtle7 繪圖
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
screen=turtle.Screen()    #making a canvas for drawing
screen.bgcolor('black')    #making canvas black
trtl=turtle.Turtle()  #making a turtle
trtl.pencolor('red')    #making colour of the pen red
trtl.pensize(5)    #choosing the size of pen nib 
trtl.speed(10)    #choosing the speed of drawing
# shape should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’
trtl.shape('turtle')   #choosing the shape of pen nib
trtl.forward(150)    #drawing a line of 150 pixels
trtl.right(90)    #asking turtle to turn 90 degrees
trtl.forward(150)    #drawing a line of 150 pixels
trtl.penup()    # preparing for moving pen without drawing
trtl.setpos(-140,-120)    # making the new position of the turtle
trtl.pendown()   # bringing the pen down for drawing again
trtl.pencolor('green')    # choosin the pen colour as green
trtl.write('Brython 烏龜繪圖', font=("Arial", 20, "bold"))    # chosing the font
trtl.penup()
trtl.ht()    # hiding the turtle from the screen
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle7" 的按鈕點按時, 執行 Turtle7 物件中的 prog 方法
doc["turtle7"].bind('click', Turtle7.prog)
</script>
</p>
<!-- turtle7 ends -->
<p></p>
<!-- turtle8 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle8 = beditor.editor("""# Turtle8 繪圖
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
wn = turtle.Screen() 
wn.bgcolor("black") 
skk = turtle.Turtle() 
skk.speed(10)
skk.shape("circle")
skk.color("blue") 
  
def sqrfunc(size): 
    for i in range(4): 
        skk.fd(size) 
        skk.left(90) 
        size = size-5
  
sqrfunc(146) 
sqrfunc(126) 
sqrfunc(106) 
sqrfunc(86) 
sqrfunc(66) 
sqrfunc(46) 
sqrfunc(26) 
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle8" 的按鈕點按時, 執行 Turtle8 物件中的 prog 方法
doc["turtle8"].bind('click', Turtle8.prog)
</script>
</p>
<!-- turtle8 ends -->
<p></p>
<!-- konva1 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Konva1 = beditor.editor("""# Konva1 繪圖
# 引用 https://konvajs.github.io/ 繪圖
from browser import document, html, window
width = 600
height = 400
konva = window.Konva
# Konva 必須在 canvas 繪圖, 從上方設定,  canvas id 為 "container"
stage = konva.Stage.new({
        "container": 'brython_div',
        "width": width,
        "height": height
    })
layer = konva.Layer.new()
rectX = stage.getWidth() / 2 - 50
rectY = stage.getHeight() / 2 - 25
box = konva.Rect.new({
        "x": rectX,
        "y": rectY,
        "width": 100,
        "height": 50,
        "fill": '#00D2FF',
        "stroke": 'black',
        "strokeWidth": 4,
        "draggable": True
    })
def f1():
    document.body.style.cursor = 'pointer'
    
def f2():
    document.body.style.cursor = 'default'
# add cursor styling
box.on('mouseover', f1())
box.on('mouseout', f2())
layer.add(box)
stage.add(layer)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "konva1" 的按鈕點按時, 執行 Konva1 物件中的 prog 方法
doc["konva1"].bind('click', Konva1.prog)
</script>
</p>
<!-- konva1 ends -->
<p></p>
<!-- ycqsort starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ycqsort = beditor.editor("""# Ycombinator quicksort example
Y = lambda f: lambda *args: f(Y(f))(*args)
quicksort = Y(lambda f:
    lambda x: (
        f([item for item in x if item < x[0]])
        + [y for y in x if x[0] == y]
        + f([item for item in x if item > x[0]])
    ) if x else [])
    
print(quicksort([1, 3, 5, 4, 1, 3, 2]))
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ycqsort" 的按鈕點按時, 執行 Ycqsort 物件中的 prog 方法
doc["ycqsort"].bind('click', Ycqsort.prog)
</script>
</p>
<!-- ycqsort ends -->
<p></p>
<!-- ball starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ball = beditor.editor("""# Ggame ball example
from ggame import (
    App, 
    Color, 
    LineStyle, 
    Sprite, 
    RectangleAsset, 
    ImageAsset,
    CircleAsset, 
    EllipseAsset, 
    PolygonAsset,
)
from browser import document as doc
from browser import html
# for site variable to check socket.gethostname() for image file location
import socket
# 引入既有的id="graphics-column" 標註
graphics_column = doc["graphics-column"]
# 建立內定名稱為 "ggame-canvas" 的 canvas 標註
canvas = html.CANVAS(width = 600, height = 100)
canvas.id = "ggame-canvas"
# 將 canvas 插入 gc 標註中
graphics_column <= canvas
# reverse - change the ball direction
def reverse(b):
    b.direction *= -1
# Set up function for handling screen refresh
def step():
    if ball.go:
        ball.x += ball.direction
        if ball.x + ball.width > myapp.width or ball.x < 0:
            ball.x -= ball.direction
            reverse(ball)
myapp = App()
# Three primary colors with no transparency (alpha = 1.0)
red = Color(0xff0000, 1.0)
green = Color(0x00ff00, 1.0)
blue = Color(0x0000ff, 1.0)
black = Color(0x000000, 1.0)
# define colors and line style
green = Color(0x00ff00, 1)
black = Color(0, 1)
noline = LineStyle(0, black)
# a rectangle asset and sprite to use as background
bg_asset = RectangleAsset(canvas.width, canvas.height, noline, green)
bg = Sprite(bg_asset, (0,0))
# when work with dynamic site
if socket.gethostname() == "localhost":
    site = ""
else:
    # when work with remote site
    site="./.."
ball_asset = ImageAsset(site+"/images/orb-150545_640.png")
ball = Sprite(ball_asset, (0, 0))
# Original image is too big. Scale it to 1/10 its original size
ball.scale = 0.1
# custom attributes
ball.direction = 7
ball.go = True
myapp.run(step)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ball" 的按鈕點按時, 執行 Ball 物件中的 prog 方法
doc["ball"].bind('click', Ball.prog)
</script>
</p>
<!-- ball ends -->
<p></p>
<!-- nfulist starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Nfulist = beditor.editor("""# nfulist
url = "https://nfulist.herokuapp.com/?semester=1092&courseno=2384&column=True"
data = open(url).read()
print(data)
'''
2021 spring:
0741 1a
0764 2a
0776 2b
2384 5j
'''
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "nfulist" 的按鈕點按時, 執行 Nfulist 物件中的 prog 方法
doc["nfulist"].bind('click', Nfulist.prog)
</script>
</p>
<!-- nfulist ends -->
<p></p>
<!-- clock1 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Clock1 = beditor.editor("""# clock1 in Brython
'''Code for the clock'''
# Line drawing
# 導入 doc
from browser import document as doc
from browser import html
import math
import time
import browser.timer
canvas = html.CANVAS(width = 300, height = 200)
canvas.id = "line_drawing"
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["line_drawing"]
ctx = canvas.getContext("2d")

sin, cos = math.sin, math.cos
width, height = 200, 200 # canvas dimensions
ray = 100 # clock ray

background = "SteelBlue"
digits = "#fff"
border = "blue"

def needle(angle, r1, r2):
    '''Draw a needle at specified angle in specified color.
    r1 and r2 are percentages of clock ray.
    '''
    x1 = width / 2 - ray * cos(angle) * r1
    y1 = height / 2 - ray * sin(angle) * r1
    x2 = width / 2 + ray * cos(angle) * r2
    y2 = height / 2 + ray * sin(angle) * r2
    ctx.beginPath()
    ctx.strokeStyle = "#fff"
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.stroke()

def set_clock():
    # erase clock
    ctx.beginPath()
    ctx.fillStyle = background
    ctx.arc(width / 2, height / 2, ray * 0.89, 0, 2 * math.pi)
    ctx.fill()

    # redraw hours
    show_hours()

    # print day
    now_time = time.time()
    now = time.localtime(now_time)
    microsecs = now_time - int(now_time)
    day = now.tm_mday
    ctx.font = "bold 14px Arial"
    ctx.textAlign = "center"
    ctx.textBaseline = "middle"
    ctx.fillStyle = "#000"
    ctx.fillText(day, width * 0.7, height * 0.5)

    # draw needles for hour, minute, seconds
    ctx.lineWidth = 2
    hour = now.tm_hour % 12 + now.tm_min / 60
    angle = hour * 2 * math.pi / 12 - math.pi / 2
    needle(angle, 0.05, 0.45)
    minute = now.tm_min
    angle = minute * 2 *math.pi / 60 - math.pi / 2
    needle(angle, 0.05, 0.7)
    ctx.lineWidth = 1
    second = now.tm_sec + microsecs
    angle = second * 2 * math.pi / 60 - math.pi / 2
    needle(angle, 0.05, 0.8)

def show_hours():
    ctx.beginPath()
    ctx.arc(width / 2, height / 2, ray * 0.05, 0, 2 * math.pi)
    ctx.fillStyle = digits
    ctx.fill()
    for i in range(1, 13):
        angle = i * math.pi / 6 - math.pi / 2
        x3 = width / 2 + ray * cos(angle) * 0.82
        y3 = height / 2 + ray * sin(angle) * 0.82
        ctx.font = "18px Arial"
        ctx.textAlign = "center"
        ctx.textBaseline = "middle"
        ctx.fillText(i, x3, y3)
    # cell for day
    ctx.fillStyle = "#fff"
    ctx.fillRect(width * 0.65, height * 0.47, width * 0.1, height * 0.06)

    ctx.beginPath()
ctx.arc(width / 2, height / 2, ray, 0, 2 * math.pi)
ctx.fillStyle = background
ctx.fill()

browser.timer.set_interval(set_clock, 100)
show_hours()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "clock1" 的按鈕點按時, 執行 Clock1 物件中的 prog 方法
doc["clock1"].bind('click', Clock1.prog)
</script>
</p>
<!-- clock1 ends -->
<p></p>
<!-- fourbar linkage starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Fourbar= beditor.editor("""# Fourbar Linkage Simulation
from browser import document, html
import math
import time
import browser.timer
 
class Coord(object):
    def __init__(self,x,y):
        self.x = x
        self.y = y
 
    def __sub__(self,other):
        # This allows you to substract vectors
        return Coord(self.x-other.x,self.y-other.y)
 
    def __repr__(self):
        # Used to get human readable coordinates when printing
        return "Coord(%f,%f)"%(self.x,self.y)
 
    def length(self):
        # Returns the length of the vector
        return math.sqrt(self.x**2 + self.y**2)
 
    def angle(self):
        # Returns the vector's angle
        return math.atan2(self.y,self.x)
 
def normalize(coord):
    return Coord(
        coord.x/coord.length(),
        coord.y/coord.length()
        )
 
def perpendicular(coord):
    # Shifts the angle by pi/2 and calculate the coordinates
    # using the original vector length
    return Coord(
        coord.length()*math.cos(coord.angle()+math.pi/2),
        coord.length()*math.sin(coord.angle()+math.pi/2)
        )
 
# 點類別
class Point(object):
    # 起始方法
    def __init__(self, x, y):
        self.x = x
        self.y = y
 
    # 繪製方法
    def drawMe(self, g, r):
        self.g = g
        self.r = r
        self.g.save()
        self.g.moveTo(self.x,self.y)
        self.g.beginPath()
        # 根據 r 半徑繪製一個圓代表點的所在位置
        self.g.arc(self.x, self.y, self.r, 0, 2*math.pi, True)
        self.g.moveTo(self.x,self.y)
        self.g.lineTo(self.x+self.r, self.y)
        self.g.moveTo(self.x, self.y)
        self.g.lineTo(self.x-self.r, self.y)
        self.g.moveTo(self.x, self.y)
        self.g.lineTo(self.x, self.y+self.r)
        self.g.moveTo(self.x, self.y)
        self.g.lineTo(self.x, self.y-self.r)
        self.g.restore()
        self.g.stroke()
 
    # 加入 Eq 方法
    def Eq(self, pt):
        self.x = pt.x
        self.y = pt.y
 
    # 加入 setPoint 方法
    def setPoint(self, px, py):
        self.x = px
        self.y = py
 
    # 加上 distance(pt) 方法, 計算點到 pt 的距離
    def distance(self, pt):
        self.pt = pt
        x = self.x - self.pt.x
        y = self.y - self.pt.y
        return math.sqrt(x * x + y * y)
 
    # 利用文字標示點的座標位置
    def tag(self, g):
        self.g = g
        self.g.beginPath()
        self.g.fillText("%d, %d"%(self.x, self.y),self.x, self.y)
        self.g.stroke()
 
 
# Line 類別物件
class Line(object):
 
    # 起始方法
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        # 直線的第一點, 設為線尾
        self.Tail = self.p1
        # 直線組成的第二點, 設為線頭
        self.Head = self.p2
        # 直線的長度屬性
        self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2))
 
    # setPP 以指定頭尾座標點來定義直線
    def setPP(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.Tail = self.p1
        self.Head = self.p2
        self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2))
 
    # setRT 方法 for Line, 應該已經確定 Tail 點, 然後以 r, t 作為設定 Head 的參考
    def setRT(self, r, t):
        self.r = r
        self.t = t
        x = self.r * math.cos(self.t)
        y = self.r * math.sin(self.t)
        self.Tail.Eq(self.p1)
        self.Head.setPoint(self.Tail.x + x,self.Tail.y + y)
 
    # getR 方法 for Line
    def getR(self):
        # x 分量與 y 分量
        x = self.p1.x - self.p2.x
        y = self.p1.y - self.p2.y
        return math.sqrt(x * x + y * y)
 
    # 根據定義 atan2(y,x), 表示 (x,y) 與 正 x 軸之間的夾角, 介於 pi 與 -pi 間
    def getT(self):
        x = self.p2.x - self.p1.x
        y = self.p2.y - self.p1.y
        if (math.fabs(x) < math.pow(10,-100)):
            if(y < 0.0):
                return (-math.pi/2)
            else:
                return (math.pi/2)
        else:
            return math.atan2(y, x)
 
    # setTail 方法 for Line
    def setTail(self, pt):
        self.pt = pt
        self.Tail.Eq(pt)
        self.Head.setPoint(self.pt.x + self.x, self.pt.y + self.y)
 
    # getHead 方法 for Line
    def getHead(self):
        return self.Head
 
    def getTail(self):
        return self.Tail
 
    def drawMe(self, g):
        self.g = g
        self.g.beginPath()
        self.g.moveTo(self.p1.x,self.p1.y)
        self.g.lineTo(self.p2.x,self.p2.y)
        self.g.stroke()
 
    def test(self):
        return ("this is pure test to Inherit")
 
 
class Link(Line):
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.length = math.sqrt(math.pow((self.p2.x - self.p1.x), 2) + math.pow((self.p2.y - self.p1.y), 2))
 
    #g context
    def drawMe(self, g):
        self.g = g
        hole = 5
        radius = 10
        length = self.getR()
        # alert(length)
        # 儲存先前的繪圖狀態
        self.g.save()
        self.g.translate(self.p1.x,self.p1.y)
        #alert(str(self.p1.x)+","+str(self.p1.y))
        #self.g.rotate(-((math.pi/2)-self.getT()))
        self.g.rotate(-math.pi*0.5 + self.getT())
        #alert(str(self.getT()))
        #self.g.rotate(10*math.pi/180)
        #this.g.rotate(-(Math.PI/2-this.getT()));
        # 必須配合畫在 y 軸上的 Link, 進行座標轉換, 也可以改為畫在 x 軸上...
        self.g.beginPath()
        self.g.moveTo(0,0)
        self.g.arc(0, 0, hole, 0, 2*math.pi, True)
        self.g.stroke()
        self.g.moveTo(0,length)
        self.g.beginPath()
        self.g.arc(0,length, hole, 0, 2*math.pi, True)
        self.g.stroke()
        self.g.moveTo(0,0)
        self.g.beginPath()
        self.g.arc(0,0, radius, 0, math.pi, True)
        self.g.moveTo(0+radius,0)
        self.g.lineTo(0+radius,0+length)
        self.g.stroke()
        self.g.moveTo(0,0+length)
        self.g.beginPath()
        self.g.arc(0, 0+length, radius, math.pi, 0, True)
        self.g.moveTo(0-radius,0+length)
        self.g.lineTo(0-radius,0)
        self.g.stroke()
        self.g.restore()
        '''
        self.g.beginPath()
        self.g.fillStyle = "red"
        self.g.font = "bold 18px sans-serif"
        self.g.fillText("%d, %d"%(self.p2.x, self.p2.y),self.p2.x, self.p2.y)
        self.g.stroke()
        '''
 
class Triangle(object):
    def __init__(self, p1, p2, p3):
        self.p1 = p1
        self.p2 = p2
        self.p3 = p3
 
    def getLenp3(self):
        p1 = self.p1
        ret = p1.distance(self.p2)
        return ret
 
    def getLenp1(self):
        p2 = self.p2
        ret = p2.distance(self.p3)
        return ret
 
    def getLenp2(self):
        p1 = self.p1
        ret = p1.distance(self.p3)
        return ret
 
    # 角度
    def getAp1(self):
        ret = math.acos(((self.getLenp2() * self.getLenp2() + self.getLenp3() * self.getLenp3()) - self.getLenp1() * self.getLenp1()) / (2* self.getLenp2() * self.getLenp3()))
        return ret
 
    #
    def getAp2(self):
        ret =math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp3() * self.getLenp3()) - self.getLenp2() * self.getLenp2()) / (2* self.getLenp1() * self.getLenp3()))
        return ret
 
    def getAp3(self):
        ret = math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp2() * self.getLenp2()) - self.getLenp3() * self.getLenp3()) / (2* self.getLenp1() * self.getLenp2()))
        return ret
 
    def drawMe(self, g):
        self.g = g
        r = 5
        # 繪出三個頂點
        self.p1.drawMe(self.g,r)
        self.p2.drawMe(self.g,r)
        self.p3.drawMe(self.g,r)
        line1 = Line(self.p1,self.p2)
        line2 = Line(self.p1,self.p3)
        line3 = Line(self.p2,self.p3)
        # 繪出三邊線
        line1.drawMe(self.g)
        line2.drawMe(self.g)
        line3.drawMe(self.g)
 
    # ends Triangle def
    # 透過三個邊長定義三角形
    def setSSS(self, lenp3, lenp1, lenp2):
        self.lenp3 = lenmidpt = Point(0, 0)
        self.lenp1 = lenp1
        self.lenp2 = lenp2
        self.ap1 = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2* self.lenp2 * self.lenp3))
        self.ap2 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2* self.lenp1 * self.lenp3))
        self.ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2* self.lenp1 * self.lenp2))
 
    # 透過兩個邊長與夾角定義三角形
    def setSAS(self, lenp3, ap2, lenp1):
        self.lenp3 = lenp3
        self.ap2 = ap2
        self.lenp1 = lenp1
        self.lenp2 = math.sqrt((self.lenp3 * self.lenp3 + self.lenp1 * self.lenp1) - 2* self.lenp3 * self.lenp1 * math.cos(self.ap2))
        #等於 SSS(AB, BC, CA)
 
    def setSaSS(self, lenp2, lenp3, lenp1):
        self.lenp2 = lenp2
        self.lenp3 = lenp3
        self.lenp1 = lenp1
        if(self.lenp1 > (self.lenp2 + self.lenp3)):
        #<CAB 夾角為 180 度, 三點共線且 A 介於 BC 之間
            ret = math.pi
        else :
            # <CAB 夾角為 0, 三點共線且 A 不在 BC 之間
            if((self.lenp1 < (self.lenp2 - self.lenp3)) or (self.lenp1 < (self.lenp3 - self.lenp2))):
                ret = 0.0
            else :
            # 透過餘絃定理求出夾角 <CAB 
                ret = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2 * self.lenp2 * self.lenp3))
        return ret
 
    # 取得三角形的三個邊長值
    def getSSS(self):
        temp = []
        temp.append( self.getLenp1() )
        temp.append( self.getLenp2() )
        temp.append( self.getLenp3() )
        return temp
 
    # 取得三角形的三個角度值
    def getAAA(self):
        temp = []
        temp.append( self.getAp1() )
        temp.append( self.getAp2() )
        temp.append( self.getAp3() )
        return temp
 
    # 取得三角形的三個角度與三個邊長
    def getASASAS(self):
        temp = []
        temp.append(self.getAp1())
        temp.append(self.getLenp1())
        temp.append(self.getAp2())
        temp.append(self.getLenp2())
        temp.append(self.getAp3())
        temp.append(self.getLenp3())
        return temp
    #2P 2L return mid P
    def setPPSS(self, p1, p3, lenp1, lenp3):
        temp = []
        self.p1 = p1
        self.p3 = p3
        self.lenp1 = lenp1
        self.lenp3 = lenp3
 
        #bp3 is the angle beside p3 point, cp3 is the angle for line23, p2 is the output
        line31 = Line(p3, p1)
        self.lenp2 = line31.getR()
        #這裡是求角3
        ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2 * self.lenp1 * self.lenp2))
        bp3 = line31.getT()
        cp3 = bp3 - ap3
        temp.append(p3.x + self.lenp1*math.cos(cp3))#p2.x
        temp.append(p3.y + self.lenp1*math.sin(cp3))#p2.y
        return temp
 
def tag(g, p):
    None
 
midpt = Point(0, 0)
tippt = Point(0, 0)
contour = []
# 執行繪圖流程, 注意 x, y 為 global variables
def draw():
    global theta, midpt, oldpt
    context.clearRect(0, 0, canvas.width, canvas.height)
    line1.drawMe(context)
    line2.drawMe(context)
    line3.drawMe(context)
    #triangle1.drawMe(context)
    #triangle2.drawMe(context)
    theta += dx
    p2.x = p1.x + line1.length*math.cos(theta*degree)
    p2.y = p1.y - line1.length*math.sin(theta*degree)
    p3.x, p3.y = triangle2.setPPSS(p2,p4,link2_len,link3_len)
    # 計算垂直單位向量
    a = Coord(p3.x, p3.y)
    b = Coord(p2.x, p2.y)
    normal = perpendicular(normalize(a-b))
    midpt.x = (p2.x + p3.x)/2
    midpt.y = (p2.y + p3.y)/2
    tippt.x = midpt.x + 150*normal.x
    tippt.y = midpt.y + 150*normal.y
    if theta < 360:
        contour.append((tippt.x, tippt.y))
    context.beginPath()
    context.moveTo(midpt.x, midpt.y)
    context.lineTo(tippt.x, tippt.y)
    # 利用 fillRect 繪製一個長寬各 1 單位的正方形
    for i in range(len(contour)):
        context.fillRect(contour[i][0], contour[i][1], 1, 1)
    context.stroke()
    #p1.tag(context)
 
# 以上為相關函式物件的定義區
# 全域變數
# 幾何位置輸入變數
x=10
y=10
r=10
 
# 畫布與繪圖內容
# 其他輸入變數
theta = 0
degree = math.pi/180.0
dx = 2
dy = 4
 
#set p1.p2.p3.p4 position
lift = 10
p1 =  Point(150,100+lift)
p2 =  Point(150,200+lift)
p3 =  Point(300,300+lift)
p4 =  Point(350,100+lift)
 
#accord position create link
line1 =  Link(p1,p2)
line2 =  Link(p2,p3)
line3 =  Link(p3,p4)
line4 =  Link(p1,p4)
line5 =  Link(p2,p4)
 
link2_len = p2.distance(p3)
link3_len = p3.distance(p4)
 
#link2_len = line1.getR()
#link3_len = line3.getR()
#alert(str(link2_len)+','+str(link3_len))
 
triangle1 =  Triangle(p1,p2,p4)
triangle2 =  Triangle(p2,p3,p4)
 
# 視窗載入時執行內容
# 繪圖畫布設定

canvas = html.CANVAS(width = 600, height = 450)
canvas.id = "line_drawing"
brython_div = document["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = document["line_drawing"]
context = canvas.getContext("2d")
 
# 座標轉換, 移動 canvas.height 並且 y 座標變號, 也就是將原點座標移到畫面左下角
context.translate(0,canvas.height)
context.scale(1,-1)
 
#以間隔 20 micro seconds 重複呼叫 draw()
browser.timer.set_interval(draw,20)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "fourbar" 的按鈕點按時, 執行 Fourbar 物件中的 prog 方法
doc["fourbar"].bind('click', Fourbar.prog)
</script>
</p>
<!-- fourbar linkage ends -->
<p><button id="keyword">Keyword</button><button id="ex1">Ex1</button><button id="ex2">Ex2</button><button id="ex3">Ex3</button><button id="ex4">Ex4</button><button id="forloop">Ex5</button><button id="guess">Guess</button><button id="autoguess">Autoguess</button><button id="lottery">大樂透</button><button id="weleadlottery">威力彩</button><button id="temp">Temp</button><button id="draw">Draw</button><button id="flag">Flag</button><button id="bezier">Bezier</button><button id="clock1">clock1</button><button id="fourbar">Fourbar</button><button id="turtle1">Turtle1</button><button id="turtle2">Turtle2</button><button id="turtle3">Turtle3</button><button id="turtle4">Turtle4</button><button id="turtle5">Turtle5</button><button id="turtle6">Turtle6</button><button id="turtle7">Turtle7</button><button id="turtle8">Turtle8</button><button id="konva1">Konva1</button><button id="bunny">Bunny</button><button id="ball">Ball</button><button id="spur">Spur</button><button id="ycqsort">Ycqsort</button><button id="nfulist">nfulist</button><button id="clear">Clear</button></p>
<h4>參考資料:</h4>
<p><a href="/downloads/turtle_intro.pdf">turtle_intro.pdf</a></p>
<p><a href="/downloads/turtle_intro2.pdf">turtle_intro2.pdf</a></p>
<p>其他擷取程式的方式: <a href="http://mde.tw/2017springvcp/blog/web-based-python.html">http://mde.tw/2017springvcp/blog/web-based-python.html</a></p><h3>改寫練習</h3>
<p>如何將 <a href="https://medium.com/swlh/sick-of-javascript-just-use-browser-python-4b9679efe08b">https://medium.com/swlh/sick-of-javascript-just-use-browser-python-4b9679efe08b</a> 中的範例, 直接放入<a href="http://mde.tw/cp2021/content/%E8%A7%A3%E9%A1%8C%E7%B7%B4%E7%BF%92.html">解題練習</a>環境中執行? 又如何利用 <a href="https://github.com/mdecourse/webgame">https://github.com/mdecourse/webgame</a> 作為 template, 將程式碼轉移至獨立的網頁中運行.</p>
<p>在對上述特定網頁上的程式進行改寫至<a href="http://mde.tw/cp2021/content/%E8%A7%A3%E9%A1%8C%E7%B7%B4%E7%BF%92.html">解題練習</a>與 <a href="https://github.com/mdecourse/webgame">webgame template</a> 之前, 我們先來看看, 以下這個在<a href="http://mde.tw/cp2021/content/%E8%A7%A3%E9%A1%8C%E7%B7%B4%E7%BF%92.html">解題練習</a>網頁中的 <a href="https://gist.github.com/mdecourse/379f02862e9dfd95dbc5241d4faa2ad4">clock 程式</a>, 到底是如何完成的.</p>
<p>開始:</p>
<p style="padding-left: 30px;">因為<a href="http://mde.tw/cp2021/content/%E8%A7%A3%E9%A1%8C%E7%B7%B4%E7%BF%92.html">解題練習</a>的網頁中已經事先建立 id="brython_div" 的 div 標註, 因此隨後可以利用此一 div, 插入其他所需要的 html 內容, 例如: 放入指定 id 名稱的 canvas 標註.</p>
<p style="padding-left: 30px;">原始的<a href="https://gist.github.com/mdecourse/3db55f124185def5aac8e5d51579c484">程式碼</a>. 總計需要:</p>
<p style="padding-left: 30px;">id = "game-board" 的 canvas</p>
<p style="padding-left: 30px;">id = "score" 的 h3 或 div</p>
<p style="padding-left: 30px;">id = "high-score" 的 div</p>
<p style="padding-left: 30px;">id= instructions-btn 的 button</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 從 browser 導入 document 並設為 doc
from browser import document as doc
# 使用者可以透過 window 當作介面使用其他 Javascript 功能
from browser import html, window
# 用於定時執行特定函式
import browser.timer
# 導入數學模組
import math
# 導入亂數模組
from random import random, randint
 
def game():
    global px, py, tc, gs, ax, ay, trail, tail, score
    # px 為 snake 第一個點的 x 座標, 增量值為 xv
    px += xv
    py += yv
    # 若 px 為負值則設定為 tc -1, 表示 tc 為 x 方向 limit
    if px &lt; 0:
        px = tc-1
    if px &gt; tc-1:
        px = 0
    if py &lt; 0:
        py = tc-1
    if py &gt; tc-1:
        py = 0
    ctx.fillStyle = "black"
    # 畫布填入黑色
    ctx.fillRect(0, 0, canvas.width, canvas.height)
    # snake 為 lime 色
    ctx.fillStyle = "lime"
    # trail 為節數
    # gs 為方塊 pixel 數
    for i in range(len(trail)):
        ctx.fillRect(trail[i][0]*gs, trail[i][1]*gs, gs-2, gs-2)
        if trail[i][0] == px and trail[i][1] == py:
            score = score if paused else 0
            # snake 共有五節
            tail = 5
    trail.insert(0, [px, py])
    while len(trail) &gt; tail:
        trail.pop()
    # ax, ay 為紅點座標
    if ax == px and ay == py:
        tail += 1
        ax = math.floor(random()*tc)
        ay = math.floor(random()*tc)
        score += 1
    update_score(score)
    ctx.fillStyle = "red"
    ctx.fillRect(ax*gs, ay*gs, gs-2, gs-2)
 
def update_score(new_score):
    global high_score
    score.value = "Score: " + str(new_score)
    #doc["score"].innerHTML = "Score: " + str(new_score)
    if new_score &gt; high_score:
        high_score.value = "High Score: " + str(new_score)
        #doc["high-score"].innerHTML = "High Score: " + str(new_score)
        high_score = new_score
 
def key_push(evt):
    global xv, yv, pre_pause, paused
    key = evt.keyCode
    if key == 37 and not paused:
        xv = -1
        yv = 0
    elif key == 38 and not paused:
        xv = 0
        yv = -1
    elif key == 39 and not paused:
        xv = 1
        yv = 0
    elif key == 40 and not paused:
        xv = 0
        yv = 1
    elif key == 32:
        temp = [xv, yv]
        xv = pre_pause[0]
        yv = pre_pause[1]
        pre_pause = [*temp]
        paused = not paused
 
def update_score(new_score):
    global high_score
    score_doc.value = "Score: " + str(new_score)
    if new_score &gt; high_score:
        high_score_doc.value = "High Score: " + str(new_score)
        high_score = new_score
 
def key_push(evt):
    global xv, yv, pre_pause, paused
    key = evt.keyCode
    if key == 37 and not paused:
        xv = -1
        yv = 0
    elif key == 38 and not paused:
        xv = 0
        yv = -1
    elif key == 39 and not paused:
        xv = 1
        yv = 0
    elif key == 40 and not paused:
        xv = 0
        yv = 1
    elif key == 32:
        temp = [xv, yv]
        xv = pre_pause[0]
        yv = pre_pause[1]
        pre_pause = [*temp]
        paused = not paused
 
def show_instructions(evt):
    print("test")
     
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width = 800, height = 800)
canvas.id = "game-board"
canvas.width = 800
canvas.height = 600
brython_div = doc["brython_div"]
brython_div &lt;= canvas
 
score_doc = html.DIV("score")
score_doc.id = "score"
brython_div &lt;= score_doc
 
high_score_doc = html.DIV("high-score")
high_score_doc.id = "high-score"
brython_div &lt;= high_score_doc
 
button = html.BUTTON("Button")
button.id = "instructions-btn"
brython_div &lt;= button
 
score = 0
high_score = 0
 
px = py = 10
# gs*tc = canvas width and height
gs = 20
tc = 40
ax = ay = 15
xv = yv = 0
trail = []
tail = 5
 
pre_pause = [0,0]
paused = False
ctx = canvas.getContext("2d")
doc.addEventListener("keydown", key_push)
instructions_btn = doc["instructions-btn"]
instructions_btn.addEventListener("click", show_instructions)
browser.timer.set_interval(game, 1000/15)</pre>
<p style="padding-left: 30px;"></p>
<p></p><h3>期中專案</h3>
<p>這個計算機程式<span style="background-color: #ffff99;">個人專案</span>將從 Week1-Week7 期間執行, 並在 Week8-Week9 採網際簡報 (<a href="https://revealjs.com/">Reveal.js</a>) 與 OBS + Youtube 直播並錄影方式發表.</p>
<h4>個人專案 template:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/webgame">https://github.com/mdecourse/webgame</a></p>
<h4>利用 <a href="https://brython.info/">Brython</a> 程式庫 <a href="https://github.com/mdecourse/ggame">ggame</a> 來開發網際遊戲或設計模擬程式:</h4>
<p style="padding-left: 30px;"><a href="https://mdecourse.github.io/webgame/bs.html" rel="nofollow">https://mdecourse.github.io/webgame/bs.html</a></p>
<p style="padding-left: 30px;"><a href="https://mdecourse.github.io/webgame/bunny.html" rel="nofollow">https://mdecourse.github.io/webgame/bunny.html</a></p>
<p style="padding-left: 30px;"><a href="https://mdecourse.github.io/webgame/spacewar.html" rel="nofollow">https://mdecourse.github.io/webgame/spacewar.html</a></p>
<h4>Brython documentation:</h4>
<p style="padding-left: 30px;"><a href="https://brython.info/static_doc/en/intro.html">https://brython.info/static_doc/en/intro.html</a></p>
<h4>ggame documentation:</h4>
<p style="padding-left: 30px;"><a href="https://ggame.readthedocs.io/en/latest/index.html">https://ggame.readthedocs.io/en/latest/index.html</a></p>
<p><a href="http://mde.tw/cp2021/downloads/ggame-readthedocs-io-en-latest.pdf">http://mde.tw/cp2021/downloads/ggame-readthedocs-io-en-latest.pdf</a></p>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-4717-3">Foundation Game Design with HTML5 and JavaScript</a> (校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-5801-8">Advanced Game Design with HTML5 and JavaScript</a> (校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-3252-1">Introducing JavaScript Game Development</a> (校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-6338-8">Physics for JavaScript Games, Animation, and Simulations</a> (校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-6539-9">Building JavaScript Games</a> (校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-0952-3">Build Your Own 2D Game Engine and Create Great Web Games</a> (校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-2583-7">Building a 2D Game Physics Engine</a> (校園網路下載電子書)</p><h2>ggame</h2>
<p>參考的網際程式庫: <a href="https://github.com/mdecourse/ggame">https://github.com/mdecourse/ggame</a>, 使用說明: <a href="https://ggame.readthedocs.io/en/latest/index.html">https://ggame.readthedocs.io/en/latest/index.html</a></p>
<p>由於此 ggame 程式庫使用</p>
<p>jquery-3.3.1.min.js - <a href="https://jquery.com/">https://jquery.com/</a> <br/>jquery-ui.1.12.1.min.js - <a href="https://jqueryui.com/">https://jqueryui.com/</a> <br/>pixi-4.8.2.min.js - <a href="http://www.pixijs.com/">http://www.pixijs.com/</a> <br/>buzz-1.2.1.js - <a href="http://buzz.jaysalvat.com/">http://buzz.jaysalvat.com/</a> <br/>brython-3.7.0.js - <a href="https://brython.info/">https://brython.info/</a> <br/>brython_stdlib-3.7.0.js</p>
<p>因此使用者必須對上述程式庫有些了解後, 再深入研究如何使用  ggame 程式庫開發專案套件.</p>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/Runpython-IntroProgramming/Course-Syllabus/wiki">https://github.com/Runpython-IntroProgramming/Course-Syllabus/wiki</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/Runpython-IntroProgramming">https://github.com/Runpython-IntroProgramming</a></p>
<h4>module_exists</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># ggame source code
# prepared for cp2021
def module_exists(module_name):
    try:
        __import__(module_name)
    except ImportError:
        return False
    else:
        return True

if module_exists('browser') and module_exists('javascript'):

    from browser import window, document
    #from javascript import JSObject, JSConstructor

    # 利用 Brython browser 模組中的 window 物件導入  PIXI Javascript 程式庫
    # 其中 JSObject 可以直接透過 window 導入 Javascript function
    # JSConstructor 則用來轉換 class 物件
    GFX = window.PIXI
    GFX_Rectangle = GFX.Rectangle.new
    GFX_Texture = GFX.Texture.new
    GFX_Texture_fromImage = GFX.Texture.fromImage.new
    GFX_Sprite = GFX.Sprite.new
    GFX_Graphics = GFX.Graphics.new()
    GFX_Text = GFX.Text.new
    # need to check with PIXI source code for autoDetectRender
    GFX_DetectRenderer = GFX.autoDetectRenderer
    # 利用 JSObject 以及 window 導入 buzz.js
    SND = window.buzz
    SND_Sound = SND.sound.new
    
    class GFX_Window(object):
    
        def __init__(self, width, height, onclose):
            # 假如要執行時額外跳出一個視窗
            #self._w = window.open("", "")
            # 在原先的視窗中執行
            self._w = window
            self._stage = GFX.Container.new()
            self.width = width if width != 0 else int(window.innerWidth * 0.9)
            self.height = height if height != 0 else int(window.innerHeight * 0.9)
            self._renderer = GFX.autoDetectRenderer(self.width, self.height, {'transparent':True})
            self._w.document.body.appendChild(self._renderer.view)
            self._w.onunload = onclose
  
        def bind(self, evtspec, callback):
            self._w.document.body.bind(evtspec, callback)
      
        def add(self, obj):
            self._stage.addChild(obj)
        
        def remove(self, obj):
            self._stage.removeChild(obj)
        
        def animate(self, stepcallback):
            self._renderer.render(self._stage)
            self._w.requestAnimationFrame(stepcallback)
        
        def destroy(self):
            SND.all().stop()
            self._stage.destroy()

</pre>
<h4>class App</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class App(object):
    """
    The `ggame.App` class is a (typically subclassed) class that encapsulates
    handling of the display system, and processing user events. The `ggame.App` 
    class also manages lists of all `ggame.Sprite` instances in the application.

    When subclassing `ggame.App` you may elect to instantiate most of your
    sprite objects in the initialization section.

    Processing that must occur on a per-frame basis may be included by overriding
    the `ggame.App.step` method. This is also an appropriate location to call
    similar 'step' methods for your various customized sprite classes.

    Once your application class has been instantiated, begin the frame drawing
    process by calling its `ggame.App.run` method.

    NOTE: Only **one** instance of an `ggame.App` class or subclass may be 
    instantiated at a time.
    """
    spritelist = []
    """List of all sprites currently active in the application."""
    _eventdict = {}
    _spritesdict = {}
    _spritesadded = False
    _win = None

    def __init__(self, *args):
        """
        The `ggame.App` class is called either by specifying the desired app window size
        in pixels, as two parameters (e.g. `myapp = App(640,480)`), or by providing
        no size parameters at all (e.g. `myapp = App()`), in which case, the full browser
        window size is used.
        """
        if App._win == None and (len(args) == 0 or len(args) == 2):
            x = y = 0
            if len(args) == 2:
                x = args[0]
                y = args[1]
            App._win = GFX_Window(x, y, App._destroy)
            self.width = App._win.width
            self.height = App._win.height
            # Add existing sprites to the window
            if not App._spritesadded and len(App.spritelist) &gt; 0:
                App._spritesadded = True
                for sprite in App.spritelist:
                    App._win.add(sprite.GFX)
            App._win.bind(KeyEvent.keydown, self._keyEvent)
            App._win.bind(KeyEvent.keyup, self._keyEvent)
            App._win.bind(KeyEvent.keypress, self._keyEvent)
            App._win.bind(MouseEvent.mousewheel, self._mouseEvent)
            App._win.bind(MouseEvent.mousemove, self._mouseEvent)
            App._win.bind(MouseEvent.mousedown, self._mouseEvent)
            App._win.bind(MouseEvent.mouseup, self._mouseEvent)
            App._win.bind(MouseEvent.click, self._mouseEvent)
            App._win.bind(MouseEvent.dblclick, self._mouseEvent)

        
    def _routeEvent(self, event, evtlist):
        for callback in reversed(evtlist):
            if not event.consumed:
                callback(event)
        
    def _keyEvent(self, hwevent):
        evtlist = App._eventdict.get(
            (hwevent.type, KeyEvent.keys.get(hwevent.keyCode,0)), [])
        evtlist.extend(App._eventdict.get((hwevent.type, '*'), []))
        if len(evtlist) &gt; 0:
            evt = KeyEvent(hwevent)
            self._routeEvent(evt, evtlist)

    def _mouseEvent(self, hwevent):
        evtlist = App._eventdict.get(hwevent.type, [])
        if len(evtlist) &gt; 0:
            evt = MouseEvent(hwevent)
            self._routeEvent(evt, evtlist)

    @classmethod
    def _add(cls, obj):
        if App._win != None:
            App._win.add(obj.GFX)
        App.spritelist.append(obj)
        if type(obj) not in App._spritesdict:
            App._spritesdict[type(obj)] = []
        App._spritesdict[type(obj)].append(obj)

    @classmethod
    def _remove(cls, obj):
        if App._win != None:
            App._win.remove(obj.GFX)
        App.spritelist.remove(obj)
        App._spritesdict[type(obj)].remove(obj)
        
    def _animate(self, dummy):
        if self.userfunc:
            self.userfunc()
        else:
            self.step()
        App._win.animate(self._animate)

    @classmethod
    def _destroy(cls, *args):
        """
        This will close the display window/tab, remove all references to 
        sprites and place the `App` class in a state in which a new 
        application could be instantiated.
        """ 
        App._win.destroy()
        App._win = None
        for s in list(App.spritelist):
            s.destroy()
        App.spritelist = []
        App._spritesdict = {}
        App._eventdict = {}
        App._spritesadded = False

    @classmethod
    def listenKeyEvent(cls, eventtype, key, callback):
        """
        Register to receive keyboard events. The `eventtype` parameter is a 
        string that indicates what type of key event to receive (value is one
        of: `'keydown'`, `'keyup'` or `'keypress'`). The `key` parameter is a 
        string indicating which key (e.g. `'space'`, `'left arrow'`, etc.) to 
        receive events for. The `callback` parameter is a reference to a 
        function or method that will be called with the `ggame.KeyEvent` object
        when the event occurs.

        See the source for `ggame.KeyEvent.keys` for a list of key names
        to use with the `key` paramter.
        """
        evtlist = App._eventdict.get((eventtype, key), [])
        evtlist.append(callback)
        App._eventdict[(eventtype, key)] = evtlist

    @classmethod
    def listenMouseEvent(cls, eventtype, callback):
        """
        Register to receive mouse events. The `eventtype` parameter is
        a string that indicates what type of mouse event to receive (
        value is one of: `'mousemove'`, `'mousedown'`, `'mouseup'`, `'click'`, 
        `'dblclick'` or `'mousewheel'`). The `callback` parameter is a 
        reference to a function or method that will be called with the 
        `ggame.MouseEvent` object when the event occurs.
        """
        evtlist = App._eventdict.get(eventtype, [])
        evtlist.append(callback)
        App._eventdict[eventtype] = evtlist

    @classmethod
    def unlistenKeyEvent(cls, eventtype, key, callback):
        """
        Use this method to remove a registration to receive a particular
        keyboard event. Arguments must exactly match those used when
        registering for the event.
        """
        App._eventdict[(eventtype,key)].remove(callback)

    @classmethod
    def unlistenMouseEvent(cls, eventtype, callback):
        """
        Use this method to remove a registration to receive a particular
        mouse event. Arguments must exactly match those used when
        registering for the event.
        """
        App._eventdict[eventtype].remove(callback)

    @classmethod
    def getSpritesbyClass(cls, sclass):
        """
        Returns a list of all active sprites of a given class.
        """
        return App._spritesdict.get(sclass, [])
        
    def step(self):
        """
        The `ggame.App.step` method is called once per animation frame. Override
        this method in your own subclass of `ggame.App` to perform periodic 
        calculations, such as checking for sprite collisions, or calling
        'step' functions in your own customized sprite classes.

        The base class `ggame.App.step` method is empty and is intended to be overriden.
        """
        pass

    def run(self, userfunc = None):
        """
        Calling the `ggame.App.run` method begins the animation process whereby the 
        `ggame.App.step` method is called once per animation frame.
        """
        self.userfunc = userfunc
        App._win.animate(self._animate)
</pre>
<h4>class Sprite</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class Sprite(object):
    """
    The `ggame.Sprite` class combines the idea of a visual/graphical asset, a
    position on the screen, and *behavior*. Although the `ggame.Sprite` can be
    used as-is, it is generally subclassed to give it the desired behavior.

    When subclassing the `ggame.Sprite` class, you may customize the initialization
    code to use a specific asset. A 'step' or 'poll' method may be added
    for handling per-frame actions (e.g. checking for collisions). Step or poll
    functions are not automatically called by the `ggame.App` class, but you
    may subclass the `ggame.App` class in order to do this.

    Furthermore, you may wish to define event callback methods in your customized
    sprite class. With customized creation, event handling, and periodic processing
    you can achieve fully autonomous behavior for your class. 
    """
 
    _rectCollision = "rect"
    _circCollision = "circ"
    
    def __init__(self, asset, pos=(0,0)):
        """
        The `ggame.Sprite` must be created with an existing graphical `asset`.
        An optional `pos` or position may be provided, which specifies the 
        starting (x,y) coordinates of the sprite on the screen. By default,
        the position of a sprite defines the location of its upper-left hand
        corner. This behavior can be modified by customizing the `center` of
        the sprite.

        Example: player = Sprite(ImageAsset("player.png", (100,100))
        """
        self._index = 0
        if type(asset) == ImageAsset:
            self.asset = asset
            try:
                #self.GFX = GFX_Sprite()
                self.GFX = GFX_Sprite(asset.GFX) # GFX is PIXI Sprite
            except:
                self.GFX = None
        elif type(asset) in [RectangleAsset, 
            CircleAsset, 
            EllipseAsset, 
            PolygonAsset,
            LineAsset,
            ]:
            self.asset = asset
            self.GFX = asset.GFX.clone() # GFX is PIXI Graphics (from Sprite)
            self.GFX.visible = True
        elif type(asset) in [TextAsset]:
            self.asset = asset._clone()
            self.GFX = self.asset.GFX # GFX is PIXI Text (from Sprite)
            self.GFX.visible = True
        self.position = pos
        """Tuple indicates the position of the sprite on the screen."""
        self._setExtents()
        self.rectangularCollisionModel()
        App._add(self)
        
    def _setExtents(self):
        """
        update min/max x and y based on position, center, width, height
        """
        self.xmin = int(self.x - self.fxcenter * self.width)
        self.xmax = int(self.x + (1 - self.fxcenter) * self.width)
        self.ymin = int(self.y - self.fycenter * self.height)
        self.ymax = int(self.y + (1 - self.fycenter) * self.height)
        self.radius = int((self.width + self.height)/4)
        #self.xcenter = int(self.x + (1 - self.fxcenter) * self.width / 2)
        #self.ycenter = int(self.y + (1 - self.fycenter) * self.height / 2)

    def firstImage(self):
        """
        Select and display the *first* image used by this sprite.
        """
        self.GFX.texture = self.asset[0]

    def lastImage(self):
        """
        Select and display the *last* image used by this sprite.
        """
        self.GFX.texture = self.asset[-1]

    def nextImage(self, wrap = False):
        """
        Select and display the *next* image used by this sprite.
        If the current image is already the *last* image, then
        the image is not advanced.

        If the optional `wrap` parameter is set to `True`, then calling
        `ggame.Sprite.nextImage` on the last image will cause the *first*
        image to be loaded.
        """
        self._index += 1
        if self._index &gt;= len(self.asset):
            if wrap:
                self._index = 0
            else:
                self._index = len(self.asset)-1
        self.GFX.texture = self.asset[self._index]

    def prevImage(self, wrap = False):
        """
        Select and display the *previous* image used by this sprite.
        If the current image is already the *first* image, then
        the image is not changed.

        If the optional `wrap` parameter is set to `True`, then calling
        `ggame.Sprite.prevImage` on the first image will cause the *last*
        image to be loaded.
        """
        self._index -= 1
        if self._index &lt; 0:
            if wrap:
                self._index = len(self.asset)-1
            else:
                self._index = 0
        self.GFX.texture = self.asset[self._index]

    def setImage(self, index=0):
        """
        Select the image to display by giving its `index`, where an index
        of zero represents the *first* image in the asset.

        This is equivalent to setting the `ggame.Sprite.index` property
        directly.
        """
        self.index = index

    def rectangularCollisionModel(self):
        """
        Calling this method will configure the sprite to use a simple 
        rectangular collision model when checking for overlap with 
        other sprites. In this model, the "collideable" area of the sprite
        is equal to the rectangle of the asset image. If the sprite asset
        image includes a large transparent margin, this may cause the 
        collision box to be larger than desired.
        """
        self._collisionStyle = type(self)._rectCollision

    def circularCollisionModel(self):
        """
        Calling the sprite's `ggame.Sprite.circularCollisionModel` method 
        will configure the sprite to use a simple circular collision model 
        when checking for overlap with other sprites. In this model, the
        "collideable" area of the sprite is regarded as a circle whose
        diameter is equal to the mean of the width and height of the 
        asset image.
        """
        self._collisionStyle = type(self)._circCollision

    @property
    def index(self):
        """This is an integer index in to the list of images available for this sprite."""
        return self._index
        
    @index.setter
    def index(self, value):
        self._index = value
        try:
            self.GFX.texture = self.asset[self._index]
        except:
            self._index = 0
            self.GFX.texture = self.asset[self._index]

    @property
    def width(self):
        """
        This is an integer representing the display width of the sprite.
        Assigning a value to the width will scale the image horizontally.
        """
        return self.GFX.width
        
    @width.setter
    def width(self, value):
        self.GFX.width = value
        self._setExtents()

    @property
    def height(self):
        """
        This is an integer representing the display height of the sprite.
        Assigning a value to the height will scale the image vertically.
        """
        return self.GFX.height

    @height.setter
    def height(self, value):
        self.GFX.height = value
        self._setExtents()
        
    @property
    def x(self):
        """
        This represents the x-coordinate of the sprite on the screen. Assigning
        a value to this attribute will move the sprite horizontally.
        """
        return self.GFX.position.x
        
    @x.setter
    def x(self, value):
        self.GFX.position.x = value
        self._setExtents()
        
    @property
    def y(self):
        """
        This represents the y-coordinate of the sprite on the screen. Assigning
        a value to this attribute will move the sprite vertically.
        """
        return self.GFX.position.y
        
    @y.setter
    def y(self, value):
        self.GFX.position.y = value
        self._setExtents()

    @property
    def position(self):
        """
        This represents the (x,y) coordinates of the sprite on the screen. Assigning
        a value to this attribute will move the sprite to the new coordinates.
        """
        return (self.GFX.position.x, self.GFX.position.y)
        
    @position.setter
    def position(self, value):
        self.GFX.position.x = value[0]
        self.GFX.position.y = value[1]
        self._setExtents()
        
    @property
    def fxcenter(self):
        """
        This represents the horizontal position of the sprite "center", as a floating
        point number between 0.0 and 1.0. A value of 0.0 means that the x-coordinate
        of the sprite refers to its left hand edge. A value of 1.0 refers to its 
        right hand edge. Any value in between may be specified. Values may be assigned
        to this attribute. 
        """
        try:
            return self.GFX.anchor.x
            self._setExtents()
        except:
            return 0.0
        
    @fxcenter.setter
    def fxcenter(self, value):
        """
        Float: 0-1
        """
        try:
            self.GFX.anchor.x = value
            self._setExtents()
        except:
            pass
        
    @property
    def fycenter(self):
        """
        This represents the vertical position of the sprite "center", as a floating
        point number between 0.0 and 1.0. A value of 0.0 means that the x-coordinate
        of the sprite refers to its top edge. A value of 1.0 refers to its 
        bottom edge. Any value in between may be specified. Values may be assigned
        to this attribute. 
        """
        try:
            return self.GFX.anchor.y
        except:
            return 0.0
        
    @fycenter.setter
    def fycenter(self, value):
        """
        Float: 0-1
        """
        try:
            self.GFX.anchor.y = value
            self._setExtents()
        except:
            pass

    @property
    def center(self):
        """
        This attribute represents the horizontal and vertical position of the 
        sprite "center" as a tuple of floating point numbers. See the 
        descriptions for `ggame.Sprite.fxcenter` and `ggame.Sprite.fycenter` for 
        more details.
        """
        try:
            return (self.GFX.anchor.x, self.GFX.anchor.y)
        except:
            return (0.0, 0.0)
        
    @center.setter
    def center(self, value):
        try:
            self.GFX.anchor.x = value[0]
            self.GFX.anchor.y = value[1]
            self._setExtents()
        except:
            pass

    @property
    def visible(self):
        """
        This boolean attribute may be used to change the visibility of the sprite. Setting
        `ggame.Sprite.visible` to `False` will prevent the sprite from rendering on the 
        screen.
        """
        return self.GFX.visible

    @visible.setter
    def visible(self, value):
        self.GFX.visible = value

    @property
    def scale(self):
        """
        This attribute may be used to change the size of the sprite ('scale' it) on the 
        screen. Value may be a floating point number. A value of 1.0 means that the sprite
        image will keep its original size. A value of 2.0 would double it, etc.
        """
        return self.GFX.scale.x
        
    @scale.setter
    def scale(self, value):
        self.GFX.scale.x = value
        self.GFX.scale.y = value
        self._setExtents()

    @property
    def rotation(self):
        """
        This attribute may be used to change the rotation of the sprite on the screen.
        Value may be a floating point number. A value of 0.0 means no rotation. A value 
        of 1.0 means  a rotation of 1 radian in a counter-clockwise direction. One radian
        is 180/pi or approximately 57.3 degrees.
        """
        return -self.GFX.rotation
        
    @rotation.setter
    def rotation(self, value):
        self.GFX.rotation = -value

    def collidingWith(self, obj):
        """
        Return a boolean True if this sprite is currently overlapping the sprite 
        referenced by `obj`. Uses the collision model specified (rectangular, by 
        default). Collision/overlap decision is based purely on the overall, gross
        dimensions of the image rectangle. There is no attempt to verify that 
        non-transparent pixels in one sprite are actually overlapping visible
        pixels in another.
        """
        if self is obj:
            return False
        elif self._collisionStyle == obj._collisionStyle == type(self)._circCollision:
            dist2 = (self.x - obj.x)**2 + (self.y - obj.y)**2
            return dist2 &lt; (self.radius + obj.radius)**2
        else:
            return (not (self.xmin &gt; obj.xmax
                or self.xmax &lt; obj.xmin
                or self.ymin &gt; obj.ymax
                or self.ymax &lt; obj.ymin))

    def collidingWithSprites(self, sclass = None):
        """
        Return a list of sprite objects identified by the `sclass` parameter
        that are currently colliding with (that is, with which the `ggame.Sprite.collidingWith`
        method returns True) this sprite. If `sclass` is set to `None` (default), then
        all other sprites are checked for collision, otherwise, only sprites whose
        class matches `sclass` are checked.
        """
        if sclass is None:
            slist = App.spritelist
        else:
            slist = App.getSpritesbyClass(sclass)
        return list(filter(self.collidingWith, slist))

    def destroy(self):
        """
        Call the `ggame.Sprite.destroy` method to prevent the sprite from being displayed,
        or checked in collision detection. If you only want to prevent a sprite from being
        displayed, set the `ggame.Sprite.visible` attribute to `False`.
        """
        App._remove(self)
        self.GFX.destroy()

</pre>
<h4>class Frame</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class Frame(object):
    """
    Frame is a utility class for expressing the idea of a rectangular region.
    """
    
    def __init__(self, x, y, w, h):
        """
        Initialization for the `ggame.Frame` objects.

        `x` and `y` are coordinates of the upper left hand corner of the frame.
     
        `w` and `h` are the width and height of the frame rectangle.
        """

        self.GFX = GFX_Rectangle(x,y,w,h)
        """
        `GFX` is a reference to the underlying object provided by the system.
        """
        self.x = x
        """
        X-coordinate of the upper left hand corner of this `ggame.Frame`.
        """
        self.y = y
        """
        Y-coordinate of the upper left hand corner of this `ggame.Frame`.
        """
        self.w = w
        """
        Width of the `ggame.Frame`.
        """
        self.h = h
        """
        Height of the `ggame.Frame`.
        """

    @property
    def x(self):
        return self.GFX.x

    @x.setter
    def x(self, value):
        self.GFX.x = value
        
    @property
    def y(self):
        return self.GFX.y

    @y.setter
    def y(self, value):
        self.GFX.y = value

    @property
    def w(self):
        return self.GFX.width

    @w.setter
    def w(self, value):
        self.GFX.width = value
        
    @property
    def h(self):
        return self.GFX.height
        
    @h.setter
    def h(self, value):
        self.GFX.height = value

    @property
    def center(self):
        """
        `center` property computes a coordinate pair (tuple) for the 
        center of the frame.

        The `center` property, when set, redefines the `x` and `y` properties
        of the frame in order to make the center agree with the coordinates
        (tuple) assigned to it.
        """

        return (self.x + self.w//2, self.y + self.h//2)

    @center.setter
    def center(self, value):
        c = self.center
        self.x += value[0] - c[0]
        self.y += value[1] - c[1]</pre>
<h4>class _Asset</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class _Asset(object):
    """
    Base class for all game asset objects.
    
    The `ggame.Asset` class is set up to understand the concept
    of multiple instances of an asset. This is currently only used for image-based
    assets.
    """

    def __init__(self):
        self.GFXlist = [None,]
        """A list of the underlying system objects used to represent this asset."""

    @property
    def GFX(self):
        """
        `GFX` property represents the underlying system object used to represent
        this asset. If this asset is composed of multiple assets, then the **first**
        asset is referenced by `GFX`.
        """
        return self.GFXlist[0]
        
    @GFX.setter
    def GFX(self, value):
        self.GFXlist[0] = value
        
    def __len__(self):
        return len(self.GFXlist)
        
    def __getitem__(self, key):
        return self.GFXlist[key]
        
    def __setitem__(self, key, value):
        self.GFXlist[key] = value
        
    def __iter__(self):
        class Iter():
            def __init__(self, image):
                self.obj = image
                self.n = len(image.GFXlist)
                self.i = 0
                
            def __iter__(self):
                return self
                
            def __next__(self):
                if self.i ==self.n:
                    raise StopIteration
                self.i += 1
                return self.obj.GFXlist[self.i]
        return Iter(self)

    def destroy(self):
        if hasattr(self, 'GFX'):
            try:
                for gfx in self.GFXlist:
                    try:
                        gfx.destroy(True)
                    except:
                        pass
            except:
                pass
        
        </pre>
<h4>class ImageAsset</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class ImageAsset(_Asset):
    """
    The `ImageAsset` class connects ggame to a specific image **file**.
    """

    def __init__(self, url, frame=None, qty=1, direction='horizontal', margin=0):
        """
        All `ggame.ImageAsset` instances must specify a file name or url with
        the `url` parameter.

        If the desired sprite image exists in only a smaller sub-section of the 
        original image, then the are can be specified by providing the
        `frame` parameter, which must be a valid `ggame.Frame` object.

        If image file actually is a *collection* of images, such as a so-called
        *sprite sheet*, then the `ImageAsset` class supports defining a list
        of images, provided they exist in the original image as a **row**
        of evenly spaced images or a **column** of images. To specify this,
        provide the `qty` (quantity) of images in the row or column, the
        `direction` of the list ('horizontal' or 'vertical' are supported),
        and an optional `margin`, if there is a gap between successive 
        images. When used in this way, the `frame` parameter must define the
        area of the **first** image in the collection; all subsequent images
        in the list are assumed to be the same size.
        """
        super().__init__()
        self.url = url
        """
        A string that represents the path or url of the original file.
        """
        del self.GFXlist[0]
        self.append(url, frame, qty, direction, margin)

    def _subframe(self, texture, frame):
        return GFX_Texture(texture, frame.GFX)
        
    def append(self, url, frame=None, qty=1, direction='horizontal', margin=0):
        """
        Append a texture asset from a new image file (or url). This method
        allows you to build a collection of images into an asset (such as you
        might need for an animated sprite), but without using a single 
        sprite sheet image.

        The parameters for the `append` method are identical to those 
        supplied to the `ggame.ImageAsset` initialization method. 

        This method allows you to build up an asset that consists of 
        multiple rows or columns of images in a sprite sheet or sheets.
        """
        GFX = GFX_Texture_fromImage(url, False)
        dx = 0
        dy = 0
        for i in range(qty):
            if not frame is None:
                if direction == 'horizontal':
                    dx = frame.w + margin
                elif direction == 'vertical':
                    dy = frame.h + margin
                f = Frame(frame.x + dx * i, frame.y + dy * i, frame.w, frame.h)
                GFX = self._subframe(GFX, f)
            self.GFXlist.append(GFX)

</pre>
<h4>various classes</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class Color(object):
    """
    The `ggame.Color` class is used to represent colors and/or colors with
    transparency.
    """

    def __init__(self, color, alpha):
        """
        A `ggame.Color` instance must specify both a `color` as an integer
        in the conventional format (usually as a hexadecimal literal, e.g.
        0xffbb33 that represents the three color components, red, green 
        and blue), and a transparency value, or `alpha` as a floating
        point number in the range of 0.0 to 1.0 where 0.0 represents 
        completely transparent and 1.0 represents completely solid.

        Example: `red = Color(0xff0000, 1.0)`

        """
        self.color = color
        self.alpha = alpha
        

class LineStyle(object):
    """
    The `ggame.LineStyle` class is used to represent line style when
    drawing geometrical objects such as rectangles, ellipses, etc.
    """
    
    def __init__(self, width, color):
        """
        When creating a `ggame.LineStyle` instances you must specify 
        the `width` of the line in pixels and the `color` as a valid
        `ggame.Color` instance.

        Example: `line = LineStyle(3, Color(0x00ff00, 1.0))` will define
        a 3 pixel wide green line.
        """
        self.width = width
        self.color = color

class _GraphicsAsset(_Asset):
    
    def __init__(self):
        super().__init__()
        GFX_Graphics.clear()
        

class _CurveAsset(_GraphicsAsset):

    def __init__(self, line):
        super().__init__()
        GFX_Graphics.lineStyle(line.width, line.color.color, line.color.alpha)

class _ShapeAsset(_CurveAsset):

    def __init__(self, line, fill):
        super().__init__(line)
        GFX_Graphics.beginFill(fill.color, fill.alpha)


class RectangleAsset(_ShapeAsset):
    """
    The `ggame.RectangleAsset` is a "virtual" asset that is created on the
    fly without requiring creation of an image file.
    """

    def __init__(self, width, height, line, fill):
        """
        Creation of a `ggame.RectangleAsset` requires specification of the 
        rectangle `width` and `height` in pixels, the `line` (as a proper
        `ggame.LineStyle` instance) and fill properties (as a `ggame.Color`
        instance).
        """
        super().__init__(line, fill)
        self.width = width
        self.height = height
        self.GFX = GFX_Graphics.drawRect(0, 0, self.width, self.height).clone()
        """The `GFX` property represents the underlying system object."""
        self.GFX.visible = False
        

class CircleAsset(_ShapeAsset):
    """
    The `ggame.CircleAsset` is a "virtual" asset that is created on the
    fly without requiring creation of an image file.
    """    

    def __init__(self, radius, line, fill):
        """
        Creation of a `ggame.CircleAsset` requires specification of the circle
        `radius` in pixels, the `line` (as a proper `ggame.LineStyle` instance)
        and fill properties (as a `ggame.Color` instance).
        """
        super().__init__(line, fill)
        self.radius = radius
        self.GFX = GFX_Graphics.drawCircle(0, 0, self.radius).clone()
        """The `GFX` property represents the underlying system object."""
        self.GFX.visible = False
        
class EllipseAsset(_ShapeAsset):
    """
    The `ggame.EllipseAsset` is a "virtual" asset that is created on the 
    fly without requiring creation of an image file.
    """

    def __init__(self, halfw, halfh, line, fill):
        """
        Creation of a `ggame.EllipseAsset` requires specification of the ellipse
        `halfw`, or semi-axis length in the horizontal direction (half of the
        ellipse width) and the `halfh`, or semi-axis length in the vertical direction.
        `line` (as `ggame.LineStyle` instance) and `fill` (as `ggame.Color` instance)
        must also be provided.
        """
        super().__init__(line, fill)
        self.halfw = halfw
        self.halfh = halfh
        self.GFX = GFX_Graphics.drawEllipse(0, 0, self.halfw, self.halfh).clone()
        """The `GFX` property represents the underlying system object."""
        self.GFX.visible = False
        
class PolygonAsset(_ShapeAsset):
    """
    The `ggame.PolygonAsset` is a "virtual" asset that is created on the
    fly without requiring creation of an image file.
    """

    def __init__(self, path, line, fill):
        """
        Creation of a `ggame.PolygonAsset` requires specification of a 
        `path` consisting of a list of coordinate tuples. `line` and 
        `fill` arguments (instances of `ggame.LineStyle` and `ggame.Color`,
        respectively) must also be supplied. The final coordinate in the 
        list must be the same as the first.

        Example: `poly = PolygonAsset([(0,0), (50,50), (50,100), (0,0)], linesty, fcolor)`
        """
        super().__init__(line, fill)
        self.path = path
        jpath = []
        for point in self.path:
            jpath.extend(point)
        self.GFX = GFX_Graphics.drawPolygon(jpath).clone()
        """The `GFX` property represents the underlying system object."""
        self.GFX.visible = False


class LineAsset(_CurveAsset):
    """
    The `ggame.LineAsset` is a "virtual" asset that is created on the
    fly without requiring creation of an image file. A `LineAsset` instance
    represents a single line segment.
    """

    def __init__(self, x, y, line):
        """
        Creation of a `ggame.LineAsset` requires specification of an `x` and
        `y` coordinate for the endpoint of the line. The starting point of the
        line is implied as coordinates (0,0). Note that when this asset is 
        used in a `ggame.Sprite` class, the sprite's `x` and `y` coordinates
        will control the location of the line segment on the screen.

        As the `ggame.LineAsset` does not cover a region, only a `ggame.LineStyle` 
        argument must be supplied (`line`).
        """
        super().__init__(line)
        self.deltaX = x
        """This attribute represents the `x` parameter supplied during instantiation."""
        self.deltaY = y
        """This attribute represents the `y` parameter supplied during instantiation."""
        GFX_Graphics.moveTo(0, 0)
        self.GFX = GFX_Graphics.lineTo(self.deltaX, self.deltaY).clone()
        """The `GFX` property represents the underlying system object."""
        self.GFX.visible = False

class TextAsset(_GraphicsAsset):
    """
    The `ggame.TextAsset` is a "virtual" asset that is created on the fly
    without requiring creation of an image file. A `TextAsset` instance
    represents a block of text, together with its styling (font, color, etc.).
    """
 
    def __init__(self, text, **kwargs):
        """
        The `ggame.TextAsset` must be created with a string as the `text` parameter.
        
        The remaining optional arguments must be supplied as keyword parameters. These
        parameters are described under the class attributes, below:
        """
        super().__init__()
        self.text = text
        self.style = kwargs.get('style', '20px Arial')
        """A string that specifies style, size and typeface (e.g. `'italic 20pt Helvetica'` or `'20px Arial'`)"""
        self.width = kwargs.get('width', 100)
        """Width of the text block on the screen, in pixels."""
        self.fill = kwargs.get('fill', Color(0, 1))
        """A valid `ggame.Color` instance that specifies the color and transparency of the text."""
        self.align = kwargs.get('align', 'left')
        """The alignment style of the text. One of: `'left'`, `'center'`, or `'right'`."""
        self.GFX = GFX_Text(self.text, 
            {'font': self.style,
                'fill' : self.fill.color,
                'align' : self.align,
                'wordWrap' : True,
                'wordWrapWidth' : self.width,
                })
        """The `GFX` property represents the underlying system object."""
        self.GFX.alpha = self.fill.alpha
        self.GFX.visible = False
        
    def _clone(self):
        return type(self)(self.text,
            style = self.style,
            width = self.width,
            fill = self.fill,
            align = self.align)

</pre>
<h4>class sound and mouse event</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class SoundAsset(object):
    """
    Class representing a single sound asset (sound file, such as .mp3 or .wav).
    """    
    def __init__(self, url):
        """
        Create a `ggame.SoundAsset` instance by passing in the URL or file name
        of the desired sound. Sound file formats may include `.wav` or `.mp3`, subject
        to browser compatibility. 
        """
        self.url = url
        """
        A string containing the url or name of the asset file.
        """

        
class Sound(object):
    """
    The `ggame.Sound` class represents a sound, with methods for controlling
    when and how the sound is played in the application.
    """

    def __init__(self, asset):
        """
        Pass a valid `ggame.SoundAsset` instance when creating a `ggame.Sound` object.
        """
        self.asset = asset
        """
        A reference to the `ggame.SoundAsset` instance.
        """
        self.SND = SND_Sound(self.asset.url)
        """
        A reference to the underlying sound object provided by the system.
        """
        self.SND.load()
        
    def play(self):
        """
        Play the sound once.
        """
        self.stop()
        self.SND.play()

    def loop(self):
        """
        Play the sound continuously, looping forever.
        """
        self.stop()
        self.SND.loop()
        self.SND.play()
        
    def stop(self):
        """
        Stop playing the sound.
        """
        self.SND.stop()
        
    @property
    def volume(self):
        """
        The `ggame.Sound.volume` property is a number ranging from 0-100, that 
        represents the volume or intensity of the sound when it is playing.
        """
        return self.SND.getVolume()
        
    @volume.setter
    def volume(self, value):
        self.SND.setVolume(value)


class _Event(object):

    def __init__(self, hwevent):
        self.hwevent = hwevent
        """The underlying system event object."""
        self.type = hwevent.type
        """String representing the type of received event."""
        self.consumed = False
        """
        Set the `consumed` member of the event to prevent the event
        from being received by any more handler methods.
        """
        
class MouseEvent(_Event):
    """
    The `ggame.MouseEvent` class encapsulates information regarding a user mouse
    action that is being reported by the system.
    """    

    mousemove = "mousemove"
    """Constant identifying a `mousemove` event."""
    mousedown = "mousedown"
    """Constant identifying a `mousedown` event."""
    mouseup = "mouseup"
    """Constant identifying a `mouseup` event."""
    click = "click"
    """Constant identifying a button `click` event."""
    dblclick = "dblclick"
    """Constant identifying a button `dblclick` event."""
    mousewheel = "wheel"
    """Constant identifying a mouse `wheel` scroll event."""
    
    def __init__(self, hwevent):
        """
        The event is initialized by the system, with a `hwevent` input parameter.
        """
        super().__init__(hwevent)
        self.wheelDelta = 0
        """Integer representing up/down motion of the scroll wheel."""
        if self.type == self.mousewheel:
            self.wheelDelta = hwevent.deltaY
        else:
            self.wheelDelta = 0
        self.x = hwevent.clientX
        """The window x-coordinate of the mouse pointer when the event occurred."""
        self.y = hwevent.clientY
        """The window y-coordinate of the mouse pointer when the event occurred."""


class KeyEvent(_Event):
    """
    The `ggame.KeyEvent` class encapsulates information regarding a user keyboard
    action that is being reported by the system.
    """    

    no_location = 0
    """Constant indicating no specific location for the key event."""
    right_location = 2
    """Constant indicating the key event was on the right hand side of the keyboard."""
    left_location = 1
    """Constant indicating the key event was on the left hand side of the keyboard."""
    keydown = "keydown"
    """Constant indicating the key was pressed down."""
    keyup = "keyup"
    """Constant indicating the key was released."""
    keypress = "keypress"
    """Constant indicating the combination of keydown, followed by keyup."""
    keys = {8: 'backspace',
        9: 'tab',
        13: 'enter',
        16: 'shift',
        17: 'ctrl',
        18: 'alt',
        19: 'pause/break',
        20: 'caps lock',
        27: 'escape',
        32: 'space',
        33: 'page up',
        34: 'page down',
        35: 'end',
        36: 'home',
        37: 'left arrow',
        38: 'up arrow',
        39: 'right arrow',
        40: 'down arrow',
        45: 'insert',
        46: 'delete',
        48: '0',
        49: '1',
        50: '2',
        51: '3',
        52: '4',
        53: '5',
        54: '6',
        55: '7',
        56: '8',
        57: '9',
        65: 'a',
        66: 'b',
        67: 'c',
        68: 'd',
        69: 'e',
        70: 'f',
        71: 'g',
        72: 'h',
        73: 'i',
        74: 'j',
        75: 'k',
        76: 'l',
        77: 'm',
        78: 'n',
        79: 'o',
        80: 'p',
        81: 'q',
        82: 'r',
        83: 's',
        84: 't',
        85: 'u',
        86: 'v',
        87: 'w',
        88: 'x',
        89: 'y',
        90: 'z',
        91: 'left window key',
        92: 'right window key',
        93: 'select key',
        96: 'numpad 0',
        97: 'numpad 1',
        98: 'numpad 2',
        99: 'numpad 3',
        100: 'numpad 4',
        101: 'numpad 5',
        102: 'numpad 6',
        103: 'numpad 7',
        104: 'numpad 8',
        105: 'numpad 9',
        106: 'multiply',
        107: 'add',
        109: 'subtract',
        110: 'decimal point',
        111: 'divide',
        112: 'f1',
        113: 'f2',
        114: 'f3',
        115: 'f4',
        116: 'f5',
        117: 'f6',
        118: 'f7',
        119: 'f8',
        120: 'f9',
        121: 'f10',
        122: 'f11',
        123: 'f12',
        144: 'num lock',
        145: 'scroll lock',
        186: 'semicolon',
        187: 'equal sign',
        188: 'comma',
        189: 'dash',
        190: 'period',
        191: 'forward slash',
        192: 'grave accent',
        219: 'open bracket',
        220: 'back slash',
        221: 'close bracket',
        222: 'single quote'}    
    """Dictionary mapping key code integers to textual key description."""
    
    def __init__(self, hwevent):
        """
        The event is initialized by the system, with a `hwevent` input parameter.
        """
        super().__init__(hwevent)
        self.keynum = hwevent.keyCode
        """The `keynum` attribute identifies a keycode (number)."""
        self.key = self.keys[hwevent.keyCode]
        """The `key` attribute identifes the key in text form (e.g. 'back slash')."""


</pre>
<p></p><h3>Deno</h3>
<p><a href="https://deno.land/">https://deno.land/</a></p>
<p>單一執行檔案, 可以讓使用者直接採用 deno run your_typescript.ts 執行 Typescript 程式.</p>
<h4>Javascript Ecosystem:</h4>
<p style="padding-left: 30px;"><a href="https://www.imaginarycloud.com/blog/a-javascript-ecosystem-overview/">https://www.imaginarycloud.com/blog/a-javascript-ecosystem-overview/</a></p>
<p style="padding-left: 30px;">網際 Javascript 執行: <a href="http://mde.tw/cp2019/content/Javascript.html">http://mde.tw/cp2019/content/Javascript.html</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/hexapod">https://github.com/mdecourse/hexapod</a> (Robotic Inverse Kinematics)</p>
<p style="padding-left: 30px;">Dart Web: <a href="http://mde.tw/cp2019/content/Task2.html">http://mde.tw/cp2019/content/Task2.html</a> (Dart 轉為 Javascript)</p>
<p style="padding-left: 30px;">Flutter Web: <a href="http://mde.tw/cp2019/content/Flutter%20Web.html">http://mde.tw/cp2019/content/Flutter%20Web.html</a> (Dart 轉為 Javascript)</p>
<h4>User Interface:</h4>
<p style="padding-left: 30px;"><a href="https://reactjs.org/">https://reactjs.org/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/typescript-cheatsheets/react#reacttypescript-cheatsheets">https://github.com/typescript-cheatsheets/react#reacttypescript-cheatsheets</a></p>
<h4>Web based 3D rendering:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/BabylonJS/Babylon.js">https://github.com/BabylonJS/Babylon.js</a></p>
<p style="padding-left: 30px;"><a href="https://www.babylonjs.com/community/">https://www.babylonjs.com/community/</a></p>
<h4>Deno JS and TS runtime:</h4>
<p style="padding-left: 30px;"><a href="https://deno.com/blog/the-deno-company">https://deno.com/blog/the-deno-company</a></p>
<p style="padding-left: 30px;">Deno 1.11.5: <a href="https://github.com/denoland/deno/releases/">https://github.com/denoland/deno/releases/</a> 直接下載 Windows 版本解開壓縮後 55MB, 放入可攜系統 data 目錄中即可執行.</p>
<p style="padding-left: 30px;"><a href="https://deno.land/x/">https://deno.land/x/</a></p>
<p style="padding-left: 30px;"><a href="https://deno.com/deploy">https://deno.com/deploy</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/lucacasonato/deploy_chat">https://github.com/lucacasonato/deploy_chat</a></p>
<p style="padding-left: 30px;">Deno <a href="https://deno.com/blog/v1.8#experimental-support-for-the-webgpu-api">supports</a> <a href="https://gpuweb.github.io/gpuweb/">WebGPU</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/the-deno-handbook/">https://www.freecodecamp.org/news/the-deno-handbook/</a></p>
<p style="padding-left: 30px;"><a href="https://deno.land/manual@v1.11.5/typescript">https://deno.land/manual@v1.11.5/typescript</a></p>
<p style="padding-left: 60px;"><a href="https://deno.land/manual@v1.11.5/typescript/overview">https://deno.land/manual@v1.11.5/typescript/overview</a></p>
<p style="padding-left: 30px;"><a href="https://deno.land/">https://deno.land/</a> (Javascript and Typescript runtime written in Rust)</p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-4979-6">Essential Typescript</a> (從校園網路下載電子書)</p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-3249-1">Pro Typescript</a> (從校園網路下載電子書)</p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-6197-2">Introducing Deno</a> (從校園網路下載電子書)</p>
<p style="padding-left: 60px;"><a href="https://itnext.io/typescript-machine-learning-simplicity-kalimdor-js-bb1ccadf0ad3">https://itnext.io/typescript-machine-learning-simplicity-kalimdor-js-bb1ccadf0ad3</a></p>
<h4>References:</h4>
<p style="padding-left: 30px;"><a href="https://stackoverflow.com/questions/61710787/how-to-run-a-python-script-from-deno">在 Deno 執行 Python 程式.</a></p>
<p style="padding-left: 60px;">Genetic Algorithm:</p>
<p style="padding-left: 90px;"><a href="https://github.com/mdecourse/genetic">https://github.com/mdecourse/genetic</a> </p>
<p style="padding-left: 90px;"><a href="https://link.springer.com/content/pdf/10.1007/s11042-020-10139-6.pdf">A review on genetic algorithm: past,present, and future</a></p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-5394-6">Javascript Next</a> (從校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-2623-0">E6S for Humans</a> (從校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-3988-9">JavaScript Data Structures and Algorithms</a> (從校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-2656-8">Beginning Functional Javascript</a> (從校園網路下載電子書)</p>
<h4 style="padding-left: 30px;">jQuery</h4>
<p style="padding-left: 30px;"><a href="https://jquery.com/">https://jquery.com/</a></p>
<h4 style="padding-left: 30px;">jQuery-UI</h4>
<p style="padding-left: 30px;"><a href="https://jqueryui.com/">https://jqueryui.com/</a></p>
<h4 style="padding-left: 30px;">buzz</h4>
<p style="padding-left: 30px;"><a href="https://buzz.jaysalvat.com/">https://buzz.jaysalvat.com/</a></p><h3>pixijs</h3>
<p>PixiJS — The HTML5 Creation Engine</p>
<p>Create Great Interactive Graphics or Games and the Web</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-1094-9">Learn Pixi.js</a> (從校園網路中下載電子書)</p>
<p style="padding-left: 30px;">Pixi.js <a href="https://pixijs.io/examples-v4/#/demos-basic/container.js">4.X.X</a> 與 <a href="https://pixijs.io/examples/#/demos-basic/container.js">5.X.X</a> 之間的差異.</p>
<p><a href="https://github.com/pixijs/pixijs">https://github.com/pixijs/pixijs</a></p>
<p>如何使用 pixi.js</p>
<p>以下利用 Bython 與 <a href="https://github.com/mdecourse/nfulist">https://github.com/mdecourse/nfulist</a> on Heroku 結合, 列出 1092 學期各課程修課人員學號,  程式執行流程先從一個<span style="background-color: #ccffcc;">全球資訊網伺服器</span> (位於 Github, 伺服器 1) 將此網頁送到使用者的<span style="background-color: #ccffcc;">瀏覽器</span> (客戶端電腦) 中, 並且執行 Brython javascript 程式, 將頁面中的 Python 程式轉為 Javascript 後, 因為其中導入 Open() 函式採用 ajax 模式至使用者指定的 URL 中擷取資料, 而此一位於 <span style="background-color: #ccffcc;">Heroku 雲端</span> (位於 Heroku, 伺服器 2) 的 Python Flask 程式也是採用 ajax 方式對<span style="background-color: #ccffcc;">學校教務處</span> (位於虎尾, 伺服器 3) 伺服主機發出 post 表單資料, 並從教務主機中取出特定學期, 特定課號的修課人員名單, 然後所截取出來的資料, 再由 Brython 程式發布到特定網頁中的位置. 因此以下學員資料的擷取包括客戶端電腦, 程式執行總共牽涉到其他位於不同地理位置的 3 台主機.</p>
<p>這個網際程式的執行, 代表的是利用計算機程式, 電腦軟硬體與網路技術, 各位於不同地理位置的電腦只要各自扮演好自己的角色, 能夠獨立完成一項任務中的協同任務, 使用者只要了解各種協定的特性, 就可以完成原先需要四處實地奔走才能完成的任務. <span style="background-color: #ffff99;">少負擔, 多建樹應該就是應用計算機程式與電腦輔助設計的本質</span> (Less burden, more achievements should be the essence of application of the computer programs and computer-aided design.).</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/5.1.3/pixi.min.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
// ]]&gt;&lt;/script&gt;
&lt;div id="brython_text1"&gt;&lt;/div&gt;
&lt;script type="text/python"&gt;// &lt;![CDATA[
from browser import document as doc
from browser import html

'''
2021 spring (1092):
0741 1a
0764 2a
0776 2b
2384 5j
'''
# setup up basic data
semester_code = "1092"
class_code = ["0741", "0764", "0776", "2384"]
# add a vacant string
stud_list = ""

# go through class_code one by one
for i in class_code:
    url = "https://nfulist.herokuapp.com/?semester="+semester_code+"&amp;courseno="+i+"&amp;column=False"
    title = html.H4("Semester:"+semester_code+" - "+i+" course student list:")
    stud_list += title + open(url).read()

doc["brython_text1"] &lt;= stud_list
// ]]&gt;&lt;/script&gt;</pre>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/5.1.3/pixi.min.js"></script>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
<div id="brython_text1"></div>
<script type="text/python">
from browser import document as doc
from browser import html

'''
2021 spring (1092):
0741 1a
0764 2a
0776 2b
2384 5j
'''
# setup up basic data
semester_code = "1092"
class_code = ["0741", "0764", "0776", "2384"]
# add a vacant string
stud_list = ""

# go through class_code one by one
for i in class_code:
    url = "https://nfulist.herokuapp.com/?semester="+semester_code+"&courseno="+i+"&column=False"
    title = html.H4("Semester:"+semester_code+" - "+i+" course student list:")
    stud_list += title + open(url).read()

doc["brython_text1"] <= stud_list
</script>
<h3>pixijs1</h3>
<p><a href="https://mdecp2018.github.io/finalproject-bgx/content/%E7%B6%B2%E9%9A%9B%E6%A8%A1%E6%93%AC%E7%A8%8B%E5%BC%8F.html">2018 參考資料</a></p>
<p>ggame is for <a href="https://pixijs.io/examples-v4/#/demos-basic/container.js">pixi 4.8.2</a></p>
<h4>Brython and pixi.js integrated html5 result:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/4.8.2/pixi.min.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
// ]]&gt;&lt;/script&gt;
&lt;div id="brython_div"&gt;&lt;/div&gt;
&lt;div id="line_drawing"&gt;&lt;/div&gt;
&lt;script type="text/python"&gt;// &lt;![CDATA[
# from browser import window, document and html
from browser import window, document, html
# this is for animation, which is different from what javascipt implemented
import browser.timer
# use socket.gethostname() to differentiate where script is executed
import socket

# if executed under localhost
if socket.gethostname() == "localhost":
    site = ""
else:
    # when executed in remote site
    site="./.."

# let brython_div to be the div with id=brython_div
brython_div = document["brython_div"]
# use window to get PIXI object and let it be GFX
GFX = window.PIXI
# create new PIXI application
App = GFX.Application.new
# set application size and background
app = App(400, 300, { 'transparent': True })
# add application view into div markup
brython_div.appendChild(app.view)
# create Sprite from image file
bunny = GFX.Sprite.fromImage(site+'/images/bunny.png')
# center the sprite's anchor point, this is the center for the rotation of the graphics
bunny.anchor.set(0.5)
# move the sprite to the center of the screen
bunny.x = app.screen.width / 2
bunny.y = app.screen.height / 2
# add Sprite into the application stage
app.stage.addChild(bunny)

def bunnyRotate():
    bunny.rotation += 0.1

browser.timer.set_interval(bunnyRotate, 30)
// ]]&gt;&lt;/script&gt;</pre>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/4.8.2/pixi.min.js"></script>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
<div id="brython_div"></div>
<div id="line_drawing"></div>
<script type="text/python">
# from browser import window, document and html
from browser import window, document, html
# this is for animation, which is different from what javascipt implemented
import browser.timer
# use socket.gethostname() to differentiate where script is executed
import socket

# if executed under localhost
if socket.gethostname() == "localhost":
    site = ""
else:
    # when executed in remote site
    site="./.."

# let brython_div to be the div with id=brython_div
brython_div = document["brython_div"]
# use window to get PIXI object and let it be GFX
GFX = window.PIXI
# create new PIXI application
App = GFX.Application.new
# set application size and background
app = App(400, 300, { 'transparent': True })
# add application view into div markup
brython_div.appendChild(app.view)
# create Sprite from image file
bunny = GFX.Sprite.fromImage(site+'/images/bunny.png')
# center the sprite's anchor point, this is the center for the rotation of the graphics
bunny.anchor.set(0.5)
# move the sprite to the center of the screen
bunny.x = app.screen.width / 2
bunny.y = app.screen.height / 2
# add Sprite into the application stage
app.stage.addChild(bunny)

def bunnyRotate():
    bunny.rotation += 0.1

browser.timer.set_interval(bunnyRotate, 30)
</script>
<h2>Brython-server</h2>
<p><a href="https://github.com/mdecourse/brython-server">https://github.com/mdecourse/brython-server</a></p>
<h4>Heroku:</h4>
<p style="padding-left: 30px;"><a href="https://heroku.com">https://heroku.com</a></p>
<h2>虛擬主機</h2>
<p>這裡的虛擬主機系統指利用 <a href="https://www.virtualbox.org/">https://www.virtualbox.org/</a> 所建立的 Windows 或 Ubuntu 操作系統檔案, 可以在不同實體操作系統中, 進行轉移運作.</p>
<p>透過虛擬主機與實體主機間的網路設定, 可以讓使用者進行網際程式開發.</p>
<p>Virtualbox 網路設定:</p>
<p>Nat - 虛擬主機可以藉由實體主機的網路架構上網, 但必須透過 Port Mapping 才能以實體主機的網路位址設為聯外 server.</p>
<p>Host-only Adaptor - 虛擬主機的網路設定自外於任何聯外網路, 因此無法直接上網, 但各 Host 間同群電腦可以互通.</p>
<p>Bridged Adaptor - 虛擬主機的網路設定與實體主機的網路位階相同, 若實體主機位於外部網段, 則虛擬主機可設為聯外 server.</p>
<p><a href="https://link.springer.com/content/pdf/10.1007%2F978-3-319-92429-8.pdf">Systems Programming in Unix/Linux</a> (校園網路下載電子書)</p>
<h4>Github Actions:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/features/actions">https://github.com/features/actions</a></p>
<h4 style="padding-left: 30px;">應用範例:</h4>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/report/blob/main/.github/workflows/demo.yaml">https://github.com/mdecourse/report/blob/main/.github/workflows/demo.yaml</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/4072pj1">https://github.com/mdecourse/4072pj1</a></p><h1>可攜系統</h1>
<p>建立可攜系統在解決 ____ 問題?</p>
<p><a href="https://drive.google.com/file/d/1hTvN4mCk2b_enIK204HA0AVPsd3GPlh5/view?usp=sharing">portablekmol_base.7z</a> (下載 118MB, 解開壓縮後 148MB)</p>
<p style="padding-left: 30px;">包括 data 目錄與 start_ipv6.bat, start_ipv4.bat, stop.bat</p>
<p style="padding-left: 30px;">功能: 啟動後可以啟動 SciTE 編輯器, 可用於類解譯 ANSI C 程式, 以及 <a href="https://solvespace.com">Solvespace</a>.</p>
<p><a href="https://drive.google.com/file/d/1BGfN5R6Yw1e9Unm4u8GCRP4xcSuYfCSE/view?usp=sharing">Python395.7z</a> (下載 123MB, 解開壓縮後 495MB)</p>
<p style="padding-left: 30px;">功能: 與 <a href="https://drive.google.com/file/d/1hTvN4mCk2b_enIK204HA0AVPsd3GPlh5/view?usp=sharing">portablekmol_base.7z</a> 結合後, 可以利用 SciTE 編輯器執行 Python 程式.</p>
<p style="padding-left: 30px;">請注意: 由於 CMSiMDE 改用 <a href="https://blog.miguelgrinberg.com/post/running-your-flask-application-over-https">adhoc ssl_context</a> 啟動近端伺服器, 因此 Python 解譯系統必須加裝 pyopenssl 模組: pip install pyopenssl,  且安裝前要先將系統 proxy 暫時關閉.</p>
<p><a href="https://drive.google.com/file/d/1RW51wCJ056TdWvjharBKOl6FM9iewpHI/view?usp=sharing">portablegit_2.31.1.7z</a> (下載 60MB, 解開壓縮後 286MB)</p>
<p style="padding-left: 30px;">功能: 與 <a href="https://drive.google.com/file/d/1hTvN4mCk2b_enIK204HA0AVPsd3GPlh5/view?usp=sharing">portablekmol_base.7z</a> 結合後, 可以利用可攜程式系統的命令列視窗執行 git 指令.</p>
<p><a href="https://drive.google.com/file/d/1JDmc_b4BLwGh4hQ7Tatq02EXmiPLrNZV/view?usp=sharing">lua-5.4.3.7z</a> (下載 662KB, 解開壓縮後 4MB)</p>
<p style="padding-left: 30px;">功能: 與 <a href="https://drive.google.com/file/d/1hTvN4mCk2b_enIK204HA0AVPsd3GPlh5/view?usp=sharing">portablekmol_base.7z</a> 結合後, 可以利用 SciTE 編輯器執行 Lua 程式.</p>
<p><a href="https://drive.google.com/file/d/1u-Efwoizvqn9WJdcL0fez7a2d0ulGBcs/view?usp=sharing">PUTTY.7z</a> (下載 940KB, 解開壓縮後 4MB)</p>
<p style="padding-left: 30px;">功能: plink.exe 可以與 git 結合, 利用 Putty.exe 中所設定的 session 名稱進行 SSH 連線.</p>
<p><a href="https://drive.google.com/file/d/1m6cmWu9AZhkBj6wFn9IiJlShcpGbz05g/view?usp=sharing">msys64_20210419.7z</a> (下載 3.5GB, 解開壓縮後 12GB)</p>
<p style="padding-left: 30px;">功能: <a href="https://www.msys2.org/">Msys2</a> 安裝</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pacman -S mingw-w64-x86_64-toolchain
pacman -Sy mingw-w64-x86_64-qt5
pacman -Sy mingw-w64-x86_64-qt5-static
pacman -Sy mingw-w64-x86_64-ffmpeg
pacman -Sy mingw-w64-x86-64-cmake</pre>
<p><a href="https://drive.google.com/file/d/17M7Ro9NO2mmycvwOuK-10yYgs2oxFwEB/view?usp=sharing">msys64_20210419_clean.7z</a> (下載 87MB , 解開壓縮後 374MB)</p>
<p style="padding-left: 30px;">功能: 尚未安裝任何 Package 的 <a href="https://www.msys2.org/">Msys2</a> 系統.</p>
<p><a href="https://drive.google.com/file/d/1X8icOyPgABAkKHYaDLXPSoy7U7nyxqzW/view?usp=sharing">Flutter_portable_20210707.7z</a> (下載 4.7 GB, 解開壓縮後約 20GB)</p>
<p style="padding-left: 30px;">可攜系統中的 Android sdk 容量約 7.5 GB, Flutter 與 Dart 容量約 1.6 GB, Java jdk 容量約 200MB. vscode 約 530 MB, home_mdecourse 目錄下含手機 emulator 檔案容量約 9.3 GB.</p>
<p><a href="https://drive.google.com/file/d/1MmLHqk2i3Ei2Bf3EoNOjaLVO6RHqJtb4/view?usp=sharing">node-v14.17.2-x64.7z</a> (下載 17MB, 解開壓縮後 78MB)</p>
<p><a href="https://drive.google.com/file/d/1SDLtjyddvFs9OHobMu7Ddx6Doa15RVMY/view?usp=sharing">rust_1.53.0_portable_for_msys2.7z</a> (下載 147MB , 解開壓縮後 1.13GB)</p>
<p><a href="https://drive.google.com/file/d/1CZfEjvHtQSlAch83jHmw4Ivz6WubPu8h/view?usp=sharing">Erlang 10.7 and Elixir portable.7z</a> for Windows (下載 62MB , 解開壓縮後 340MB)</p>
<p>Deno 1.11.5: <a href="https://github.com/denoland/deno/releases/">https://github.com/denoland/deno/releases/</a> 直接下載 Windows 版本解開壓縮後 55MB, 放入可攜系統 data 目錄中即可執行.</p>
<p><a href="https://drive.google.com/file/d/1BIDn3pn-qQRF0L7rZMNbh43HXyFLhiPj/view?usp=sharing">CoppeliaSimEdu_4.1.0_rev1.7z</a> (下載 183MB, 解開壓縮後 438MB)</p>
<p style="padding-left: 30px;">功能: 可免費提供大學機電資整合課程使用, 且開放原始碼, 可用於機電資控制系統設計與模擬 (InfoMechaTronic control system design and simulation).</p>
<p><a href="https://drive.google.com/file/d/1ih24k0G-vKnB1OjOIxHV4Gyz-bmlxeCU/view?usp=sharing">robodk_522.7z</a> (下載 364MB, 解開壓縮後 1GB)</p>
<p style="padding-left: 30px;">功能: 提供限縮功能版本 Free Trial, 只可模擬但無法存檔, 可用於工業級機械手臂在線與離線控制系統設計與模擬.</p>
<p><a href="https://drive.google.com/file/d/1uDJCaxDsed_5ZTdsHNOfGQ51JnT3aNP0/view?usp=sharing">Range3.7z</a> (下載 27MB, 解開壓縮後 109MB)</p>
<p style="padding-left: 30px;">功能: 開放源 FEM (Finite Element Method) 分析套件.</p>
<p><a href="https://drive.google.com/file/d/1ITHNrhemifHloS_x3BAchyQxMUKma0AI/view?usp=sharing">webots-R2021a.7z</a> (下載 1.5GB, 解開壓所後 2.9GB)</p>
<p style="padding-left: 30px;">功能: 採 Apache 2.0 使用授權的開放源套件, 可用於機電資控制系統設計與模擬.</p><h2>Lua 解譯</h2>
<p>學習 Lua 要做什麼? 能夠解決 ____  問題?</p>
<p>網際 Lua 解譯: <a href="http://mde.tw/lab/downloads/lua/index.html">http://mde.tw/lab/downloads/lua/index.html</a></p>
<p>SciTE 編輯器中的 Lua.properties 設定:</p>
<p>選擇利用 y:\lua-5.4.3\luac 與 lua 編譯或解譯 .lua 程式檔案.</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">command.compile.*.lua=y:\lua-5.4.3\luac -o "$(FileName).luc" "$(FileNameExt)"
# Lua 5.1
command.go.*.lua=y:\lua-5.4.3\lua "$(FileNameExt)"</pre>
<p></p>
<h1>CMSiMDE</h1>
<p>CMSiMDE (<a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a>) 是一套以 Python 與 Flask 框架編寫的網際內容管理系統,</p>
<p>使用 CMSiMDE 建議使用者安裝 flask flask_cors bs4 lxml pelican markdown leo 等模組. 其中的 flask flask_cors bs4 lxml pelican markdown為啟動 CMSiMDE 的必要模組, 而 leo 則是 CMSMDE 開發者所使用的大綱管理工具, 可以用於與 CMSiMDE 整合的 Pelican blog 及 Reveal.js 網際簡報編輯之用.</p>
<h2>建立網頁</h2>
<p>由於 CMSiMDE 帶有動態網頁與靜態網頁等兩個部分, 動態網頁執行時需要該伺服器能夠執行 Python 3, 以及 flask flask_cors bs4 lxml pelican markdown 等模組. 而靜態網頁的伺服則只需要 WWW Server 即可.</p>
<p>若使用者在 Github 使用 CMSiMDE 建立網頁, 可以透過 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> template 建立, 步驟與兩種設定方式如下:</p>
<ol>
<li>使用者登入 Github</li>
<li>將瀏覽器連線至 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 頁面後, 點擊 Use this template 按鈕後, 選擇所要採用的 repository 名稱後, 就可以建立以 CMSiMDE 作為子模組的 Github 倉儲.</li>
<li>假如使用者所選擇的倉儲名稱為: 帳號.github.io, 則 Github 會自動設定該倉儲的 main 分支為 Github Pages 根目錄, 意即一旦 Github Pages 完成轉檔 (提交訊息之後會出現綠勾), 則該倉儲的對應網頁將為: https://帳號.github.io</li>
<li>若使用利用 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 作為 template 所建立的倉儲名稱並非 帳號.github.io, 則使用者必須自行至該倉儲的 settings/Github Pages 選項中將 main branch 設為 Github Pages 對應的 root 目錄. 之後, Github 將會採用: 帳號.github.io/倉儲名稱 作為與該倉儲對應的 Github Pages 網址.</li>
</ol>
<h2>基本操作</h2>
<p>當使用者利用 cms.bat 啟用動態網站後, 即可利用瀏覽器 <a>https://localhost:9443</a> 在近端維護網站內容, 由於此時動態網站僅在 localhost 啟動, 因此可以使用內建的管理者密碼 "admin" 登入管理網站內容.</p>
<p>在 Windows 操作系統, cms.bat 內容為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">python cmsimde/wsgi.py</pre>
<p>若是在 Mac 或 Linux 操作系統, 則 cms 為可執行檔, 且內容為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#! /bin/bash
python3 cmsimde/wsgi.py</pre>
<p>至於 acp.bat 在 Windows 操作系統的內容為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">echo off
set message=%1
git add .
git commit -m %message%
git push</pre>
<p>但是在 Mac 與 Linux 操作系統, 則 acp 為可執行檔, 而內容則為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#! /bin/bash
git add .
git commit -m "$1"
git push</pre>
<p>在 Windows 執行 batch 檔案, 可以直接在命令列視窗執行 cms 或 acp "提交訊息", 但是在 Mac 與 Linux 執行 Bash 檔案, 必須使用 ./cms 或 ./acp "提交訊息".</p>
<p>假如使用者修改 init.py 中的 ip 或 uwsgi 設定, 讓動態網站在外部 IP 啟動, 則必須自行透過動態網站中的 <span style="background-color: #ffff99;">config</span> 指令修改管理者密碼.</p>
<p>動態網站編輯表單中的 <span style="background-color: #ffff99;">config</span> 除了可更改網站管理者密碼外, 也可以更改網站的頁面內容標題 (外部標題可以透過 init.py 中的 site_title 更改).</p>
<h3>客製化</h3>
<p>假如利用 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 作為 template 所建立的 Github Pages 網站, 倉儲根目錄中的 cms.bat 可以在執行動態網站系統之後, 利用 pipe 讓 cms.bat 同時開啟 Firefox <a>https://localhost:9443</a></p>
<p>修改後的 cms.bat 如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">python cmsimde/wsgi.py 1&gt; nul | "C:\Program Files (x86)\Mozilla Firefox\firefox" https://localhost:9443</pre>
<p>前面 python cmsimde/wsgi.py 加上 1&gt; nul 的目的是因為 pipe 執行時會將前面指令執行結果轉為隨後執行指令的輸入, 而 1&gt; nul 則會將標準輸出的任何資料移除, 任何輸出不會影響 Firefox 執行.</p>
<h3>編輯網頁內容</h3>
<p>編輯 CMSiMDE 動態網站中的內容, 可以透過表單中的 <span style="background-color: #ffff99;">Edit All</span> 或 <span style="background-color: #ffff99;">Edit</span> 按鈕進行. <span style="background-color: #ffff99;">Edit</span> 可用於單頁編輯, 操作時先選擇左側的頁面標題, 等系統顯示該頁面內容後, 再點擊上方的 <span style="background-color: #ffff99;">Edit</span> 按鈕即可進入該頁面的編輯模式.</p>
<p><span style="background-color: #ffff99;">Edit All</span> 通常用於單次刪除所有頁面內容或者只保留特定頁面用, 點擊後會將所有頁面內容置於編輯器中.</p>
<h3>上傳與引用檔案</h3>
<p><span style="background-color: #000000; color: #ffffff;">File Upload</span> 可以讓使用者選擇近端多個檔案上傳至動態系統中的 downloads 目錄.</p>
<p>引用使用者上傳的檔案</p>
<p style="padding-left: 30px;"><a href="/downloads/python_book_01.pdf">python_book_01.pdf</a></p>
<h3>上傳與引用圖片</h3>
<p><span style="background-color: #000000; color: #ffffff;">Image Upload</span> 可以讓使用者選擇近端多個檔案上傳至動態系統中的 downloads 目錄.</p>
<p>引用使用者上傳的檔案</p>
<p style="padding-left: 30px;"><img caption="false" class="add_border" height="227" src="/images/nfu_logo_mde.png" width="200"/></p>
<p style="padding-left: 30px;"></p>
<h3>嵌入程式碼</h3>
<p>利用 Insert/Edit code 功能, 可以嵌入各種程式碼:</p>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">// 下列 Dart 程式, 利用 Runge Kutta 迭代運算法, 解常微分方程式
// 設 t 為時間, x 則設為物體的位移
// dx / dt = (t - x)/2, 起始值 t0=0, x0=1, 求 t=2 時的 x 值
//
// 已知起始值 t0 與 x0 後, 可以利用下列 rungeKutta 函式, 以
// h 為每步階增量值, 求 dxdt 常微分方程式任一 t 的對應值 x
// 定義函式 rungeKutta, 共有四個輸入變數
rungeKutta(t0, x0, t, h) {
  // 利用步階增量值 h 與 t 的起始及終點值
  // 計算需要迭代的次數 n
  int n = ((t - t0) / h).toInt();
  // 宣告 x 為雙浮點數, 且設為起始值 x0
  double x = x0;
  // 利用已知的 t0, x0, t 終點值與步階增量值 h, 迭代求 x 對應值
  // 索引值 i 將每次增量 1, 從 i=1 執行 for 環圈至 i=n
  for (int i = 1; i &lt;= n; i++) {
    // 將此階段的 t 與 x 值代入 dxdt 函式求下列四個浮點變數值
    double k1 = h * dxdt(t0, x);
    double k2 = h * dxdt(t0 + 0.5 * h, x + 0.5 * k1);
    double k3 = h * dxdt(t0 + 0.5 * h, x + 0.5 * k2);
    double k4 = h * dxdt(t0 + h, x + k3);
    // 利用上述四個變數值求此步階增量後的對應 x 值
    x = x + (1.0 / 6.0) * (k1 + 2 * k2 + 2 * k3 + k4);
    // 每次 for 迴圈執行最後, 準備計算下一個步階增量後的 x 對應值
    // t 起始值配合步階增量值 h, 進行增量
    t0 = t0 + h;
  }
  // 完成 for 迴圈迭代後, 傳回與 t 終點值對應的 x 值
  return x;
}

// 將微分方程式 "dx / dt = (t - x)/2" 定義為 dxdt 函式
dxdt(t, x) {
  return ((t - x) / 2);
}

// 定義 main() 主函式內容, 目的在利用 rungeKutta 函式
// 解常微分方程式
main() {
// Driver method
// num 資料型別可以是整數或雙浮點數
  num t0 = 0;
  num x = 1;
  num t = 2;
  double h = 0.2;
  print('The value of x at t=$t is: ${rungeKutta(t0, x, t, h)}');
}
</pre>
<p></p>
<h3>嵌入影片檔</h3>
<p>直接利用 Source code 功能, 將影片檔案的 iframe 標註放入後存檔:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/bZupkkT4T5c" width="560"></iframe></p>
<h3>檢視 STL</h3>
<p>使用 Github 所提供的 STL viewer 嵌入 github.com/mdecourse/cmstemplate main branch 中 downloads 目錄中的 spikeball.stl</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="https://embed.github.com/view/3d/mdecourse/cmstemplate/main/downloads/spikeball.stl"&gt;&lt;/script&gt;</pre>
<p>將上列 script 標註放入頁面 HTML 內容後, 可以檢視 STL 零件檔案.</p>
<p></p>
<p>
<script src="https://embed.github.com/view/3d/mdecourse/cmstemplate/main/downloads/spikeball.stl"></script>
</p>
<p>以 CMSiMDE 內建的 static/viewstl.html 檢視 STL 檔案:</p>
<p>使用 iframe 其 src 指向 STL 檔案的絕對 URL 路徑:</p>
<p>/static/viewstl.html?src=https://mde.tw/cmstemplate/downloads/spikeball.stl</p>
<p>就可以如下檢視 downloads/spikeball.stl</p>
<p><iframe height="400" src="/static/viewstl.html?src=https://mde.tw/cmstemplate/downloads/spikeball.stl" width="600"></iframe></p>
<h2>Gitlab 同步</h2>
<p>利用 git remote add gitlab <a href="https://gitlab.com/user/repository.git">https://gitlab.com/user/repository.git</a> 可以在近端倉儲中的 .git/config 中新增一個名稱為 gitlab, 且與 <a href="https://gitlab.com/user/repository.git">https://gitlab.com/user/repository.git</a> 倉儲對應的設定. 使用者可以將此倉儲改版內容以 git push gitlab 推向 Gitlab.</p>
<p>至於 Gitlab Pages 額外需要下列 .yml 檔案進行轉換設定:</p>
<p>.gitlab-ci.yml</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pages:
  stage: deploy
  script:
  - mkdir .public
  - cp -r * .public
  - mv .public public
  artifacts:
    paths:
    - public
  only:
  - master
variables:
  GIT_SUBMODULE_STRATEGY: recursive</pre>
<p></p>
<h2>Heroku 部署</h2>
<p>與 Heroku 部署有關資訊請參考: <a href="https://mde.tw/cp2020/content/Heroku.html">https://mde.tw/cp2020/content/Heroku.html</a></p>
<h2>Fossil SCM</h2>
<p>在 Github 之外, 可以同步將各倉儲資料存放至 Gitlab, Heroku (有 500 MB 容量限制) 與 Fossil SCM.</p>
<p>希望整合 Github 與 Fossil SCM 倉儲步驟說明如下:</p>
<p>針對 Github 中已經有 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 倉儲, 希望同步建 <a href="https://fossil.kmol.info/cmstemplate">https://fossil.kmol.info/cmstemplate</a> 與之內容同步.</p>
<p>登入 fossil.kmol.info 主機, 在 /home/user/repository 目錄中, 以 fossil init cmstemplate.fossil 建立空倉儲. 此時 Fossil SCM 將會列出以登入帳號作為帳號的管理者密碼.</p>
<p>管理者利用 <a href="https://fossil.kmol.info/cmstemplate">https://fossil.kmol.info/cmstemplate</a> 連結, 以 user 登入, 並利用上列管理者密碼進入管理區, 先行透過 Setup/users 變更 user 對應密碼.</p>
<p>回到 Windows 以 <span style="background-color: #ffff99;">fossil clone https://user@fossil.kmol.info/cmstemplate cmstemplate.fossil</span> 取下倉儲資料, 過程中將需要輸入與 user 對應的密碼, 並被詢問是否儲存密碼, 若選擇儲存密碼則隨後的 fossil commit 將回自動提交推送.</p>
<p>接著在近端必須開啟空 cmstemplate.fossil 倉儲, 主要目的是取得 __FOSSIL__, 並且以 git pull 完整拉下位於 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 中的資料並與空 __FOSSIL__ 進行整合. 其中在 Fossil SCM 端必須將 Setup/Settings 中的 default-csp 設為: <a href="https://fonts.googleapis.com">https://fonts.googleapis.com</a> (讓 CMSiMDE 靜態網頁可以在 Fossil SCM doc 頁面中正常顯示), 且勾選 dotfiles (讓 Fossil SCM 可以儲存 .git 中的版本資料).</p>
<p></p>
<h4>參考資料:</h4>
<p>編譯 Fossil SCM:</p>
<p style="padding-left: 30px;"> <a href="http://project.mde.tw/blog/zai-msys2-huan-jing-bian-yi-fossil-scm.html">http://project.mde.tw/blog/zai-msys2-huan-jing-bian-yi-fossil-scm.html</a></p>
<h1>注意事項</h1>
<p>因為 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 將 CMSiMDE 倉儲作為 submodule, 因此使用者利用 cmstemplate 作為 template 後, 必須使用 git clone --recurse-submodules 取下遠端倉儲.</p>
<p>例如:</p>
<p style="padding-left: 30px;">若使用者的倉儲 URL 為 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a></p>
<p style="padding-left: 30px;">則可以在近端利用:</p>
<p style="padding-left: 30px;">git clone --recurse-submodules <a href="https://github.com/mdecourse/cmstemplate.git">https://github.com/mdecourse/cmstemplate.git</a></p>
<p style="padding-left: 30px;">將遠端倉儲資料存入 cmstemplate 目錄中.</p>
<p>目前的 cmstemplate 內建 cms.bat 與 acp.bat 等兩個 batch 檔案, 可以協助使用者直接在倉儲根目錄啟動 CMSiMDE 動態網頁, 以及單一指令式即可完成 git add, git commit 以及 git push, 但是前提是使用者必須設定以 ssh 方式與 Github 倉儲進行驗證.</p>
<p>例如:</p>
<p style="padding-left: 30px;">若使用者已經將倉儲內容 clone 至近端, 且已經帶有 cmsimde 子模組的內容.</p>
<p style="padding-left: 30px;">則可以在近端命令列進入 cmstemplate 倉儲目錄執行:</p>
<p style="padding-left: 30px;">cms.bat</p>
<p style="padding-left: 30px;">開啟動態網頁系統. 並以 <a>https://localhost:9443</a> 開啟.</p>
<p style="padding-left: 30px;">一旦完成動態網頁的編輯, 利用 Generate Pages 可以轉為靜態網站, 且各 html 檔案將位於 content 目錄中.</p>
<p style="padding-left: 30px;">若使用者希望檢查近端靜態網頁的內容, 可以利用 SciTE 開啟倉儲中的 http-server.py, 並利用瀏覽器以 <a href="https://localhost:8444">https://localhost:8444</a> 檢查靜態網頁內容.</p>
<p style="padding-left: 30px;">一旦使用者要將近端倉儲的動態與靜態網頁內容推向 Github, 則必須將倉儲中 .git/config 的 url, 從 https 改為 ssh 的連線格式:</p>
<p style="padding-left: 30px;">例如:</p>
<p style="padding-left: 60px;">原先 .git/config origin 的 url 為 url = <a href="https://github.com/mdecourse/cmstemplate.git,">https://github.com/mdecourse/cmstemplate.git,</a> 則必須改為:</p>
<p style="padding-left: 60px;">url = <a href="mailto:git@github.com:mdecourse/cmstemplate.git">git@github.com:mdecourse/cmstemplate.git</a></p>
<p style="padding-left: 60px;">之後假如使用者要以 "add some files" 字串當作提交說明訊息, 則可以在命令列中的倉儲目錄執行:</p>
<p style="padding-left: 60px;">acp.bat "add some files"</p>
<h2>標題選擇</h2>
<p>由於 CMSiMDE 中的動態網站透過 config/content.htm 的 H1~H3 超文件標註進行分頁, 因此使用者利用 cms.bat 開啟動態網站後, 必須注意各頁面標題文字的選擇:</p>
<ol>
<li><span style="background-color: #ffff99;">頁面標題文字儘量簡短</span> - 頁面標題就有如文章的章節標題, 只要該標題具有該頁面內容的代表性即可, 越簡短越好.</li>
<li><span style="background-color: #ffff99;">頁面標題文字不要使用標點符號</span> - 因為標點符號中的 "/" 會造成頁面擷取時 URL 指令分段上的誤判, 至於標題文字中若有 ":" 則會在動態內容轉靜態內容時, 因 Windows 不允許檔案名稱帶有 ":" 而無法轉檔.</li>
<li><span style="background-color: #ffff99;">頁面標題中不可以有超文件標註</span> - 由於 CMSiMDE 動態網站編輯器採用 GUI 進行, 採用滑鼠標修頁面標題時, 可能無意中將 HTML 標註放入 H1~H3 標題文字中, 如此可能會造成 CMSiMDE 分頁錯誤而無法開啟動態網站. 當使用者要檢查所使用的頁面標題是否帶有 html 標註, 可以透過編輯功能中的 Source Code 檢查.</li>
<li><span style="background-color: #ffff99;">H1 標題數量不可過多</span> - 由於 CMSiMDE 的靜態網站支援手機模式, 當頁面 H1 標題數量超過 10 個之後, 頁面標題可能無法在螢幕上最上方以一列顯示, 而是必須出現在第二行, 結果將會導致頁面展開時的 Javascript 程式產生錯亂, 結果為無法直接以滑鼠點擊進入特定頁面.</li>
</ol>
<p></p>
<p></p>
<h2>靜態網頁 404</h2>
<p>當使用者將近端網頁倉儲資料推向 Github 後, commit 提交訊息之後若沒有出現綠勾, 表示靜態網頁無法轉檔成功, 這時連接靜態網頁時, 將會出現 404, 通常情況下是因為倉儲中 cmsimde 子模組的版次無法與遠端 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 中的版本對應.</p>
<p>上述靜態網頁出現 404 錯誤訊息的處理方式如下:</p>
<ol>
<li>從 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 倉儲中複製最新版本的版次號, 以 <a href="https://github.com/mdecourse/cmsimde/commit/1c3aeec1f5d26b421743d2f5ef8bb7d5b99292af">2021/03/03 的版次</a>為例, 版次號為 1c3aeec1f5d26b421743d2f5ef8bb7d5b99292af, 使用者只需要最前面的 7 個字元, 也就是 1c3aeec.</li>
<li>然後在近端倉儲中, 以命令列進入 cmsimde 目錄後執行: <span style="background-color: #ffff99;">git checkout 1c3aeec</span></li>
<li>接著退回倉儲目錄, 以 git add, git commit 及 git push 將倉儲改版內容推向 Github 後應該就可以將倉儲正確轉為靜態網站內容.</li>
</ol>
<h2>動態網站錯誤</h2>
<p>CMSiMDE 動態網站經常出現的錯誤是無法對 config/content.htm 分頁, 這時可以利用 SCiTE 編輯 content.htm, 找尋是否 H1~H3 標註中是否帶有特殊符號, 如 "/" 或 ":" 等.</p>
<h1>延伸開發</h1>
<p>為了建立 responsive site:</p>
<p>靜態網頁:</p>
<p style="padding-left: 30px;">Javascript 程式庫:</p>
<p style="padding-left: 60px;"><a href="https://getbootstrap.com/">https://getbootstrap.com/</a></p>
<p>動態系統:</p>
<p style="padding-left: 30px;">Javascript editor</p>
<p style="padding-left: 60px;">TinyMCE: <a href="https://www.tiny.cloud/">https://www.tiny.cloud/</a></p>
<p style="padding-left: 30px;">Syntax highlighter: <a href="https://prismjs.com/">https://prismjs.com/</a></p>
<p style="padding-left: 30px;">Ajax bit by bit file uploader:</p>
<p style="padding-left: 30px;">Flask</p>
<p style="padding-left: 30px;">Flask_cors</p>
<p style="padding-left: 30px;">bs4</p>
<p style="padding-left: 30px;">lxml</p>
<p style="padding-left: 30px;">markdown</p>
<h2>已知問題</h2>
<p>cmsimde 是一套始終修改中的機械設計工程導向網際內容管理系統, 由於自 2013 年底開發至今, Python 已經從 3.6 進展到 3.9, 網際發展方向也從 html editor 趨向 markdown editor, WebGL 相關技術與 three.js 的整合也越發成熟.</p>
<p>因此面對</p>
<p><a href="https://github.com/mdecourse/virtualkossel">https://github.com/mdecourse/virtualkossel</a></p>
<p style="padding-left: 30px;"><a href="http://mde.tw/virtualkossel/">http://mde.tw/virtualkossel/</a></p>
<p>cmsimde 應該要導入更多動態零組件展示與互動相關的機械設計功能.</p>
<p>可以著力的方向:</p>
<p style="padding-left: 30px;"><a href="http://help.autodesk.com/view/fusion360/ENU/?guid=GUID-1C665B4D-7BF7-4FDF-98B0-AA7EE12B5AC2">Fusion 360 </a></p>
<p style="padding-left: 60px;"><a href="https://github.com/AutodeskFusion360">https://github.com/AutodeskFusion360</a></p>
<p style="padding-left: 30px;"><a href="https://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html">https://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html</a></p>
<p style="padding-left: 30px;"><a href="https://vpython.org/">https://vpython.org/</a></p>
<p style="padding-left: 30px;"><a href="https://www.glowscript.org/">https://www.glowscript.org/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/slembcke/Chipmunk2D">https://github.com/slembcke/Chipmunk2D</a></p>
<p style="padding-left: 60px;"><a href="http://www.pymunk.org/en/latest/">http://www.pymunk.org/en/latest/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mrjleo/python-physics-demos">https://github.com/mrjleo/python-physics-demos</a></p>
<p style="padding-left: 30px;">cango3d library: <a href="https://www.arc.id.au/Canvas3DGraphics.html">https://www.arc.id.au/Canvas3DGraphics.html</a></p>
<h3>IPv6</h3>
<p>參考: <a href="https://github.com/tinymce/tinymce/issues/4409">https://github.com/tinymce/tinymce/issues/4409</a> 中的 <a href="https://github.com/tinymce/tinymce/issues/4409#issuecomment-680282550">url parsing 修改</a>後, 目前已經可以在 local 與 IPv6 網路連線中啟用 tinymce4 editor.</p>
<h3>MathJax</h3>
<p>MathJax 引用問題:</p>
<p style="padding-left: 30px;"><a href="https://www.mathjax.org/">https://www.mathjax.org/</a></p>
<h3>html 分頁</h3>
<p>分頁失敗時會意外抹除 config\content.htm 中的所有內容</p>
<p>分頁失敗並不會提供 debug 建議</p>
<h3>template</h3>
<p>cmsimde 針對利用 Flask 產生頁面並未使用 Template, 為了讓程式更加模組化可以考慮納入 <a href="https://www.makotemplates.org/">Mako</a> template engine.</p>
<p></p>